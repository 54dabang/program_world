able of Contents
Apache ZooKeeper Essentials
Credits
About the Author
About the Reviewers
www.PacktPub.com
Support files, eBooks, discount offers, and more
Why subscribe?
Free access for Packt account holders
Preface
What this book covers
What you need for this book
Who this book is for
Conventions
Reader feedback
Customer support
Downloading the example code
Errata
Piracy

第1章 分布式架构
1．1 从集中式到分布式
1．1．1 集中式的特点
1．1．2 分布式的特点
1．1．3 分布式环境的各种问题
1．2 从ACID到CAP/BASE
1．2．1 ACID
1．2．2 分布式事务
1．2．3 CAP和BASE理论
小结

第2章 一致性协议
2．1 2PC与3PC
2．1．1 2PC
2．1．2 3PC
2．2 Paxos算法
2．2．1 追本溯源
2．2．2 Paxos理论的诞生
2．2．3 Paxos算法详解
小结

第3章 Paxos的工程实践
3．1 Chubby
3．1．1 概述
3．1．2 应用场景
3．1．3 设计目标
3．1．4 Chubby技术架构
3．1．5 Paxos协议实现
3．2 Hypertable
3．2．1 概述
3．2．2 算法实现
小结

第4章 ZooKeeper与Paxos
4．1 初识ZooKeeper
4．1．1 ZooKeeper介绍
4．1．2 ZooKeeper从何而来
4．1．3 ZooKeeper的基本概念
4．1．4 为什么选择ZooKeeper
4．2 ZooKeeper的ZAB协议
4．2．1 ZAB协议
4．2．2 协议介绍
4．2．3 深入ZAB协议
4．2．4 ZAB与Paxos算法的联系与区别
小结

第5章 使用ZooKeeper
5．1 部署与运行
5．1．1 系统环境
5．1．2 集群与单机
5．1．3 运行服务
5．2 客户端脚本
5．2．1 创建
5．2．2 读取
5．2．3 更新
5．2．4 删除
5．3 Java客户端API使用
5．3．1 创建会话
5．3．2 创建节点
5．3．3 删除节点
5．3．4 读取数据
5．3．5 更新数据
5．3．6 检测节点是否存在
5．3．7 权限控制
5．4 开源客户端
5．4．1 ZkClient
5．4．2 Curator
小结

第6章 ZooKeeper的典型应用场景
6．1 典型应用场景及实现注
6．1．1 数据发布/订阅
6．1．2 负载均衡
6．1．3 命名服务
6．1．4 分布式协调/通知
6．1．5 集群管理
6．1．6 Master选举
6．1．7 分布式锁
6．1．8 分布式队列
小结
6．2 ZooKeeper在大型分布式系统中的应用
6．2．1 Hadoop
6．2．2 HBase
6．2．3 Kafka
6．3 ZooKeeper在阿里巴巴的实践与应用
6．3．1 案例一 消息中间件：Metamorphosis
6．3．2 案例二 RPC服务框架：Dubbo
6．3．3 案例三 基于MySQL Binlog的增量订阅和消费组件：Canal
6．3．4 案例四 分布式数据库同步系统：Otter
6．3．5 案例五 轻量级分布式通用搜索平台：终搜
6．3．6 案例六 实时计算引擎：JStorm
小结

第7章 ZooKeeper技术内幕
7．1 系统模型
7．1．1 数据模型
7．1．2 节点特性
7．1．3 版本――保证分布式数据原子性操作
7．1．4 Watcher――数据变更的通知
7．1．5 ACL――保障数据的安全
7．2 序列化与协议
7．2．1 Jute介绍
7．2．2 使用Jute进行序列化
7．2．3 深入Jute
7．2．4 通信协议
7．3 客户端
7．3．1 一次会话的创建过程
7．3．2 服务器地址列表
7．3．3 ClientCnxn：网络I/O
7．4 会话
7．4．1 会话状态
7．4．2 会话创建
7．4．3 会话管理
7．4．4 会话清理
7．4．5 重连
7．5 服务器启动
7．5．1 单机版服务器启动
7．5．2 集群版服务器启动
7．6 Leader选举
7．6．1 Leader选举概述
7．6．2 Leader选举的算法分析
7．6．3 Leader选举的实现细节
7．7 各服务器角色介绍
7．7．1 Leader
7．7．2 Follower
7．7．3 Observer
7．7．4 集群间消息通信
7．8 请求处理
7．8．1 会话创建请求
7．8．2 SetData请求
7．8．3 事务请求转发
7．8．4 GetData请求
7．9 数据与存储
7．9．1 内存数据
7．9．2 事务日志
7．9．3 snapshot――数据快照
7．9．4 初始化
7．9．5 数据同步
小结

第8章 ZooKeeper运维
8．1 配置详解
8．1．1 基本配置
8．1．2 高级配置
8．2 四字命令
8．3 JMX
8．3．1 开启远程JMX
8．3．2 通过JConsole连接ZooKeeper
8．4 监控
8．4．1 实时监控
8．4．2 数据统计
8．5 构建一个高可用的集群
8．5．1 集群组成
8．5．2 容灾
8．5．3 扩容与缩容
8．6 日常运维
8．6．1 数据与日志管理
8．6．2 Too many connections
8．6．3 磁盘管理
小结
附录A Windows平台上部署ZooKeeper
附录B 从源代码开始构建
附录C 各发行版本重大更新记录
附录D ZooKeeper源代码阅读指引


1.1 ZooKeeper的使命	8
1.1.1 ZooKeeper改变了什么	10
1.1.2 ZooKeeper不适用的场景	10
1.1.3 关于Apache项目	11
1.1.4 通过ZooKeeper构建分布式系统	11
1.2 示例：主-从应用	12
1.2.1 主节点失效	13
1.2.2 从节点失效	14
1.2.3 通信故障	14
1.2.4 任务总结	15
1.3 分布式协作的难点	16
1.4 ZooKeeper的成功和注意事项	18
第2章 了解ZooKeeper	19
2.1 ZooKeeper基础	19
2.1.1 API概述	20
2.1.2 znode的不同类型	21
2.1.3 监视与通知	22
2.1.4 版本	24
2.2 ZooKeeper架构	25
2.2.1 ZooKeeper仲裁	26
2.2.2 会话	27
2.3 开始使用ZooKeeper	28
2.3.1 第一个ZooKeeper会话	28
2.3.2 会话的状态和声明周期	31
2.3.3 ZooKeeper与仲裁模式	33
2.3.4 实现一个原语：通过ZooKeeper实现锁	36
2.4 一个主-从模式例子的实现	37
2.4.1 主节点角色	37
2.4.2 从节点、任务和分配	40
2.4.3 从节点角色	40
2.4.4 客户端角色	41
2.5 小结	43
第二部分 使用ZooKeeper进行开发
第3章 开始使用ZooKeeper的API	47
3.1 设置ZooKeeper的CLASSPATH	47
3.2 建立ZooKeeper会话	47
3.2.1 实现一个Watcher	49
3.2.2 运行Watcher的示例	51
3.3 获取管理权	53
3.3.1 异步获取管理权	57
3.3.2 设置元数据	60
3.4 注册从节点	62
3.5 任务队列化	65
3.6 管理客户端	66
3.7 小结	68
第4章 处理状态变化	70
4.1 单次触发器	71
4.2 如何设置监视点	72
4.3 普遍模型	73
4.4 主-从模式的例子	74
4.4.1 管理权变化	74
4.4.2 主节点等待从节点列表的变化	77
4.4.3 主节点等待新任务进行分配	80
4.4.4 从节点等待分配新任务	83
4.4.5 客户端等待任务的执行结果	86
4.5 另一种调用方式：Multiop	88
4.6 通过监视点代替显式缓存管理	90
4.7 顺序的保障	91
4.7.1 写操作的顺序	91
4.7.2 读操作的顺序	91
4.7.3 通知的顺序	92
4.8 监视点的羊群效应和可扩展性	93
4.9 小结	94
第5章 故障处理	96
5.1 可恢复的故障	98
5.2 不可恢复的故障	102
5.3 群首选举和外部资源	103
5.4 小结	106
第6章 ZooKeeper注意事项	107
6.1 使用ACL	107
6.1.1 内置的鉴权模式	108
6.1.2 SASL和Kerberos	111
6.1.3 增加新鉴权模式	111
6.2 恢复会话	111
6.3 当znode节点重新创建时，重置版本号	112
6.4 sync方法	112
6.5 顺序性保障	114
6.5.1连接丢失时的顺序性	114
6.5.2 同步API和多线程的顺序性	115
6.5.3 同步和异步混合调用的顺序性	115
6.6 数据字段和子节点的限制	116
6.7 嵌入式ZooKeeper服务器	116
6.8 小结	117
第7章 C语言客户端	118
7.1 配置开发环境	118
7.2 开始会话	119
7.3 引导主节点	121
7.4 行使管理权	126
7.5 任务分配	129
7.6 单线程与多线程客户端	132
7.7 小结	135
第8章 Curator：ZooKeeper API的高级封装库	136
8.1 Curator客户端程序	136
8.2 流畅式API	137
8.3 监听器	138
8.4 Curator中状态的转换	140
8.5 两种边界情况	141
8.6 菜谱	141
8.6.1 群首闩	142
8.6.2 群首选举器	143
8.6.3 子节点缓存器	146
8.7 小结	148
第三部分 ZooKeeper的管理
第9章 ZooKeeper内部原理	151
9.1 请求、事务和标识符	152
9.2 群首选举	153
9.3 Zab：状态更新的广播协议	157
9.4 观察者	161
9.5 服务器的构成	162
9.5.1 独立服务器	163
9.5.2 群首服务器	164
9.5.3 追随者和观察者服务器	165
9.6 本地存储	166
9.6.1 日志和磁盘的使用	166
9.6.2 快照	167
9.7 服务器与会话	169
9.8 服务器与监视点	170
9.9 客户端	170
9.10 序列化	171
9.11 小结	171
第10章 运行ZooKeeper	173
10.1 配置ZooKeeper服务器	174
10.1.1 基本配置	175
10.1.2 存储配置	175
10.1.3 网络配置	177
10.1.4 集群配置	179
10.1.5 认证和授权选项	181
10.1.6 非安全配置	182
10.1.7 日志	183
10.1.8 专用资源	185
10.2 配置ZooKeeper集群	185
10.2.1 多数原则	186
10.2.2 法定人数的可配置性	186
10.2.3 观察者	188
10.3 重配置	188
10.4 配额管理	194
10.5 多租赁配置	196
10.6 文件系统布局和格式	197
10.6.1 事务日志	198
10.6.2 快照	199
10.6.3 时间戳文件	200
10.6.4 已保存的ZooKeeper数据的应用	200
10.7 四字母命令	201
10.8 通过JMX进行监控	202
10.9 工具	209
10.10 小结	209

Apache ZooKeeper Essentials
Credits
About the Author
About the Reviewers
www.PacktPub.com
Support files, eBooks, discount offers, and more
Why subscribe?
Free access for Packt account holders
Preface
What this book covers
What you need for this book
Who this book is for
Conventions
Reader feedback
Customer support
Downloading the example code
Errata
Piracy
Questions
1. A Crash Course in Apache ZooKeeper
Defining a distributed system
Why coordination in a distributed system is so challenging
Introducing Apache ZooKeeper
Getting hands-on with Apache ZooKeeper
Download and installation
Downloading
Installing
Configuration
Starting the ZooKeeper server
Connecting to ZooKeeper with a Java-based shell
Connecting to ZooKeeper with a C-based shell
Setting up a multinode ZooKeeper cluster
Starting the server instances
Running multiple node modes for ZooKeeper
Summary
2. Understanding the Inner Workings of Apache ZooKeeper
A top-down view of the ZooKeeper service
The ZooKeeper data model
Types of znodes
The persistent znode
The ephemeral znode
The sequential znode
Keeping an eye on znode changes – ZooKeeper Watches
The ZooKeeper operations
Watches and ZooKeeper operations
The ZooKeeper access control lists
The ZooKeeper stat structure
Understanding the inner working of ZooKeeper
The quorum mode
Client establishment of sessions with the ZooKeeper service
Implementation of ZooKeeper transactions
Phase 1 – leader election
Phase 2 – atomic broadcast
Local storage and snapshots
Summary
3. Programming with Apache ZooKeeper
Using the Java client library
Preparing your development environment
The first ZooKeeper program
Implementing a Watcher interface
Example – a cluster monitor
The C client library
Getting started with the C API
Example – the znode data watcher
Python client bindings
A watcher implementation
Summary
4. Performing Common Distributed System Tasks
ZooKeeper recipes
Barrier
Queue
Lock
Leader election
Group membership
Two-phase commit
Service discovery
Summary
5. Administering Apache ZooKeeper
Configuring a ZooKeeper server
Minimum configuration
Storage configuration
Network configuration
Configuring a ZooKeeper ensemble
Configuring a quorum
Quota and authorization
ZooKeeper best practices
Monitoring a ZooKeeper instance
Four-letter words
Java Management Extensions
Summary
6. Decorating ZooKeeper with Apache Curator
Curator components
Curator client
Curator framework
Curator recipes
Curator utilities
Curator extensions
Exhibitor
Summary
7. ZooKeeper in Action
Projects powered by ZooKeeper
Apache BookKeeper
Apache Hadoop
Apache HBase
Apache Helix
OpenStack Nova
Organizations powered by ZooKeeper
Yahoo!
Facebook
eBay
Twitter
Netflix
Zynga
Nutanix
VMware vSphere Storage Appliance
Summary
Index



















157. zookeeper 是什么？

zookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。

158. zookeeper 都有哪些功能？

集群管理：监控节点存活状态、运行请求等。

主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。

分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。

命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。
1
2
3
4
5
6
7
159. zookeeper 有几种部署模式？

zookeeper 有三种部署模式：

单机部署：一台集群上运行；

集群部署：多台集群运行；

伪集群部署：一台集群启动多个 zookeeper 实例运行。
1
2
3
4
5
160. zookeeper 怎么保证主从节点的状态同步？

zookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。

161. 集群中为什么要有主节点？

在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。

162. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？

可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。

163. 说一下 zookeeper 的通知机制？

客户端端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。

转载自：https://mp.weixin.qq.com/s/77vUxiWCS-dHsSSiYE3SPQ

