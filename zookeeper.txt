able of Contents
Apache ZooKeeper Essentials
Credits
About the Author
About the Reviewers
www.PacktPub.com
Support files, eBooks, discount offers, and more
Why subscribe?
Free access for Packt account holders
Preface
What this book covers
What you need for this book
Who this book is for
Conventions
Reader feedback
Customer support
Downloading the example code
Errata
Piracy

第1章 分布式架构
1．1 从集中式到分布式
1．1．1 集中式的特点
1．1．2 分布式的特点
1．1．3 分布式环境的各种问题
1．2 从ACID到CAP/BASE
1．2．1 ACID
1．2．2 分布式事务
1．2．3 CAP和BASE理论
小结

第2章 一致性协议
2．1 2PC与3PC
2．1．1 2PC
2．1．2 3PC
2．2 Paxos算法
2．2．1 追本溯源
2．2．2 Paxos理论的诞生
2．2．3 Paxos算法详解
小结

第3章 Paxos的工程实践
3．1 Chubby
3．1．1 概述
3．1．2 应用场景
3．1．3 设计目标
3．1．4 Chubby技术架构
3．1．5 Paxos协议实现
3．2 Hypertable
3．2．1 概述
3．2．2 算法实现
小结

第4章 ZooKeeper与Paxos
4．1 初识ZooKeeper
4．1．1 ZooKeeper介绍
4．1．2 ZooKeeper从何而来
4．1．3 ZooKeeper的基本概念
4．1．4 为什么选择ZooKeeper
4．2 ZooKeeper的ZAB协议
4．2．1 ZAB协议
4．2．2 协议介绍
4．2．3 深入ZAB协议
4．2．4 ZAB与Paxos算法的联系与区别
小结

第5章 使用ZooKeeper
5．1 部署与运行
5．1．1 系统环境
5．1．2 集群与单机
5．1．3 运行服务
5．2 客户端脚本
5．2．1 创建
5．2．2 读取
5．2．3 更新
5．2．4 删除
5．3 Java客户端API使用
5．3．1 创建会话
5．3．2 创建节点
5．3．3 删除节点
5．3．4 读取数据
5．3．5 更新数据
5．3．6 检测节点是否存在
5．3．7 权限控制
5．4 开源客户端
5．4．1 ZkClient
5．4．2 Curator
小结

第6章 ZooKeeper的典型应用场景
6．1 典型应用场景及实现注
6．1．1 数据发布/订阅
6．1．2 负载均衡
6．1．3 命名服务
6．1．4 分布式协调/通知
6．1．5 集群管理
6．1．6 Master选举
6．1．7 分布式锁
6．1．8 分布式队列
小结
6．2 ZooKeeper在大型分布式系统中的应用
6．2．1 Hadoop
6．2．2 HBase
6．2．3 Kafka
6．3 ZooKeeper在阿里巴巴的实践与应用
6．3．1 案例一 消息中间件：Metamorphosis
6．3．2 案例二 RPC服务框架：Dubbo
6．3．3 案例三 基于MySQL Binlog的增量订阅和消费组件：Canal
6．3．4 案例四 分布式数据库同步系统：Otter
6．3．5 案例五 轻量级分布式通用搜索平台：终搜
6．3．6 案例六 实时计算引擎：JStorm
小结

第7章 ZooKeeper技术内幕
7．1 系统模型
7．1．1 数据模型
7．1．2 节点特性
7．1．3 版本――保证分布式数据原子性操作
7．1．4 Watcher――数据变更的通知
7．1．5 ACL――保障数据的安全
7．2 序列化与协议
7．2．1 Jute介绍
7．2．2 使用Jute进行序列化
7．2．3 深入Jute
7．2．4 通信协议
7．3 客户端
7．3．1 一次会话的创建过程
7．3．2 服务器地址列表
7．3．3 ClientCnxn：网络I/O
7．4 会话
7．4．1 会话状态
7．4．2 会话创建
7．4．3 会话管理
7．4．4 会话清理
7．4．5 重连
7．5 服务器启动
7．5．1 单机版服务器启动
7．5．2 集群版服务器启动
7．6 Leader选举
7．6．1 Leader选举概述
7．6．2 Leader选举的算法分析
7．6．3 Leader选举的实现细节
7．7 各服务器角色介绍
7．7．1 Leader
7．7．2 Follower
7．7．3 Observer
7．7．4 集群间消息通信
7．8 请求处理
7．8．1 会话创建请求
7．8．2 SetData请求
7．8．3 事务请求转发
7．8．4 GetData请求
7．9 数据与存储
7．9．1 内存数据
7．9．2 事务日志
7．9．3 snapshot――数据快照
7．9．4 初始化
7．9．5 数据同步
小结

第8章 ZooKeeper运维
8．1 配置详解
8．1．1 基本配置
8．1．2 高级配置
8．2 四字命令
8．3 JMX
8．3．1 开启远程JMX
8．3．2 通过JConsole连接ZooKeeper
8．4 监控
8．4．1 实时监控
8．4．2 数据统计
8．5 构建一个高可用的集群
8．5．1 集群组成
8．5．2 容灾
8．5．3 扩容与缩容
8．6 日常运维
8．6．1 数据与日志管理
8．6．2 Too many connections
8．6．3 磁盘管理
小结
附录A Windows平台上部署ZooKeeper
附录B 从源代码开始构建
附录C 各发行版本重大更新记录
附录D ZooKeeper源代码阅读指引























157. zookeeper 是什么？

zookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。

158. zookeeper 都有哪些功能？

集群管理：监控节点存活状态、运行请求等。

主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。

分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。

命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。
1
2
3
4
5
6
7
159. zookeeper 有几种部署模式？

zookeeper 有三种部署模式：

单机部署：一台集群上运行；

集群部署：多台集群运行；

伪集群部署：一台集群启动多个 zookeeper 实例运行。
1
2
3
4
5
160. zookeeper 怎么保证主从节点的状态同步？

zookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。

161. 集群中为什么要有主节点？

在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。

162. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？

可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。

163. 说一下 zookeeper 的通知机制？

客户端端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。

转载自：https://mp.weixin.qq.com/s/77vUxiWCS-dHsSSiYE3SPQ

