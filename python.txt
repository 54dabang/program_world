第一部分　基础知识

第1章　起步 2

1.1　搭建编程环境 2

1.1.1　Python 2和Python 3 2

1.1.2　运行Python代码片段 3

1.1.3　Hello World程序 3

1.2　在不同操作系统中搭建Python编程环境 3

1.2.1　在Linux系统中搭建Python编程环境 3

1.2.2　在OS X系统中搭建Python编程环境 6

1.2.3　在Windows系统中搭建Python编程环境 8

1.3　解决安装问题 12

1.4　从终端运行Python程序 13

1.4.1　在Linux和OS X系统中从终端运行Python程序 13

1.4.2　在Windows系统中从终端运行Python程序 13

1.5　小结 14

第2章　变量和简单数据类型 15

2.1　运行hello_world.py时发生的情况 15

2.2　变量 16

2.2.1　变量的命名和使用 16

2.2.2　使用变量时避免命名错误 17

2.3　字符串 18

2.3.1　使用方法修改字符串的大小写 19

2.3.2　合并（拼接）字符串 19

2.3.3　使用制表符或换行符来添加空白 20

2.3.4　删除空白 21

2.3.5　使用字符串时避免语法错误 22

2.3.6　Python 2中的print语句 23

2.4　数字 24

2.4.1　整数 24

2.4.2　浮点数 25

2.4.3　使用函数str()避免类型错误 25

2.4.4　Python 2中的整数 26

2.5　注释 27

2.5.1　如何编写注释 27

2.5.2　该编写什么样的注释 28

2.6　Python之禅 28

2.7　小结 30

第3章　列表简介 31

3.1　列表是什么 31

3.1.1　访问列表元素 32

3.1.2　索引从0而不是1开始 32

3.1.3　使用列表中的各个值 33

3.2　修改、添加和删除元素 33

3.2.1　修改列表元素 34

3.2.2　在列表中添加元素 34

3.2.3　从列表中删除元素 35

3.3　组织列表 39

3.3.1　使用方法sort()对列表进行永久性排序 39

3.3.2　使用函数sorted()对列表进行临时排序 40

3.3.3　倒着打印列表 41

3.3.4　确定列表的长度 41

3.4　使用列表时避免索引错误 42

3.5　小结 43

第4章　操作列表 44

4.1　遍历整个列表 44

4.1.1　深入地研究循环 45

4.1.2　在for循环中执行更多的操作 46

4.1.3　在for循环结束后执行一些操作 47

4.2　避免缩进错误 47

4.2.1　忘记缩进 48

4.2.2　忘记缩进额外的代码行 48

4.2.3　不必要的缩进 49

4.2.4　循环后不必要的缩进 49

4.2.5　遗漏了冒号 50

4.3　创建数值列表 51

4.3.1　使用函数range() 51

4.3.2　使用range()创建数字列表 51

4.3.3　对数字列表执行简单的统计计算 53

4.3.4　列表解析 53

4.4　使用列表的一部分 54

4.4.1　切片 54

4.4.2　遍历切片 56

4.4.3　复制列表 56

4.5　元组 59

4.5.1　定义元组 59

4.5.2　遍历元组中的所有值 59

4.5.3　修改元组变量 60

4.6　设置代码格式 61

4.6.1　格式设置指南 61

4.6.2　缩进 61

4.6.3　行长 61

4.6.4　空行 62

4.6.5　其他格式设置指南 62

4.7　小结 63

第5章　if语句 64

5.1　一个简单示例 64

5.2　条件测试 65

5.3　if语句 70

5.4　使用if语句处理列表 76

5.5　设置if语句的格式 80

5.6　小结 80

第6章　字典 81

6.1　一个简单的字典 81

6.2　使用字典 82

6.3　遍历字典 87

6.4　嵌套 93

6.5　小结 99

第7章　用户输入和while循环 100

7.1　函数input()的工作原理 100

7.2　while循环简介 104

7.3　使用while循环来处理列表和字典 110

7.4　小结 113

第8章　函数 114

8.1　定义函数 114

8.2　传递实参 116

8.3　返回值 121

8.4　传递列表 126

8.5　传递任意数量的实参 130

8.6　将函数存储在模块中 133

8.7　函数编写指南 136

8.8　小结 137

第9章　类 138

9.1　创建和使用类 138

9.2　使用类和实例 142

9.3　继承 147

9.4　导入类 153

9.5　Python标准库 159

9.6　类编码风格 161

9.7　小结 161

第10章　文件和异常 162

10.1　从文件中读取数据 162

10.2　写入文件 169

10.3　异常 172

10.4　存储数据 180

10.5　小结 186

第11章　测试代码 187

11.1　测试函数 187

11.2　测试类 193

11.3　小结 199

第二部分　项　　目

项目1　外星人入侵 202

第12章　武装飞船 203

12.1　规划项目 203

12.2　安装Pygame 204

12.3　开始游戏项目 207

12.4　添加飞船图像 211

12.5　重构：模块game_functions 214

12.6　驾驶飞船 216

12.7　简单回顾 223

12.8　射击 224

12.9　小结 231

第13章　外星人 232

13.1　回顾项目 232

13.2　创建第一个外星人 233

13.3　创建一群外星人 236

13.4　让外星人群移动 242

13.5　射杀外星人 246

13.6　结束游戏 250

13.7　确定应运行游戏的哪些部分 255

13.8　小结 256

第14章　记分 257

14.1　添加Play按钮 257

14.2　提高等级 264

14.3　记分 267

14.4　小结 283

项目2　数据可视化 284

第15章　生成数据 285

15.1　安装matplotlib 285

15.2　绘制简单的折线图 287

15.3　随机漫步 295

15.4　使用Pygal模拟掷骰子 303

15.5　小结 311

第16章　下载数据 312

16.1　CSV文件格式 312

16.2　制作交易收盘价走势图：JSON格式 324

16.3　小结 337

第17章　使用API 338

17.1　使用Web API 338

17.2　使用Pygal可视化仓库 344

17.3　Hacker News API 350

17.4　小结 353

项目3　Web应用程序 354

第18章　Django入门 355

18.1　建立项目 355

18.2　创建应用程序 360

18.3　创建网页：学习笔记主页 369

18.4　创建其他网页 373

18.5　小结 381

第19章　用户账户 382

19.1　让用户能够输入数据 382

19.2　创建用户账户 392

19.3　让用户拥有自己的数据 400

19.4　小结 408

第20章　设置应用程序的样式并对其进行部署 409

20.1　设置项目“学习笔记”的样式 409

20.2　部署“学习笔记” 419

20.3　小结 435

附录A　安装Python 436

附录B　文本编辑器 441

附录C　寻求帮助 447

附录D　使用Git进行版本控制 451

后记 460

1.1 本书内容7

1.1.1 什么类型的数据7

1.2 为何利用Python进行数据分析8

1.2.1 Python作为胶水8

1.2.2 解决“双语言”难题8

1.2.3 为何不使用Python9

1.3 重要的Python库9

1.3.1 NumPy9

1.3.2 pandas10

1.3.3 matplotlib11

1.3.4 IPython与Jupyter11

1.3.5 SciPy12

1.3.6 scikit-learn12

1.3.7 statsmodels13

1.4 安装与设置13

1.4.1 Windows14

1.4.2 Apple（OS X和macOS）14

1.4.3 GNU/Linux14

1.4.4 安装及更新Python包15

1.4.5 Python 2和Python 316

1.4.6 集成开发环境和文本编辑器16

1.5 社区和会议17

1.6 快速浏览本书17

1.6.1 代码示例18

1.6.2 示例数据18

1.6.3导入约定18

1.6.4术语19

第2章 Python语言基础、IPython及Jupyter notebook20

2.1 Python解释器21

2.2 IPython基础22

2.2.1 运行IPython命令行22

2.2.2 运行 Jupyter notebook23

2.2.3 Tab补全25

2.2.4 内省27

2.2.5 %run命令28

2.2.6 执行剪贴板中的程序30

2.2.7 终端快捷键30

2.2.8 关于魔术命令31

2.2.9　matplotlib集成33

2.3 Python语言基础34

2.3.1 语言语义34

2.3.2 标量类型42

2.3.3 控制流49

第3章 内建数据结构、函数及文件54

3.1 数据结构和序列54

3.1.1 元组54

3.1.2 列表57

3.1.3 内建序列函数61

3.1.4 字典64

3.1.5集合67

3.1.6 列表、集合和字典的推导式69

3.2 函数72

3.2.1 命名空间、作用域和本地函数72

3.2.2 返回多个值73

3.2.3 函数是对象74

3.2.4 匿名（Lambda）函数75

3.2.5 柯里化：部分参数应用76

3.2.6 生成器77

3.2.7 错误和异常处理79

3.3 文件与操作系统82

3.3.1 字节与Unicode文件85

3.4 本章小结86

第4章 NumPy基础：数组与向量化计算87

4.1 NumPy ndarray：多维数组对象89

4.1.1 生成ndarray90

4.1.2 ndarray的数据类型92

4.1.3 NumPy数组算术94

4.1.4 基础索引与切片95

4.1.5 布尔索引100

4.1.6 神奇索引103

4.1.7 数组转置和换轴104

4.2 通用函数：快速的逐元素数组函数106

4.3 使用数组进行面向数组编程109

4.3.1 将条件逻辑作为数组操作110

4.3.2 数学和统计方法111

4.3.3 布尔值数组的方法113

4.3.4 排序114

4.3.5 唯一值与其他集合逻辑115

4.4 使用数组进行文件输入和输出115

4.5 线性代数116

4.6 伪随机数生成118

4.7 示例：随机漫步120

4.7.1 一次性模拟多次随机漫步121

4.8 本章小结122

第5章 pandas入门123

5.1 pandas数据结构介绍123

5.1.1 Series123

5.1.2 DataFrame128

5.1.3 索引对象134

5.2 基本功能135

第1章　正则表达式　2

1.1　简介／动机　3

1.2　特殊符号和字符　5

1.2.1　使用择一匹配符号匹配多个正则表达式模式　6

1.2.2　匹配任意单个字符　6

1.2.3　从字符串起始或者结尾或者单词边界匹配　7

1.2.4　创建字符集　8

1.2.5　限定范围和否定　8

1.2.6　使用闭包操作符实现存在性和频数匹配　9

1.2.7　表示字符集的特殊字符　10

1.2.8　使用圆括号指定分组　10

1.2.9　扩展表示法　11

1.3　正则表达式和Python语言　11

1.3.1　re模块：核心函数和方法　12

　1.3.2 使用compile()函数编译正则表达式　13

1.3.3　匹配对象以及group()和groups()方法　14

1.3.4　使用match()方法匹配字符串　14

1.3.5　使用search()在一个字符串中查找模式（搜索与匹配的对比）　15

1.3.6　匹配多个字符串　16

1.3.7　匹配任何单个字符（.）　16

1.3.8　创建字符集（[ ]）　17

1.3.9　重复、特殊字符以及分组　18

1.3.10　匹配字符串的起始和结尾以及单词边界　20

1.3.11　使用findall()和finditer()查找每一次出现的位置　21

1.3.12　使用sub()和subn()搜索与替换　22

1.3.13　在限定模式上使用split()分隔字符串　23

1.3.14　扩展符号　24

1.3.15　杂项　27

　1.4 一些正则表达式示例　28

1.5　更长的正则表达式示例　33

1.5.1　匹配字符串　35

1.5.2　搜索与匹配……还有贪婪　37

1.6　练习　39

第2章　网络编程　42

2.1　简介　43

2.2　客户端/服务器架构　43

2.2.1　硬件客户端/服务器架构　43

2.2.2　软件客户端/服务器架构　44

2.2.3　银行出纳员作为服务器吗　44

2.2.4　客户端/服务器网络编程　45

2.3　套接字：通信端点　46

2.3.1　套接字　46

2.3.2　套接字地址：主机-端口对　47

2.3.3　面向连接的套接字与无连接的套接字　47

2.4　Python中的网络编程　48

2.4.1　socket()模块函数　49

2.4.2　套接字对象（内置）方法　49

2.4.3　创建TCP服务器　51

2.4.4　创建TCP客户端　54

2.4.5　执行TCP服务器和客户端　56

2.4.6　创建UDP服务器　58

2.4.7　创建UDP客户端　59

2.4.8　执行UDP服务器和客户端　60

2.4.9　socket模块属性　61

2.5　*SocketServer模块　62

2.5.1　创建SocketServer TCP服务器　63

2.5.2　创建SocketServer TCP客户端　64

2.5.3　执行TCP服务器和客户端　65

2.6　*Twisted框架介绍　66

2.6.1　创建Twisted Reactor TCP服务器　66

2.6.2　创建Twisted Reactor TCP客户端　67

2.6.3　执行TCP服务器和客户端　69

2.7　相关模块　69

2.8　练习　70

第3章　因特网客户端编程　74

3.1　因特网客户端简介　75

3.2　文件传输　75

3.2.1　文件传输因特网协议　75

3.2.2　文件传输协议　76

3.2.3　Python和FTP　77

3.2.4　ftplib.FTP类的方法　77

3.2.5　交互式FTP示例　78

3.2.6　客户端FTP程序示例　79

3.2.7　FTP的其他内容　80

3.3　网络新闻　81

3.3.1　Usenet与新闻组　81

3.3.2　网络新闻传输协议　82

3.3.3　Python和NNTP　83

3.3.4　nntplib.NNTP类方法　83

3.3.5　交互式NNTP示例　84

3.3.6　客户端程序NNTP示例　85

3.3.7　NNTP的其他内容　89

3.4　电子邮件　90

3.4.1　电子邮件系统组件和协议　90

3.4.2　发送电子邮件　91

3.4.3　Python和SMTP　92

3.4.4　smtplib.SMTP类方法　92

3.4.5　交互式SMTP示例　93

3.4.6　SMTP的其他内容　94

3.4.7　接收电子邮件　94

3.4.8　POP和IMAP　95

3.4.9　Python和POP3　95

3.4.10　交互式POP3示例　96

3.4.11　poplib.POP3类方法　97

3.4.12　客户端程序SMTP和POP3示例　98

3.4.13　Python和IMAP4　100

3.4.14　交互式IMAP4示例　100

3.4.15　imaplib.IMAP4类中的常用方法　101

3.5　实战　102

3.5.1　生成电子邮件　102

3.5.2　解析电子邮件　104

3.5.3　基于Web的云电子邮件服务　105

3.5.4　最佳实践：安全、重构　106

3.5.5　Yahoo! Mail　108

3.5.6　Gmail　112

3.6　相关模块　115

3.6.1　电子邮件　115

3.6.2　其他因特网客户端协议　115

3.7　练习　116

第4章　多线程编程　122

4.1　简介/动机　123

4.2　线程和进程　124

4.2.1　进程　124

4.2.2　线程　124

4.3　线程和Python　125

4.3.1　全局解释器锁　125

4.3.2　退出线程　126

4.3.3　在Python中使用线程　126

4.3.4　不使用线程的情况　126

4.3.5　Python的threading模块　128

4.4　thread模块　128

4.5　threading模块　132

4.5.1　Thread类　133

4.5.2　threading模块的其他函数　139

4.6　单线程和多线程执行对比　140

4.7　多线程实践　142

4.7.1　图书排名示例　142

4.7.2　同步原语　149

4.7.3　锁示例　149

4.7.4　信号量示例　156

4.8　生产者-消费者问题和Queue/queue模块　159

4.9　线程的替代方案　162

4.9.1　subprocess模块　163

4.9.2　multiprocessing模块　163

4.9.3　concurrent.futures模块　163

4.10　相关模块　165

4.11　练习　165

第5章　GUI编程　168

5.1　简介　169

5.1.1　Tcl、Tk和Tkinter　169

5.1.2　安装和使用Tkinter　170

5.1.3　客户端/服务端架构　170

5.2　Tkinter和Python编程　170

5.2.1　Tkinter模块：添加Tk到应用中　171

5.2.2　GUI编程介绍　171

5.2.3　顶层窗口：Tkinter.Tk()　173

5.2.4　Tk控件　173

5.3　Tkinter示例　174

5.3.1　Label控件　174

5.3.2　Button控件　175

5.3.3　Label和Button控件　175

5.3.4　Label、Button和Scale控件　176

5.3.5　偏函数应用示例　178

5.3.6　中级Tkinter示例　180

5.4　其他GUI简介　185

5.4.1　Tk接口扩展（Tix）　187

5.4.2　Python MegaWidgets（PMW）　188

5.4.3　wxWidgets和wxPython　188

5.4.4　GTK+和PyGTK　190

5.4.5　Tile/Ttk　192

5.5　相关模块和其他GUI　194

5.6　练习　196

第6章　数据库编程　198

6.1　简介　199

6.1.1　持久化存储　199

6.1.2　数据库基本操作和SQL　199

6.1.3　数据库和Python　201

6.2　Python的DB-API　203

6.2.1　模块属性　203

6.2.2　Connection对象　205

6.2.3　Cursor对象　206

6.2.4　类型对象和构造函数　207

6.2.5　关系数据库　209

6.2.6　数据库和Python：适配器　210

6.2.7　使用数据库适配器的示例　210

6.2.8　数据库适配器示例应用　215

6.3　ORM　226

6.3.1　考虑对象，而不是SQL　227

6.3.2　Python和ORM　227

6.3.3　员工角色数据库示例　228

6.3.4　SQLAlchemy　229

6.3.5　SQLObject　240

6.4　非关系数据库　245

6.4.1　NoSQL介绍　245

6.4.2　MongoDB　246

6.4.3　PyMongo：MongoDB和Python　246

6.4.4　总结　250

6.5　相关文献　250

6.6　练习　252

第7章　*Microsoft Office编程　256

7.1　简介　257

7.2　使用Python进行COM客户端编程　257

7.2.1　客户端COM编程　258

7.2.2　入门　258

7.3　入门示例　259

7.3.1　Excel　259

7.3.2　Word　261

7.3.3　PowerPoint　262

7.3.4　Outlook　264

7.4　中级示例　266

7.4.1　Excel　266

7.4.2　Outlook　268

7.4.3　PowerPoint　273

7.4.4　总结　280

7.5　相关模块/包　281

7.6　练习　281

第8章　扩展Python　286

8.1　简介和动机　287

8.1.1　Python扩展简介　287

8.1.2　什么情况下需要扩展Python　288

8.1.3　什么情况下不应该扩展Python　288

8.2　编写Python扩展　289

8.2.1　创建应用代码　289

8.2.2　根据样板编写封装代码　291

8.2.3　编译　296

8.2.4　导入并测试　297

8.2.5　引用计数　300

8.2.6　线程和全局解释器锁　301

8.3　相关主题　302

8.3.1　SWIG　302

8.3.2　Pyrex　302

8.3.3　Cython　302

8.3.4　Psyco　303

8.3.5　PyPy　303

8.3.6　嵌入Python　304

8.4　练习　304

第2部分　Web开发

第9章　Web客户端和服务器　306

9.1　简介　307

9.1.1　Web应用：客户端/服务器计算　307

9.1.2　因特网　308

9.2　Python Web客户端工具　310

9.2.1　统一资源定位符　310

9.2.2　urlparse模块　312

9.2.3　urllib模块/包　313

9.2.4　使用urllib2 HTTP验证的示例　317

9.2.5　将HTTP验证示例移植到Python 3中　319

9.3　Web客户端　322

9.3.1　一个简单的Web爬虫/蜘蛛/机器人　322

9.3.2　解析Web页面　328

9.3.3　可编程的Web浏览　333

9.4　Web（HTTP）服务器　336

9.5　相关模块　339

9.6　练习　341

第10章　Web编程：CGI和WSGI　345

10.1　简介　346

10.2　帮助Web服务器处理客户端数据　346

10.2.1　CGI简介　346

10.2.2　CGI应用程序　347

10.2.3　cgi模块　348

10.2.4　cgitb模块　348

10.3　构建CGI应用程序　349

10.3.1　构建Web服务器　349

10.3.2　建立表单页　351

10.3.3　生成结果页面　352

10.3.4　生成表单和结果页面　353

10.3.5　全面交互的Web站点　357

10.4　在CGI中使用Unicode　362

10.5　高级CGI　364

10.5.1　mulitipart表单提交和文件上传　364

10.5.2　多值字段　364

10.5.3　cookie　365

10.5.4　cookie和文件上传　365

10.6　WSGI简介　373

10.6.1　动机（替代CGI）　373

10.6.2　服务器集成　374

10.6.3　外部进程　374

10.6.4　WSGI简介　375

10.6.5　WSGI服务器　376

10.6.6　参考服务器　377

10.6.7　WSGI应用示例　378

10.6.8　中间件及封装WSGI应用　378

10.6.9　在Python 3中使用WSGI　379

10.7　现实世界中的Web开发　380

10.8　相关模块　380

10.9　练习　381

第11章　Web框架：Django　384



第12章　云计算：Google App Engine　470



第13章　Web服务　530



第3部分　补充／实验章节

第14章　文本处理　553



第15章　其他内容　577



附录A　部分练习参考答案　593

附录B　参考表　597

B.1　Python关键字　597

B.2　Python标准操作符和函数　598

B.3　数值类型操作符和函数　599

B.4　序列类型操作符和函数　600

B.5　字符串格式化操作符转换符号　602

B.6　字符串格式化操作符指令　603

B.7　字符串类型内置方法　603

B.8　列表类型内置方法　605

B.9　字典类型内置方法　605

B.10　集合类型操作符和内置函数　606

B.11　文件对象方法和数据属性　607

B.12　Python异常　608

B.13　类的特殊方法　610

B.14　Python操作符汇总　612

附录C　Python 3：一种编程语言进化的产物　614

C.1　为何Python在变化　614

C.2　都发生了哪些变化　615

C.2.1　print变成了print()　615

C.2.2　字符串：默认为Unicode编码　616

C.2.3　单类类型　616

C.2.4　更新异常的语法　617

C.2.5　整数的更新　618

C.2.6　迭代器无处不在　619

C.3　迁移工具　619

C.3.1　2to3工具　619

C.3.2　Python 2.6+　620

C.4　结论　620

C.5　参考资料　620

附录D　利用Python 2.6+向Python 3迁移　622

D.1　Python 3：Python的下一代　622

D.2　整数　623

D.2.1　单整数类型　624

D.2.2　新型二进制和改进的八进制字符　624

D.2.3　经典除法或真除法　625

D.3　内置函数　626

D.3.1　print语句或print()函数　626

D.3.2　reduce()转移到了functools模块中　627

D.3.3　其他更新　627

D.4　面向对象编程：两种不同的类对象　628

D.5　字符串　629

D.6　异常　630

D.6.1　处理异常（使用as）　630

D.6.2　抛出异常　630

D.7　其他转换工具和技巧　631

D.8　编写兼容版本2.x和3.x的代码　632

D.8.1　对比print和print()　632

D.8.2　将你的方法导入解决方案中　633

D.8.3　整合在一起　634

