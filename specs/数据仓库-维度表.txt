1.3.1 星型模式与OLAP多维数据库
1.3.2 用于度量的事实表
1.3.3 用于描述环境的维度表
1.3.4 星型模式中维度与事实的连接
1.4 Kimball的DW/BI架构
1.4.1 操作型源系统
1.4.2 获取.转换_加口载(ETL)系统
1.4.3 用于支持商业智能决策的展现区
1.4.4 商业智能应用
1.4.5 以餐厅为例描述Kimball架构
1.5 其他DW/BI架构
1.5.1 独立数据集市架构]
1.5.2 辐射状企业信息工厂Inmon架构
1.5.3 混合辐射状架构与Kimball架构
1.6 维度建模神话
1.6.1 神话1：维度模型仅包含汇总数据
1.6.2 神话2：维度模型是部门级而不是企业级的
1.6.3 神话3：维度模型是不可扩展的
1.6.4 神话4：维度模型仅用于预测
1.6.5 神话5：维度模型不能被集成
1.7 考虑使用维度模型的



维度是维度建模的基础和灵魂。在维度建模中，将度量称为“事实” ，
将环境描述为“维度”，

维度是用于分析事实所需要的多样环境。例如，
在分析交易过程时，可以通过买家、卖家、商品和时间等维度描述交易
发生的环境。
维度所包含的表示维度的列，称为维度属性。维度属性是查询约束
条件、分组和报表标签生成的基本来源，是数据易用性的关键。例如，
在查询请求中，获取某类目的商品、正常状态的商品等，是通过约束商
品类目属性和商品状态属性来实现的；统计淘宝不同商品类目的每日成
交金额，是通过商品维度的类目属性进行分组的；我们在报表中看到的
类目、BC 类型（ B 指天猫， C 指集市）等，都是维度属性。所以维度
的作用一般是查询约束、分类汇总以及排序等。

维度是用于分析事实所需要的多样环境。例如，
 在分析交易过程时，可以通过买家、卖家、商品和时间等维度描述交易
 发生的环境。

 维度所包含的表示维度的列，称为维度属性。
 维度属性是查询约束条件、分组和报表标签生成的基本来源，是数据易用性的关键。

 例如，在查询请求中，获取某类目的商品、正常状态的商品等，是通过约束商
 品类目属性和商品状态属性来实现的；

 统计淘宝不同商品类目的每日成交金额，
 是通过商品维度的类目属性进行分组的；

 我们在报表中看到的类目、BC 类型（ B 指天猫， C 指集市）等，都是维度属性。所以维度
 的作用一般是查询约束、分类汇总以及排序等。

 一方面，可以在报表中获取；

 另一方面，可以在和业务人员的交谈中发现维度或维度属性。

 因为它们经常出现在查询或报表请求中的“按照”（ by ）语句内。例如，

 用户要“按照”月份和产品来查看销售情况，
 那么用来描述其业务的自然方法应该作为维度或维度属性包括在维度模型中。


 维度使用主键标识其唯一性，主键也是确保与之相连的任何事实表之间存在引用完整性的基础。

 主键有两种：代理键和自然键，它们都是用于标识某维度的具体值。
 但代理键是不具有业务含义的键， 一般用于处理缓慢变化维；

 自然键是具有业务含义的键。
 比如商品，在ETL 过程中，对于商品维表的每一行，可以生成一个唯一的代理键与之对应；
 商品本身的自然键可能是商品ID 等。

 其实对于前台应用系统来说，商品ID 是代理键：

 而对于数据仓库系统来说，商品ID 则属于自然键

 ---------------------------
 维度的基本设计方法

 第一步：选择维度或新建维度。
 作为维度建模的核心，在企业级数据仓库中必须保证维度的唯一性。
 以淘宝商品维度为例，有且只允许有一个维度定义。

 第二步：确定主维表。
 此处的主维表一般是ODS 表，直接与业务系统同步。

 以淘宝商品维度为例， s_a uction_ auctions 是与前台商品中心
 系统同步的商品表，此表即是主维表。

 第三步：确定相关维表。

 数据仓库是业务源系统的数据整合，不同
 业务系统或者同一业务系统中的表之间存在关联性。
 根据对业务的梳理，确定哪些表和主维表存在关联关系，并选择其中的某些表用于生成
 维度属性。

 以淘宝商品维度为例，根据对业务逻辑的梳理，可以得到商品与类目、SPU 、卖家、店铺等维度存在关联关系。

 第四步：确定维度属性。

 本步骤主要包括两个阶段，
 其中第一个阶段是从主维表中选择维度属性或生成新的维度属性；
 第二个阶段是从相关维表中选择维度属性或生成新的维度属性。

 以淘宝商品维度为例，从主维表（ s_auction_auctions ）和类目、SPU 、卖家、店铺等相关维表中选择维度属性或生成新的维度属性。

 确定维度属性的几点提示：
 ( 1 ）尽可能生成丰富的维度属性
 比如淘宝商品维度有近百个维度属性，为下游的数据统计、分析、
 探查提供了良好的基础。

 (2 ）尽可能多地给出包括一些富有意义的文字性描述
 属性不应该是编码，而应该是真正的文字。在间里巴巴维度建模中，
 一般是编码和文字同时存在，比如商品维度中的商品ID 和商品标题、
 类目ID 和类目名称等。ID 一般用于不同表之间的关联，而名称一般用于报表标签。

 ( 3 ）区分数值型属性和事实

 数值型宇段是作为事实还是维度属性，可以参考字段的一般用途。

 如果通常用于查询约束条件或分组统计，则是作为维度属性；

 如果通常用于参与度量的计算， 则是作为事实。

 比如商品价格，可以用于查询约束条件或统计价格区间的商品数量，此时是作为维度属性使用的；

 也可以用于统计某类目下商品的平均价格，此时是作为事实使用的。
 另外，

 如果数值型字段是离散值，则作为维度属性存在的可能性较大；
 如果数值型宇段是连续值，则作为度量存在的可能性较大，但并不绝对，需要同时参考宇段的具体用途。


 (4 ）尽量沉淀出通用的维度属性
 有些维度属性获取需要进行比较复杂的逻辑处理，
 有些需要通过多表关联得到，
 或者通过单表的不同宇段混合处理得到，
 或者通过对单表的某个字段进行解析得到。
 此时，需要将尽可能多的通用的维度属性进行沉淀。

 一方面，可以提高下游使用的方便性，减少复杂度；
 另一方面，可以避免下游使用解析时由于各自逻辑不同而导致口径不一致。
 例如，淘宝商品的property 字段，使用key:value 方式存储多个商品属性。

 商品品牌就存存储在此字段中，而商品品牌是重要的分组统计和查询约束
 的条件，所以需要将品牌解析出来，作为品牌属性存在。

 例如，商品是
 否在线，即在淘宝网站是否可以查看到此商品，是重要的查询约束的条
 件，但是无法直接获取，需要进行加工，加工逻辑是：商品状态为0 和
 l 且商品上架时间小于或等于当前时间，则是在线商品g 否则是非在线
 商品。

 所以需要封装商品是否在线的逻辑作为一个单独的属性字段。


 --------------------

 维度的层次结构

 维度中的一些描述属性以层次方式或一对多的方式相互关联，可以
 被理解为包含连续主从关系的属性层次。

 层次的最底层代表维度中描述最低级别的详细信息，
 最高层代表最高级别的概要信息。


 维度常常有多个这样的嵌入式层次结构。
 比如淘宝商品维度，有卖家、类目、品牌等。
 商品属于类目，类目属于行业，其中类目的最低级别是叶子类目，叶子
 类目属于二级类目，二级类目属于一级类目。

 在属性的层次结构中进行钻取是数据钻取的方法之一。关于钻取的
 定义，这里不做介绍，读者可以参考相关书籍。下面通过具体的例子，
 看看如何在层次结构中进行钻取。

 假设己有一个淘宝交易订单，创建事实表。现在统计2015 年“双
 l 1 ”的下单GMV ， 得到一行记录；

 沿着层次向下钻取，添加行业，得
 到行业实例个数的记录数；

 继续沿着层次向下钻取，添加一级类目，得
 到一级类目实例个数的记录数。

 可以看到，通过向报表中添加连续的维度细节级别，实现在层次结构中进行钻取。


 ----------------------

 规范化和反规范化
 当属性层次被实例化为一系列维度，而不是单一的维度时，被称为
 雪花模式。

 大多数联机事务处理系统（ OLTP ）的底层数据结构在设计
 时采用此种规范化技术，

 通过规范化处理将重复属性移至其自身所属的表中，删除冗余数据。
 这种方法用在OLTP 系统中可以有效避免数据冗余导致的不一致
 性。比如在OLTP 系统中，存在商品表和类目表，且商品表中有冗余的
 类目表的属性字段，
 假设对某类目进行更新，则必须更新商品表和类目表，且由于商品和类目是一对多的关系，商品表可能每次需要更新几十
 万甚至上百万条记录，这是不合理的。

 而对于联机分析处理系统（ OLAP)来说，数据是稳定的，不存在OLTP 系统中所存在的问题。
 对于淘系商品维度，如果采用雪花模式进行规范化处理，将表现为
 如图10.1 所示的形式。


 将维度的属性层次合并到单个维度中的操作称为反规范化。
 分析系统的主要目的是用于数据分析和统计，
 如何更方便用户进行统计分析决
 定了分析系统的优劣。

 采用雪花模式，用户在统计分析的过程中需要大
 量的关联操作，使用复杂度高，同时查询性能很差；
 而采用反规范化处理，则方便、易用且性能好。

 对于淘宝商品维度，如果采用反规范化处理，将表现为如图10 . 2
 所示的形式。
 如上所述，从用户角度来看简化了模型，并且使数据库查询优化器的连接路径比完全规范化的模型简化许多。
 反规范化的维度仍包含与规范化模型同样的信息和关系，从分析角度来看，没有丢失任何信息，但
 复杂性降低了。

 一致性维度和交叉探查

 Kimball 的数据仓库总线架构提供了一种分解企业级数据仓库规划任

 务的合理方法，通过构建企业范围内一致性维度和事实来构建总线架构。


 在针对不同数据域进行迭代构建或并行构建时，存在很多需求是对于不同数据域的业
 务过程或者同一数据域的不同业务过程合并在一起观察。

 比如对于日志数据域，统计了商品维度的最近一天的PV 和UV ；
 对于交易数据域，统计了商品维度的最近一天的下单GMV 。

 现在将不同数据域的商品的事实合并在一起进行数据探查，如计算转化率等，称为交叉探查。


 如果不同数据域的计算过程使用的维度不一致，就会导致交叉探查存在问题。

 当存在重复的维度，但维度属性或维度属性的值不一致时，会导致交叉探查无法进行或交叉探查结果错误。

 接上个例子，假设对于日志数据域，统计使用的是商品维度1;


 对于交易数据域，统计使用的是商品维度2 。

 商品维度l 包含维度属性B C 类型， 而商品维度2 无此属性，则无法在BC 类型上进行交叉探查;
 商品维度1 的商品上架时间这一维度属性时间格式是yyyy-MM -dd HH:mm:ss
 商品维度2 的商品上架时间这一维度属性时间格式是UNIX timestamp ，
 进行交叉探查时如果需要根据商品上架时间做限制，则复杂性较高；
 商品维度l 不包含阿里旅行的商品，商品维度2 包含全部的淘系商品，交叉探查也无法进行。

 基本可以划分为维度格式和内容不一致两种类型。

 上面对维度不一致性进行了详细分析，下面总结维度一致性的几种表现形式。

 ·共享维表。
 比如在阿里巴巴的数据仓库中，商品、卖家、买家、
 类目等维度有且只有一个。所以基于这些公共维度进行的交叉探
 查不会存在任何问题。

 ·一致性上卷，其中一个维度的维度属性是另一个维度的维度属性
 的子集，且两个维度的公共维度属性结构和内容相同。

 比如在阿里巴巴的商品体系中，有商品维度和类目维度，其中类目维度的
 维度属性是商品维度的维度属性的子集，且有相同的维度属性和
 维度属性值。这样基于类目维度进行不同业务过程的交叉探查也
 不会存在任何问题。

 ·交叉属性，两个维度具有部分相同的维度属性。
 比如在商品维度中具有类目属性，在卖家维度中具有主营类目属性，
 两个维度具有相同的类目属性，则可以在相同的类目属性上进行不同业务过
 程的交叉探查。

----------------------------------------------------------

 维度整合

 非易失的且随时间变化的数据集合，用来支持管理人员的决策。

 其中集成是数据仓库的四个特性中最重要的一个。

 数据仓库的重要数据来源是大量的、分散的面向应用的操作型环
 境。不同的应用在设计过程中，可以自由决策，主要满足本应用的需求，
 很少会考虑和其他系统进行数据集成。应用之间的差异具体表现在如下
 几个方面：

 ·应用在编码、命名习惯、度量单位等方面会存在很大的差异。比
 如不同应用对于用户的性别编码不同，有0 和1 、F 和M 等；不
 同应用的用户ID 含义相同，但字段名称不同，有user 、user_id
 等；不同应用对于金额的度量单位不同，有元、分等。
 ·应用出于性能和扩展性的考虑，或者随技术架构的演变，以及业
 务的发展，采用不同的物理实现。拆分至不同类型数据库中，部
 分数据采用关系型数据库存储（如Oracle 、MySQL 等），部分数
 据采用NoSQL 数据库存储（如HBase 、Tair 等）。拆分成同一类
 型数据库中的多个物理表，比如对于淘宝商品，有商品主表和商
 品扩展表，商品主表存储商品基本信息，商品扩展表存储商品特
 殊信息，如不同产品线的定制化信息等；对于淘宝会员，有会员
 主表和会员扩展表，会员主表存储用户基本信息，会员扩展表存
 储用户扩展信息，如用户的各种标签信息等。
 所以数据由面向应用的操作型环境进人数据仓库后，需要进行数据
 集成。将面向应用的数据转换为面向主题的数据仓库数据，本身就是一
 种集成。具体体现在如下几个方面：
 ·命名规范的统一。表名、字段名等统一。
 ·字段类型的统一。相同和相似字段的字段类型统一。
 ·公共代码及代码值的统一。公共代码及标志性宇段的数据类型、
 命名方式等统一。
 · 业务含义相同的表的统一。主要依据高内聚、低稠合的理念，在
 物理实现中，将业务关系大、源系统影响差异小的表进行整合：
 将业务关系小、游、系统影响差异大的表进行分而置之。通常有如
 下几种集成方式：
 〉采用主从表的设计方式，将两个表或多个表都有的字段放在
 主表中（主要基本信息），从属信息分别放在各自的从表中。
 对于主表中的主键，要么采用复合主键、源主键和系统或表
 区别标志：要么采用唯一主键、“游、主键和系统或表区别标志”
 生成新的主键。通常建议采用复合主键的方式。
 》直接合并，共有信息和个性信息都放在同一个表中。如果表
 字段的重合度较低，则会出现大量空值，对于存储和易用性
 会有影响，需谨慎选择。
 》不合并，因为源表的表结构及主键等差异很大，无法合并，
 使用数据仓库里的多个表存放各自的数据。
 维表的整合涉及的内容和上面介绍的几个方面相同，下面重点看表
 级别的整合，有两种表现形式。


 第一种是垂直整合，即不同的来源表包含相同的数据集，只是存储
 的信息不同。

 比如淘宝会员在源系统中有多个表，如会员基础信息表、
 会员扩展信息表、淘宝会员等级信息表、天猫会员等级信息表，这些表都属于会员相关信息表，

 依据维度设计方法，尽量整合至会员维度模型中，丰富其维度属性。


 第二种是水平整合，即不同的来源表包含不同的数据集，不同子集
 之间无交叉，也可以存在部分交叉。

 比如针对蚂蚁金服的数据仓库，其采集的会员数据有淘宝会员、1688 会员、国际站会员、支付宝会员等，

 是否需要将所有的会员整合到一个会员表中呢？

 如果进行整合，首先需要考虑各个会员体系是否有交叉，如果存在交叉，则需要去重；
 如果不存在交叉，则需要考虑不同子集的自然键是否存在冲突，

 如果不冲突，则可以考虑将各子集的自然键作为整合后的表的自然键；另一种方式是设置超自然键，将来源表各子集的自然键加工成一个字段作为超自然
 键。

 在阿里巴巴，通常采用将来源表各子集的自然键作为联合主键的方式，

 并且在物理实现时将来源字段作为分区字段。


 水平拆分

 维度通常可以按照类别或类型进行细分。
 比如淘系商品表，根据业务线或行业等可以对商品进行细分，
 如淘宝的商品、天猫的商品、1688的商品、飞猪旅行的商品、淘宝海外的商品、天猫国际的商品等。

 不同分类的商品，其维度属性可能相同，也可能不同。

 比如航旅的商品和普通的淘系商品，都属于商品，都有商品价格、标题、类型、上架时间、
 类目等维度属性，

 但是航旅的商品除了有这些公共属性外，还有酒店、景点、门票、旅行等自己独特的维度属性。


 如何设计维度？针对此问题，主要有两种解决方案：

 方案l 是将维度的不同分类实例化为不同的维度，同时在主维度中保存公共属性：

 方案2 是维护单一维度，包含所有可能的属性。选择哪种方案？

 在数据模型设计过程中需要考虑的因素有很多，基本不可能满足各个特性指标的最优化。

 在设计过程中需要重点考虑以下三个原则。

 · 扩展性：当源系统、业务逻辑变化时，能通过较少的成本快速扩
 展模型，保持核心模型的相对稳定性。软件工程中的高内聚、低
 稠合的思想是重要的指导方针之一。

 · 效能： 在性能和成本方面取得平衡。通过牺牲一定的存储成本，
 达到性能和逻辑的优化。


 · 易用性：模型可理解性高、访问复杂度低。

 用户能够方便地从模型中找到对应的数据表，并能够方便地查询和分析。

 根据数据模型设计思想，在对维度进行水平拆分时，主要考虑如下

 两个依据。


 第一个依据是维度的不同分类的属性差异情况。

 当维度属性随类型变化较大时，将所有可能的属性建立在一个表中是不切合实际的，
 也没有必要这样做，此时建议采用方案l 。

 定义一个主维度用于存放公共属性；同时定义多个子维度，其中除了包含公共属性外，还包含各自的特
 殊属性。比如在阿里巴巴数据仓库维度体系中，依据此方法，构建了商
 品维度、航旅商品维度等。公共属性一般比较稳定，通过核心的商品维
 度，保证了核心维度的稳定性；通过扩展子维度的方式，保证了模型的
 扩展性。


 第二个依据是业务的关联程度。
 两个相关性较低的业务，稠合在一起弊大于利，对模型的稳定性和易用性影响较大。比如在阿里巴巴数据
 仓库维度体系中，对淘系商品和1688 商品构建两个维度。虽然淘系和
 1688 在底层技术实现上是统一的，但属于不同的BU ，业务各自发展；
 在数据仓库层面，淘系和1 688 属于不同的数据集市， 一般不会相互调
 用，业务分析人员一般只针对本数据集市进行统计分析。如果设计成一
 个维度，由于不同B U 业务各自发展， 1688 业务变更，此维度需要变更，
 淘宝业务变更亦然，稳定性很差；在易用性方面，会给数据使用方造成
 困扰。

------------


2.3.1 维度表结构
2.3.2 维度代理键
2.3.3 自然键、持久键和超自然键
2.3.4 下钻
2.3.5 退化维度
2.3.6 非规范化扁平维度
2.3.7 多层次维度
2.3.8 文档属性的标识与指示器
2.3.9 维度表中的空值属性
2.3.10 日历日期维度
2.3.11 扮演角色的维度
2.3.12 杂项维度
2.3.13 雪花维度
2.3.14 支架维度

2.4 使用一致性维度集成
2.4.1 一致性维度
2.4.2 缩减维度
2.4.3 跨表钻取
2.4.4 价值链
2.4.5 企业数据仓库总线架构
2.4.6 企业数据仓库总线矩阵
2.4.7 总线矩阵实现细节
2.4.8 机会／利益相关方矩阵


2.5 处理缓慢变化维度属性
2.5.1 类型0：原样保留
2.5.2 类型1：重写
2.5.3 类型2：增加新行
2.5.4 类型3：增加新属性
2.5.5 类型4：增加微型维度
2.5.6 类型5：增加微型维度及类型1支架
2.5.7 类型6：增加类型1属性到类型2维度
2.5.8 类型7：双类型l和类型2维度



2.6 处理维度层次关系
2.6.1 固定深度位置的层次
2.6.2 轻微参差不齐／可变深度层次
2.6.3 具有层次桥接表的参差不齐／可变深度层次
2.6.4 具有路径字符属性的可变深度层次





2.8.1 维度表连接
2.8.2 多值维度与桥接表
2.8.3 随时间变化的多值桥接表
2.8.4 标签的时间序列行为
2.8.5 行为研究分组
2.8.6 聚集事实作为维度属性
2.8.7 动态值范围
2.8.8 文本注释维度
2.8.9 多时区
2.8.10 度量类型维度





