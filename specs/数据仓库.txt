第1章 数据仓库、商业智能及维度建模初步
1.1 数据获取与数据分析的区别
1.2 数据仓库与商业智能的目标
1.3 维度建模简介
1.3.1 星型模式与OLAP多维数据库
1.3.2 用于度量的事实表
1.3.3 用于描述环境的维度表
1.3.4 星型模式中维度与事实的连接
1.4 Kimball的DW/BI架构
1.4.1 操作型源系统
1.4.2 获取.转换_加口载(ETL)系统
1.4.3 用于支持商业智能决策的展现区
1.4.4 商业智能应用
1.4.5 以餐厅为例描述Kimball架构
1.5 其他DW/BI架构
1.5.1 独立数据集市架构]
1.5.2 辐射状企业信息工厂Inmon架构
1.5.3 混合辐射状架构与Kimball架构
1.6 维度建模神话
1.6.1 神话1：维度模型仅包含汇总数据
1.6.2 神话2：维度模型是部门级而不是企业级的
1.6.3 神话3：维度模型是不可扩展的
1.6.4 神话4：维度模型仅用于预测
1.6.5 神话5：维度模型不能被集成
1.7 考虑使用维度模型的
更多理由
1.8 本章小结

第2章 Kimball维度建模技术概述
2.1 基本概念
2.1.1 收集业务需求与数据实现
2.1.2 协作维度建模研讨
2.1.3 4步骤维度设计过程
2.1.4 业务过程
2.1.5 粒度
2.1.6 描述环境的维度
2.1.7 用于度量的事实
2.1.8 星型模式与OLAP多维数据库
2.1.9 方便地扩展到维度模型
2.2 事实表技术基础
2.2.1 事实表结构
2.2.2 可加、半可加、不可加事实
2.2.3 事实表中的空值
2.2.4 一致性事实
2.2.5 事务事实表
2.2.6 周期快照事实表
2.2.7 累积快照事实表
2.2.8 无事实的事实表
2.2.9 聚集事实表或OLAP多维数据库
2.2.1 0合并事实表
2.3 维度表技术基础
2.3.1 维度表结构
2.3.2 维度代理键
2.3.3 自然键、持久键和超自然键
2.3.4 下钻
2.3.5 退化维度
2.3.6 非规范化扁平维度
2.3.7 多层次维度
2.3.8 文档属性的标识与指示器
2.3.9 维度表中的空值属性
2.3.10 日历日期维度
2.3.11 扮演角色的维度
2.3.12 杂项维度
2.3.13 雪花维度
2.3.14 支架维度
2.4 使用一致性维度集成
2.4.1 一致性维度
2.4.2 缩减维度
2.4.3 跨表钻取
2.4.4 价值链
2.4.5 企业数据仓库总线架构
2.4.6 企业数据仓库总线矩阵
2.4.7 总线矩阵实现细节
2.4.8 机会／利益相关方矩阵
2.5 处理缓慢变化维度属性
2.5.1 类型0：原样保留
2.5.2 类型1：重写
2.5.3 类型2：增加新行
2.5.4 类型3：增加新属性
2.5.5 类型4：增加微型维度
2.5.6 类型5：增加微型维度及类型1支架
2.5.7 类型6：增加类型1属性到类型2维度
2.5.8 类型7：双类型l和类型2维度
2.6 处理维度层次关系
2.6.1 固定深度位置的层次
2.6.2 轻微参差不齐／可变深度层次
2.6.3 具有层次桥接表的参差不齐／可变深度层次
2.6.4 具有路径字符属性的可变深度层次
2.7 高级事实表技术
2.7.1 事实表代理键
2.7.2 蜈蚣事实表
2.7.3 属性或事实的数字值
2.7.4 日志／持续时间事实
2.7.5 头／行事实表
2.7.6 分配的事实
2.7.7 利用分配建立利润与损失事实表
2.7.8 多种货币事实
2.7.9 多种度量事实单位
2.7.1 0年.日事实
2.7.1 1多遍SQL以避免事实表间的连接
2.7.1 2针对事实表的时间跟踪1
2.7.1 3迟到的事实
2.8 高级维度技术
2.8.1 维度表连接
2.8.2 多值维度与桥接表
2.8.3 随时间变化的多值桥接表
2.8.4 标签的时间序列行为
2.8.5 行为研究分组
2.8.6 聚集事实作为维度属性
2.8.7 动态值范围
2.8.8 文本注释维度
2.8.9 多时区
2.8.10 度量类型维度
……
第3章 零售业务
第4章 库存
第5章 采购
第6章 订单管理
第7章 会计
第8章 客户关系管理
第9章 人力资源管理
第10章 金融服务
第11章 电信
第12章 交通运输
第13章 教育
第14章 医疗卫生
第15章 电子商务
第16章 保险业务
第17章 KimballDW/BI生命周期概述
第18章 维度建模过程与任务
第19章 ETL子系统与技术
第20章 ETL系统设计与开发过程和任务
第21章 大数据分析

第1章 读本概览
1.1 抑制住立即开始编码的冲动
1.2 设置边界
1.3 数据争夺
1.4 流言终结者
1.5 划分数据世界
1.6 集成式企业数据仓库的必要步骤
1.6.1 集成式：EDW会交付什么
1.6.2 集成的终极试金石
1.6.3 组织挑战
1.6.4 一致化维度和事实
1.6.5 使用总线矩阵与管理层交流
1.6.6 管理集成式EDW的主干
1.6.7 维度管理器
1.6.8 事实提供者
1.6.9 配置商业智能（BI）工具
1.6.10 连带责任
1.7 钻取以寻求原因
1.8 渐变维度
1.8.1 渐变维度的三种原生类型
1.8.2 高级渐变维度
1.9 通过维度评价BI工具
1.10 事实表
1.10.1 忠实于粒度
1.10.2 从最低的可能粒度进行构建
1.10.3 三类事实表
1.11 开发利用事实表
1.11.1 前端：聚合导航
1.11.2 前端：钻取不同的粒度
1.11.3 前端：将约束暴露给不同的业务过程
1.11.4 后端：事实表代理键

第2章 深入研究之前
2.1 Ralph Kimball和施乐帕克研究中心（Xerox PARC）
2.2 数据库市场分化
2.3 提出超市概念（Kimball经典）
2.3.1 危机规划
2.3.2 具有架构的数据集市
2.3.3 一致化维度的重要性
2.3.4 设计一致化维度
2.3.5 做出承诺
2.3.6 允许的一致化维度变体
2.3.7 建立标准事实定义
2.3.8 粒度的重要性
2.3.9 更高级别的数据集市
2.3.10 解决烟囱问题
2.3.11 不需要一致化维度的情形
2.3.12 清晰视角
2.4 数据仓库的全新需求
2.5 应对全新需求
2.5.1 数据集市和维度建模
2.5.2 将数据集市插入数据仓库总线架构中
2.6 挑起事端
2.7 设计约束和不可避免的现实
2.7.1 设计约束
2.7.2 不可避免的现实
2.7.3 摆脱困境
……

第3章 项目/程序规划
第4章 需求定义
第5章 数据架构
第6章 维度建模基础
第7章 维度建模任务和职责
第8章 事实表核心概念
第9章 维度表核心概念
第10章 更多的维度模式和注意事项
第11章 后台ETL和数据质量
第12章 技术架构注意事项
第13章 前台商业智能应用程序
第14章 维护和发展的注意事项


第1章 决策支持系统的发展
1.1 演化
1.2 自然演化式体系结构的问题
1.3 开发生命周期
1.4 硬件利用模式
1.5 为重建工程创造条件
1.6 监控数据仓库环境
1.7 小结
第2章 数据仓库环境
2.1 数据仓库的结构
2.2 面向主题
2.3 第1天到第n天的现象
2.4 粒度
2.5 探查与数据挖掘
2.6 活样本数据库
2.7 分区设计方法
2.8 数据仓库中的数据组织
2.9 审计与数据仓库
2.10 数据的同构/异构
2.11 数据仓库中的数据清理
2.12 报表与体系结构化环境
2.13 各种环境中的操作型窗口
2.14 数据仓库中的错误数据
第3章 设计数据仓库
3.1 从操作型数据开始
3.2 数据/过程模型与体系结构化环境
3.3 数据仓库与数据模型
3.4 数据模型与迭代式开发
3.5 规范化/反向规范化
3.6 元数据
3.7 数据周期——时间间隔
3.8 转换和集成的复杂性
3.9 数据仓库记录的触发
3.10 概要记录
3.11 管理大量数据
3.12 创建多个概要记录
3.13 从数据仓库环境到操作型环境
3.14 数据仓库数据的直拉操作型访问
3.15 数据仓库数据的间接访问
3.16 数据仓库数据的间接使用
3.17 星形连接
3.18 支持操作型数据存储
3.19 需求和Zachman框架
3.20 小结
第4章 数据仓库中的粒度
4.1 粗略估算
4.2 规划过程的输入
4.3 溢出存储器中的数据
4.4 确定粒度级别
4.5 一些反馈循环技巧
4.6 确定粒度级别的几个例子
4.7 填充数据集市
4.8 小结
第5章 数据仓库和技术
5.1 管理大量数据
5.2 管理多种介质
5.3 索引和监控数据
5.4 多种技术的接口
5.5 程序员/设计者对数据存放位置的控制
5.6 数据的并行存储和管理
5.7 语言接口
5.8 数据的有效装裁
5.9 有效利用索引
5.10 数据压缩
5.11 复合主键
5.12 变长数据
5.13 加锁管理
5.14 只涉及索引的处理
5.15 快速恢复
5.16 其他的技术特征
5.17 DBMS类型和数据仓库
5.18 改变DBMS技术
5.19 多维DBMS和数据仓库
5.20 在多种存储介质上构建数据仓库
5.21 数据仓库环境中元数据的角色
5.22 上下文和内容
5.23 刷新数据仓库
5.24 测试问题
5.25 小结
第6章 分布式数据仓库
第7章 主管信息系统和数据仓库
第8章 外部数据与数据仓库
第9章 迁移到体系结构化环境
第10章 数据仓库和Web
第11章 非结构化数据和数据仓库
第12章 大型数据仓库
第13章 关系模型和多维模型数据库设计基础
第14章 数据仓库高级话题
第15章 数据仓库的成本论证和投资回报
第16章 数据仓库和ODS
第17章 企业信息依从准则和数据仓库
第18章 最终用户社区
第19章 数据仓库设计的复查要目

第1章 数据仓库的概念与体系结构
1．1 数据仓库的兴起
1．1．1 数据管理技术的发展
1．1．2 数据仓库的萌芽
1．2 数据仓库的基本概念
1．2．1 元数据
1．2．2 数据粒度
1．2．3 数据模型
1．2．4 ETL
1．2．5 数据集市
1．3 数据仓库的特点与组成
1．3．1 数据仓库的特点
1．3．2 数据仓库的组成
1．4 数据仓库的体系结构
1．4．1 传统的数据仓库体系结构
1．4．2 传统数据仓库系统在大数据时代所面临的挑战
1．4．3 大数据时代的数据仓库
习题

第2章 数据
2．1 数据的概念与内容
2．2 数据属性与数据集
2．3 数据预处理
2．3．1 数据预处理概述
2．3．2 数据清洗
2．3．3 数据集成
2．3．4 数据变换
2．3．5 数据归约
习题

第3章 数据存储
3．1 数据仓库的数据模型
3．1．1 数据仓库的概念模型
3．1．2 数据仓库的逻辑模型
3．1．3 数据仓库的物理模型
3．2 元数据存储
3．2．1 元数据的概念
3．2．2 元数据的分类方法
3．2．3 元数据的管理
3．2．4 元数据的作用
3．3 数据集市
3．3．1 数据集市的概念
3．3．2 数据集市的类型
3．3．3 数据集市的建立
3．4 大数据存储技术
3．4．1 大数据的概念
3．4．2 传统数据库的局限
3．4．3 NoSQL数据库
3．4．4 几种主流的NoSQL数据库
习题

第4章 OLAP与数据立方体
4．1 OLAP的概念4．1．1 OLAP的定义
4．1．2 OLAP的准则
4．1．3 OLAP的特征
4．2 多维分析的基本分析动作
4．2．1 切片
4．2．2 切块
4．2．3 钻取
4．2．4 旋转
……

第5章 数据挖掘基础
第6章 关联挖掘
第7章 聚类分析
第8章 分类
第9章 神经网络
第10章 统计分析
第11章 非结构化数据挖掘
第12章 知识图谱
第13章 大数据挖掘算法


第1章 实时数据仓库技术概述
1．1 数据仓库技术
1．1．1 数据仓库的定义
1．1．2 数据仓库的特点
1．1．3 数据仓库的体系结构
1．1．4 数据仓库的模型
1．2 实时数据仓库技术
1．2．1 实时数据仓库的定义
1．2．2 实时数据仓库的新挑战
1．2．3 实时数据仓库的体系结构
1．2．4 实时数据仓库与传统数据仓库的比较
1．3 MapReduce技术
1．3．1 MapReduce编程模式
1．3．2 MapReduce框架的实现
1．3．3 Hadoop

第2章 实时数据仓库体系结构
2．1 实时数据仓库体系结构的设计
2．2 ODS分区
2．3 双镜像交替分区
2．4 数据仓库副本分区
2．5 多级缓存分区机制
2．5．1 缓存的数据新鲜度
2．5．2 缓存的更新算法
2．5．3 多级缓存分区机制的查询
2．5．4 查询冲突问题的解决
2．6 几种实时数据存储区的比较

第3章 变化数据捕获
3．1 变化数据捕获方法
3．1．1 基于数据源表的时间戳标注
3．1．2 基于日志的被动数据变化的捕获
3．1．3 基于触发器的主动数据变化的捕获
3．2 基于LogMiner的变化数据捕获
3．2．1 Oracle日志简述
3．2．2 Oracle日志的两种模式
3．2．3 LogM：iner进行日志挖掘的基本流程
3．3 基于CDC的变化数据捕获
3．3．1 CDC工具捕获变化数据概述
3．3．2 CDC相关的数据库对象
3．3．3 对变化数据处理
3．3．4 CDC捕获模块流程设计

第4章 更新查询调度技术
4．1 更新查询调度技术概述
4．2 基于优先级的更新与查询平衡调度
4．2．1 系统模型
4．2．2 在线日志捕获数据
4．2．3 系统性能参数
4．2．4 PBBS调度算法
4．2．5 并行一致性控制策略
4．2．6 小结
4．3 支持Qos的更新和查询任务调度
4．3．1 概述
4．3．2 系统模型
4．3．3 查询任务的时间估算
4．3．4 调度算法
4．3．5 小结

第5章 实时数据仓库并行查询
5．1 概述
5．2 MapRecluee的基本流程
5．3 基于MapReclUee的并行关系运算
5．3．1 选择和投影运算
5．3．2 连接运算
5．3．3 除运算
5．3．4 聚集运算
5．4 基于分块结构的分布式数据库ChunkDB
5．4．1 ChunkDB的整体架构
5．4．2 ChunkDB分布式数据库
5．5 基于ChunkDB数据库的MapRecluee计算
5．5．1 基于ChunkDB的Maptleduee计算实现流程
5．5．2 DBInputFormat数据接口扩展
5．6 ChunkDB性能评估
5．6．1 评估环境
5．6．2 查询性能评价
5．6．3 集群规模的影响

第6章 实时数据立方技术
6．1 概述
6．2 基础知识
6．2．1 数据立方Cube
6．2．2 Dwarf数据立方
6．2．3 MapRedllice
6．3 基于MapReduee的数据立方构建
6．4 Dwarf立方的分割
6．4．1 Dwarf立方的基础划分
6．4．2 Dwarf立方的多维划分
6．5 并行Dwarf数据立方
6．5．1 并行Dwarf的建立
6．5．2 并行Dwarf的查询
6．5．3 并行Dwarf的更新
6．5．4 并行Dwarf的优化
6．6 并行Dwarf性能分析
6．6．1 评估环境
6．6．2 Dwarf的建立和存储性能
6．6．3 Dwarf立方的查询性能
6．6．4 Dwarf立方的更新性能
6．6．5 集群节点数量的影响

第7章 MR-RTDWH系统
7．1 MR．RTDWH概述
7．2 MR-RTDwH系统设计
7．2．1 系统设计目标
7．2．2 系统体系结构
7．2．3 传统ETL模块
7．2．4 实时ETL模块
7．2．5 实时数据仓库存储
7．2．6 更新查询调度模块
7．2．7 M印Reduce并行计算模块
7．2．8 MR-RTDWH系统实现


1.2　大数据2
1.3　大数据的定义4
1.4　为什么需要大数据？为什么是现在4
1.5　大数据示例5
1.5.1　社交媒体的文章5
1.5.2　调查数据分析6
1.5.3　调查数据7
1.5.4　气象数据8
1.5.5　Twitter数据8
1.5.6　集成和分析8
1.5.7　附加数据的类型10
1.6　总结11
延伸阅读11
第2章　使用大数据12
2.1　引言12
2.2　数据爆炸12
2.3　数据体量13
2.3.1　机器数据14
2.3.2　应用日志14
2.3.3　点击流日志14
2.3.4　外部或第三方数据15
2.3.5　电子邮件15
2.3.6　合同15
2.3.7　地理信息系统和地理空间数据16
2.3.8　示例：Funshots公司17
2.4　数据速度19
2.4.1　Amazon、Facebook、Yahoo和Google19
2.4.2　传感器数据19
2.4.3　移动网络20
2.4.4　社交媒体20
2.5　数据多样性21
2.6　总结22
第3章　大数据处理架构23
3.1　引言23
3.2　再论数据处理23
3.3　数据处理技术24
3.4　数据处理基础设施的挑战25
3.4.1　存储25
3.4.2　传输25
3.4.3　处理26
3.4.4　速度或吞吐量26
3.5　全共享架构与无共享架构的比较26
3.5.1　全共享架构27
3.5.2　无共享架构27
3.5.3　OLTP与数据仓库28
3.6　大数据处理28
3.6.1　基础设施方面31
3.6.2　数据处理方面32
3.7　电信大数据研究32
3.7.1　基础设施34
3.7.2　数据处理34
第4章　大数据技术简介35
4.1　引言35
4.2　分布式数据处理36
4.3　大数据处理需求38
4.4　大数据处理技术39
4.5　Hadoop42
4.5.1　Hadoop核心组件43
4.5.2　Hadoop总结69
4.6　NoSQL69
4.6.1　CAP定理69
4.6.2　键-值对：Voldemort70
4.6.3　列簇存储：Cassandra70
4.6.4　文档数据库：Riak76
4.6.5　图数据库77
4.6.6　NoSQL小结78
4.7　文本ETL处理78
延伸阅读79
第5章　大数据驱动的商业价值80
5.1　引言80
5.2　案例研究1：传感器数据81
5.2.1　摘要81
5.2.2　Vestas81
5.2.3　概述81
5.2.4　利用风力发电81
5.2.5　把气候变成资本82
5.2.6　跟踪大数据的挑战83
5.2.7　维持数据中心的能源效率83
5.3　案例研究2：流数据84
5.3.1　摘要84
5.3.2　监控和安全：TerraEchos84
5.3.3　需求84
5.3.4　解决方案84
5.3.5　效益84
5.3.6　先进的光纤网结合实时流数据85
5.3.7　解决方案组件85
5.3.8　扩展安全边界创建战略优势85
5.3.9　关联传感器数据使得假阳性率为零86
5.4　案例研究3：通过大数据分析改善患者预后86
5.4.1　摘要86
5.4.2　业务目标87
5.4.3　挑战87
5.4.4　概述：给从业人员新的洞察以指导患者护理87
5.4.5　挑战：将传统数据仓库生态系统与大数据融合87
5.4.6　解决方案：为大数据分析做好准备88
5.4.7　结果：消除“数据陷阱”88
5.4.8　为什么是aster88
5.4.9　关于Aurora89
5.5　案例研究4：安大略大学技术学院—利用关键数据，提供积极的患者护理89
5.5.1　摘要89
5.5.2　概述89
5.5.3　商业上的收益90
5.5.4　更好地利用数据资源90
5.5.5　智慧医疗保健91
5.5.6　解决方案组件91
5.5.7　融合人类知识与技术92
5.5.8　扩大Artemis的影响92
5.6　案例研究5：微软SQL Server客户解决方案93
5.6.1　客户画像93
5.6.2　解决方案的亮点93
5.6.3　业务需求93
5.6.4　解决方案94
5.6.5　好处94
5.7　案例研究6：以客户为中心的数据集成95
5.7.1　概述95
5.7.2　解决方案设计98
5.7.3　促成更好的交叉销售和追加销售的机会99
5.8　总结100
第二部分　数据仓库
第6章　再论数据仓库102
6.1　引言102
6.2　传统的数据仓库或DW 1.0103
6.2.1　数据架构103
6.2.2　基础设施104
6.2.3　数据仓库的陷阱106
6.2.4　建立数据仓库的架构方法111
6.3　DW 2.0113
6.3.1　Inmon的DW 2.0概述114
6.3.2　DSS 2.0概述115
6.4　总结116
延伸阅读116
第7章　数据仓库的再造118
7.1　引言118
7.2　企业数据仓库平台118
7.2.1　事务型系统119
7.2.2　运营数据存储区119
7.2.3　分段区120
7.2.4　数据仓库120
7.2.5　数据集市120
7.2.6　分析型数据库121
7.2.7　数据仓库的问题121
7.3　再造数据仓库的选择122
7.3.1　平台再造122
7.3.2　平台工程123
7.3.3　数据工程124
7.4　使数据仓库现代化125
7.5　使数据仓库现代化的案例研究127
7.5.1　当前状态分析127
7.5.2　推荐127
7.5.3　现代化的业务收益128
7.5.4　一体机的选择过程128
7.6　总结132
第8章　数据仓库中的工作负载管理133
8.1　引言133
8.2　当前状态133
8.3　工作负载的定义134
8.4　了解工作负载135
8.4.1　数据仓库输出136
8.4.2　数据仓库输入137
8.5　查询分类138
8.5.1　宽/宽138
8.5.2　宽/窄139
8.5.3　窄/宽139
8.5.4　窄/窄139
8.5.5　非结构化/半结构化数据140
8.6　ETL和CDC的工作负载140
8.7　度量141
8.8　当前系统设计的局限142
8.9　新工作负载和大数据143
8.10　技术选择144
8.11　总结144
第9章　应用到数据仓库的新技术145

==========
https://cloud.tencent.com/document/product/878/31441


云数据仓库套件 Sparkling 简介
云数据仓库套件 Sparkling（Tencent Sparkling Data Warehouse Suite）为您提供一套全托管、简单易用的、高性能的PB级云端数据仓库解决方案。Sparkling 基于业界领先的 Apache Spark 框架，您可以在数分钟内创建数千节点的企业级云端分布式数据仓库，并高效的按需快速弹性扩缩容。通过一站式大数据开发和科学平台 DataStudio 进行集群管控、数据集成、元数据管理、工作流开发、数据加工处理、结果可视化等操作，深度集成商业智能分析 BI，构建应用数据集市，提供海量数据的离线加工、数据建模、即席查询分析、数据挖掘和可视化探查能力。还可以借助 Sparkling 跨数据源联合分析特性，轻松分析位于 COS 和 CDB 等数据引擎上的数据，帮助企业专注于数据价值的挖掘和探索。


 腾讯云 Snova 数据仓库服务简介
Snova 数据仓库（下文简称 Snova）为您提供简单、快速、经济高效的 PB 级云端数据仓库解决方案。Snova 兼容 Greenplum 开源数据仓库，是一种基于 MPP（大规模并行处理）架构的数仓服务。借助于 Snova，您可以使用丰富的 PostgreSQL 开源生态工具，实现对 Snova 中海量数据的即席查询分析、ETL 处理及可视化探索；还可以借助 Snova 云端数据无缝集成特性，轻松分析位于 COS、TencentDB、ES 等数据引擎上的 PB 级数据。


产品简介
Snova 数据仓库产品文档
 文档
腾讯云 Snova 数据仓库产品特性

弹性伸缩
提供便利的弹性扩容能力，通过云控制台或云 API 简单操作便可以实现数百节点的伸缩或变配。 根据业务需求，可选择计算单元、CPU、内存、存储空间的等比扩展，提高性能以适配业务的发展。



简单易用
通过控制台操作，即可实现集群管理、监控维护等工作，无需关注底层基础设施的繁重运维工作。完全支持 ANSI SQL 2008 标准，使用标准 SQL 即可构建企业级数据仓库。支持直接查询 COS 数据，而无需提前数据预加载。



无缝集成
支持 COS 云存储扩展，实现存储空间的无限扩展。搭配多种工具及方案支持多源数据（如传统关系型数据库、Ckafka、流计算等）高速导入，实现对云端多源数据的汇聚分析。


性能卓越
基于分布式大规模并行处理 MPP 框架，可线性扩展存储及计算能力。支持行列混合存储，可按业务需求选择最佳存储方案。查询引擎深度优化，查询效率数倍于传统数据仓库。



安全可靠
双节点同步冗余，实现用户无感的故障转移和容灾备份。分布式部署，计算单元、服务器、机柜三重防护，提高重要数据基础设施保障。用户集群独立部署，支持 VPC 隔离，数据访问安全多重保障。

应用场景
经营分析决策

海量日志分析

用户行为实时洞察
在金融、零售等领域，需要对销售、资产、供应链等业务数据进行汇总分析，以便通过数据掌握公司经营情况，提高决策精准度及效率。
通过同步或 ETL 工具将分散在 CDB、Oracle、PostgreSQL 中的数据导入到 Snova 中，利用其对多源异构数据的分析能力，辅助业务决策。


客户案例
安心保险
安心保险
互联网保险
腾讯云 Snova 数据仓库为安心保险提供了海量数据存储，并提供高性能查询能力助力挖掘数据价值。


萌蛋互动
萌蛋互动
游戏研发与运营
腾讯云 Snova 数据仓库支持了萌蛋海外游戏运营数据分析需求，使用户国内外都可使用腾讯云，降低了运维及采购成本。


微众银行
微众银行


Snova 数据仓库（下文简称 Snova）为您提供简单、快速、经济高效的 PB 级云端数据仓库解决方案。Snova 兼容 Greenplum 开源数据仓库，是一种基于 MPP（大规模并行处理）架构的数仓服务。借助于 Snova，您可以使用丰富的 PostgreSQL 开源生态工具，实现对 Snova 中海量数据的即席查询分析、ETL 处理及可视化探索；还可以借助 Snova 云端数据无缝集成特性，轻松分析位于 COS、TencentDB、ES 等数据引擎上的 PB 级数据。

Snova 以集群为基本使用单位，一个用户可以拥有多个集群，一个集群通常由2个 master 节点和不少于2个的计算节点组成。单集群随着计算节点的增加，容量和性能将线性提升。
Snova 按提供计算和存储能力的节点规格和数量进行收费，包含按量计费和包月计费两种方式。
功能
Snova 为您提供简单、快速、经济高效的 PB 级云端数据仓库解决方案。

操作简单
使用 Snova 数据仓库服务，您能够快速在云端搭建 TB 级-PB 级数据仓库，无需关注集群的管理以及繁重的运维工作。通过在控制台的操作，即可实现集群管理、监控维护等工作。Snova 支持 ANSI SQL 2008 标准，使用标准 SQL 即可对数仓中的数据以及 COS 中的数据进行分析。

弹性扩容
使用 Snova 云控制台或通过调用云 API，可对 Snova 数据仓库的节点进行扩容，提升分析能力，以应对业务增长等场景。 Snova 对节点对扩容，会提升包括 CPU、内存、存储空间的能力，并实施数据倾斜等策略，以保证新扩节点的快速使用。

数据传输
Snova 支持 COS 云存储，可对 COS 中数据直接进行分析。对云上产品如 CDB、CKafka、流计算等产品中的数据支持直接高速导入。Snova 兼容业界 PostgreSQL 生态，可使用业界的工具或方案实现数据的传输。

高性能
Snova 基于分布式大规模并行处理 MPP 框架，可线性扩展存储及计算能力。支持行列混合存储，可按业务需求选择最佳存储方案。通过对硬件、软件、算法等多维度进行加速，优化查询效率。

安全性
Snova 中节点会自动配备一份备份，以此实现故障转移以及容灾备份。同时提供了机柜、服务器、计算单元的三重防护，提高基础设施的安全性。对每个用户的集群都支持 VPC 隔离，保障数据的访问安全。



文档中心  Snova 数据仓库  快速入门
快速入门
最近更新时间：2018-12-13 20:01:47

 编辑   查看pdf
在这篇文章中：
一. 创建集群
二. 连接数据库
三. 导入数据
四. 分析数据
使用 Snova 数据仓库，您需要完成以下操作：

一. 创建集群
登录 Snova 数据仓库 创建集群。
在创建集群之前，需要明确数据量，数据所在地域，以及访问集群的网络环境。
目前只支持 VPC 网络，因此在创建集群之前需要创建好访问集群的 VPC 网络及其子网。

二. 连接数据库
创建完集群之后，在之前配置好的子网下申请一台 CVM 用于访问集群。然后在 CVM 上通过 psql 连接数据库，如果没有安装客户端，可通过以下命令安装 PostgreSQL 的客户端程序。

 yum install -y postgresql.x86_64
Snova 完全兼容 PostgreSQL 8.3.23 协议。使用 psql 连接数据库的基本语法如下：

 psql  -h 10.0.0.3 -p 5436 -d postgres -U testuser
其中 postgres 是 Snova 默认的数据库，testuser 是创建数据库的时候需要用户输入的管理员帐号，5436是数据库默认的端口号，10.0.0.3 是创建完数据库后返回的 vip，该 vip 可以在控制台查询。

三. 导入数据
使用 INSERT 导入数据。
您可以通过 INSERT 语句直接向 Snova 写入数据，适用于数据量较小的场景。

使用客户端工具 psql 连接 Snova，并使用标准 INSERT 语法写入数据。
通过 PostgreSQL JDBC 驱动书写应用程序向 Snova 写入数据。
使用 \COPY 命令导入数据。
您可以使用 \COPY 命令将客户端所在主机上的文件导入到 Snova 中，语法可以参见 PostgreSQL 相关 \COPY 语法。

从 COS 外表中导入数据。
COS 外表语法详见 导入外部数据，在创建一个可读的 COS 外表后，可以使用如下语法将 COS 外表的数据导入到一张结构相同的内表中。

 INSERT INTO cos_local_tbl SELECT * FROM cos_tbl
从公有云其它环境导入数据详见 使用外表。

四. 分析数据
在 Snova 中，语法完全兼容 Greenplum Database 5.x 语法，您可以参考其语法进行数据分析。

前提条件
使用管理员用户或者由其创建的其他用户连接到数据库。
创建了相应的数据库以及数据库表，例如 testdb 与 testtable。
向数据库表中插入了数据，具体插入数据方法参见 插入数据。
简单的 SELECT 语句
 SELECT col1,col2,col3 FROM testtable WHERE col1 = val1 AND col2 = val2;
使用上述语句可以获取数据库表 testtable 中 col1 的值为 val1 并且 col2 的值为 val2 的记录。更多分析语句可参见 Greenplum Database 5.x 官方文档。