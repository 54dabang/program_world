https://help.aliyun.com/document_detail/116321.html?spm=a2c4g.11186623.6.767.54676ca2ZeZ5Ow

https://www.geomesa.org/documentation/index.html

http://geoserver.org/download/

基本结构
这里讲的地图服务器软件环境，分为三部分：geoserver作为地图服务器，PostgresSQL数据库及PostGIS数据库插件，浏览器等，这三部分在一起，可以说是开源WebGIS绝配，比较适合中小项目的地图环境搭建。
如果单单是做简单的地图服务器研究，一个Geoserver就够了。

Geoserver
Geoserver是运行在浏览器端的地图服务器，用来发布地图服务，支持WMS、WFS、WPS等OGC标准服务。
Geoserver官网下载地址：http://geoserver.org/download/

PostgreSQL
PostgreSQL是开源数据库，用来承载我们用于构成地图的地理数据。虽然Geoserver支持直接将Shp数据发布成地图服务，但是在项目应用中，应尽量采用数据库形式来管理和存储地理数据。
PostgresSQL官方下载地址：https://www.postgresql.org/download/

PostGIS
PostGIS是一个PostgreSQL数据库插件，安装了PostGIS插件的pg数据库，将支持存储地理数据，支持各种空间运行操作。
PostGIS官方下载地址：http://postgis.net/install/

浏览器
发布地图服务，当然离不开浏览器。使用Geoserver作为地图服务器时，推荐使用谷歌浏览器。

除以上软件外，需要JAVA 环境支持，因为Geoserver后台采用的是JAVA开发。

搭建环境
搭建环境前，首先要了解自己的服务器系统配置，然后去各软件官网找到系统对于的版本下载。

安装步骤
1、安装Java，设置Java环境变量，注意：geoserver对Java版本有要求，安装Java前先看Geoserver官方文档中，你的Geoserver版本要求的Java版本。
2、安装geoserver
安装完geoserver后，如果你Java设置也没问题，启动geoserver服务，在浏览器中输入：http://localhost:8080/geoserver/web， 就可以来到地图服务器首页了。使用默认用户名和密码登录后，即可发布在线地图服务。
3、安装PostgreSQL。
4、安然PostGIS。
PostGIS安装后，自带了将Shp数据导入Postgres数据库的工具，可以用来向数据库导入你的GIS数据。在导入之前，先要创建一个数据库。
至此，地理服务器环境搭建完成！

geoserver可以以jar包形式部署在toacat下，非常方便，具体方法可以《基于开源软件的地图服务器环境搭建（二）》中介绍的方法。


接上一篇，Geoserver在部署时，除了前面介绍的在官网下载安装包进行安装部署之外，还有 另一种部署方法，即Tomcat + geoserver的方法部署。

软件准备
1、Tomcat
下载地址：http://tomcat.apache.org/
2、geoserver war包
geoserver官网每个发布的软件版本，一般提供三种发包，选择如图所示第三种进行下载

下载地址：http://geoserver.org/release/stable/

部署方法
1、解压下载的Tomcat包，放到适当的文件夹。
2、解压Geoserver包，包内包括3个文件夹及1给文件，如图：

3、定位到 tomcat目录下的**.\webapps**文件夹，将上面解压的Geoserver，拷贝到这个目录，如图：

这样，geoserver就可以作为一个Web应用程序，当启动Tomcat时，Geoserver服务将随之启动。

启动
1、定位到在Tomcat的 ./bin目录下,双击startup.bat文件，即可启动Tomcat服务。

2、安装服务：如果不想上面的窗口一直运行在任务栏，可以将Tomcat启动程序安装为服务。可以看到在bin目录下，有一个service.bat的文件，使用该文件可以将Tomcat启动程序安装为服务，方法如下：
1）、启动命令行，cd tomcat/bin，定位到bin目录；
2）、运行service.bat install TomcatService，安装Tomcat服务，服务名为TomcatService；
3）、进入系统服务窗口，启动TomcatService服务，并将TomcatService服务启动方式改为自动。


1.1WMS
1.1.1WMS地图服务（OpenGIS Web Map Service），将地图数据发布为WEB服务，提供网络地图图片。
1.1.2WMTS，访问已经切成瓦片分层的数据
1.2WFS要素服务（Web Feature Service）目的是提供对矢量地图的查询、编译等操作。
("矢量地图"：使用直线和曲线来描述图形)
1.3WCS地理覆盖服务（Web Coverage Service），目标是发布原始栅格数据。
("栅格数据"：就是将空间分割成有规律的网格，每一个网格称为一个单元，并在各单元上赋予相应的属性值来表示实体的一种数据形式)
1.4只浏览，不需做编辑、查询、分析的图层，比如行政区划、河流、道路图层，切片较好， 切片后显示效率高，不切片的话每次加载或图像范围发生变化都需要重新渲染地图；

1.5WMS请求规范
1.5.1GetCapabitities（返回服务级元数据）服务名服务关键字类信息，对WMS服务请求参数以及输出格式的描述，图层layer（格式为namespace：layer）的列表等
service 服务名 WMS
version 服务版本 1.0.0,1.1.0，1.1.1,1.3.0选一
request 请求名 GetCapabitities
1.5.2GetMap（获取影像）
service 服务名 WMS
version 服务版本 1.0.0,1.1.0，1.1.1,1.3.0选一
request 请求名 GetCapabitities
layers 图层名
styles 请求的风格文件名 不填使用服务端默认
srs 坐标系，常用EPSG:4326
bbox 请求的map的边界的大小
width map输出宽像素大小
height map输出高像素大小
format map图片输出格式
1.5.3GetFeatureInfo 用于以多种格式（如 HTML、XML 和纯文本）文件形式返回地图中所查询要素的属性。
1.6WFS请求规范
1.6.1GetCapabilities操作 返回描述 WFS 服务元数据的XML文档， 服务元数据描述了该 WFS服务可以提供的地理要素类型以及针对每个要素类型的操作；
1.6.2DescribeFeatureType操作 返回WFS能够提供的地理要素类型的GML应用模式描述文档；
1.6.3GetFeature操作 根据用户查询条件，从WFS中获取地理要素，用户可以设定空间和非空间查询条件；
1.6.4Transaction 操作 为事务请求提供服务。用于描述地理数据变化的操作方法， 如创建、 修改和删除地理要素的操作；
1.6.5LockFeature操作 WFS可以在一个事务处理期间锁定一个地理要素类型中的一个或多个地理要素实例， 这使 WFS具有支持可序列化事务的能力；
1.6.6GetGmlObject 操作 一个 WFS 服务可能通过追踪Xlinks 来获取客户请求所需的构成地理要素的子要素实例。
1.7WCS请求规范
1.7.1GetCapabilities操作返回描述服务和数据集的XML文档。
1.7.2GetCoverage操作是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的覆盖格式返回地理位置的值或属性。
1.7.3DescribeCoverageType操作允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。

动态出图可以使用WMS中的GetMap请求。
矢量查询可以使用WFS中的GetFeature请求。
要素编辑可以使用WFS中的Transaction请求。

2.管理平台

2.1管理平台数据部分

2.1.1工作区
工作区类似我们工作空间，概念可以类比我们进行其他开发时所配置的项目根目录，用于对某一项具体的工作进行统一的管理。对应于GeoServer所用于的web服务，也可以理解为是一个web网站的根目录。

2.1.2数据存储
数据存储用于管理GeoServer的数据存储，我们可以将其理解为为Web服务提供数据支持的“数据库”。

2.1.2.2数据配置
(1)设置数据表的字符集时应该和源数据一致，如果不知道源数据的字符集，考虑选择UTF-8
(2)本机SRS是指地图数据本身的坐标参考系统，这是由地图数据本身的属性决定的，也是不可修改的。GeoServer会自动从数据文件中读取这一信息。
相对应的Native Bounding Box则是根据本机SRS自动计算出来的边框，我们点击从数据中计算就能计算出来边框范围。
定义SRS是指我们自己想要定义显示地图数据的坐标参考系统。强制申明会让自定义SRS覆盖本机SRS。
对于国内用户来说，常用的坐标系统可以通过键入4326进行查找选择。选择确定后，通过点击“compute from nativ bounds”可以计算出在这个坐标系统下的边界。

2.1.2.3发布配置
(1)
http缓存响应头 - 如果勾选，GeoServer将不会在指定的缓存时间内请求相同tile。
(2)
Queryable - 控制图层是否可以通过WMS GetFeatureInfo请求进行查询。
(3)
Default style - 当用户没有在GetMap请求中指定样式时使用的默认样式。
Selected Styles - 用户可在GetMap中选择的样式
(4)
Default rendering buffer - GetMap / GetFeatureInfo请求中的默认缓冲大小。

2.1.3图层和图层组
图层和图层组都是用来发布和管理新图层，并可以使用组的形式来进行组织和管理。

2.1.4styles
styles是数据显示的样式，在图层发布指定默认以及可用样式

2.2管理平台服务部分

2.2.1WCS用于管理元数据信息和WCS、WFS、WMS通用的配置信息，如数据请求读写最大值等。
2.2.2WFS用于配置和管理Feature Data、服务级别以及GML输出等。
2.2.3WMS用于管理和配置栅格数据和SVG选项以及切片地图压缩和分级情况。

2.3管理平台tile cache部分
2.3.1在tilte layers中选择Seed，裁剪瓦片的级别后，在Geoserver的根目录的\geoserver\data\gwc\中会保存瓦片数据,如果没有数据，尝试将\geoserver\WEB-INF\web.xml中GEOSERVER_DATA_DIR的参数设为\geoserver\data的全路径数据目录，一般非安装版的geoserver可能出现此问题。
<context-param>
<param-name>GEOSERVER_DATA_DIR</param-name>
<param-value>D:\tomcat\apache-tomcat-8.0.23\webapps\geoserver\data</param-value>
</context-param>

2.3.2在gridset中添加各缩放等级的分片策略
（关于缓存:Geowebcache服务器拦截来至客户端的请求，判断本次请求的数据是否已经被缓存。如果请求数据已被缓存，则将这些缓存图片直接渲染至客户端；如果请求数据没有被缓存，则发送请求至WMS Server(提供网络地图服务的服务器如geoserver)，由服务器处理请求数据，并返回给Geowebcache服务器，Geowebcache服务器进过渲染及缓存数据图片后绘制到客户端。）

5.style编写部分
5.1一些简单标记的意义，详细内容请参考sld规范文档
<Name>
样式名称
<FeatureTypeStyle>
要素样式
<Rule>
规则
<ogc:Filter>
过滤器
<ogc:PropertyIsBetween>
用来定义在两个属性值之间的过滤器
<ogc:PropertyIsLessThan>
用来定义在小于某个属性值的过滤器
<ogc:PropertyIsGreaterThan>
用来定义在大于某个属性值的过滤器
<ogc:PropertyName>
属性字段名
<ogc:Literal>
属性值
<PointSymbolizer>
点标记器
<LineSymbolizer>
线标记器
<PolygonSymbolizer>
面标记器
5.2 style文件中包含中文应该把xml encoding改为"GB2312"，否则会出现问题

6.geoserver的默认为不允许跨域访问。在geoserver项目目录的web.xml中添加（在其他filter之前）
<filter>
<filter-name>CorsFilter</filter-name>
<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
</filter>
<filter-mapping>
<filter-name>CorsFilter</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping>

7.geoserver发布tif高程数据
7.1数据源预处理: 需要先将16位的tiff转换为8位tiff
7.2下载Cesium1.4.4
7.3使用Cesiume 加载GeoserverTerrainProviderkai开源插件
var terrainProvider = new Cesium.GeoserverTerrainProvider({
heightMapWidth: 65, //其他值可能出现地形变形
heightMapHeight: 65, //其他值可能出现地形变形
url: 'http://127.0.0.1:8080/geoserver/map/wms', //wms服s务地址
layerName: 'ASTGTM2_N30E100_dem', //图层
maxLevel: 20,//最大切片等级
formatImage: {format : "image/png",extension: "png"}, //建议png，使用jpeg会压缩图片导致出现地形异常
styleName: 'generic', //使用通常的栅格数据风格
waterMask: false， //是否加载水纹数据
});

8.geoserver切割tif瓦片
使用geoserver自带的切片工具会导致瓦片之间会错位
需要使用geotiles工具，在layer Preview界面以png格式打开tif图层，复制url到geotiles中进行切割
将切割的瓦片放入"gwc/图层名/"文件夹下

9.其他
使用 gdal将tif切成小块tif
安装python3.6
python -m pip install wheel
下载GDAL-2.2.4-cp36-cp36m-win_amd64.whl
python -m pip install 路径\GDAL-2.2.4-cp36-cp36m-win_amd64.whl
gdal_retile.py -v -r bilinear -levels 4 -ps 256 256 -co "TILED=YES" -co "COMPRESS=JPEG" -targetDir E:\data\tiles E:\data\map\World1.tif

10.相关有价值的参考网站
10.1GeoServer中WMS、WFS的请求规范
https://www.cnblogs.com/naaoveGIS/p/5508882.html
10.2WFS、WMS、WCS的测试用例
https://wenku.baidu.com/view/8e86554d852458fb770b5653.html
10.3Cesium请求地形数据插件使用说明
https://github.com/kaktus40/Cesium-GeoserverTerrainProvider

11.GeoWebServer目录命名规则
第一层:x x为级数
第二层:x_y x范围为 0 到 2的第一层级级数加一除以2取整的次方再减一,y相同
第三层:x_y x范围为 2的第一层级级数除以2取整加1的次方乘以第二层x 到 2的第一层级数除以2取整加2的次方乘以第二层x,y相同
第二层是一层索引，第三层存放的是实际瓦片

12.geoserver影像发布
支持geotiff，geojpg，geopng，geobmp，img，mbtiles等格式影像的发布
geotiff有单独的数据源支持
数据源WorldImager支持所有geo格式图片发布，图片和描述图片坐标系和相对地理位置的配置文件在同一个文件夹下，这个图片就是满足geo格式的图片，使用地图软件导出的geo格式图片需要检查配置文件是否正确
还可以通过安装插件支持例如img，mbtiles等格式的影像发布

13.关于mbtiles
mbtils格式文件原理：利用一个嵌入式类型数据库sqlite数据表里字段来存储图片的byte，使用时通过查询数据表就可以读取图片
mbtils资料：优点是大大减少存储量，缺点是大量的查询会拖慢服务器，较适合离线地图使用。
geoserver使用水经注生成的mbtiles导入时会报错
几乎没有案例，但是官方有导入导出mbtiles的python工具

14.MBtiles格式转换
python setup.py install安装mbutil
使用mbutil将瓦片目录转换为.mbtiles格式文件（geoserver不支持jpg格式瓦片转换的mbtiles，检测瓦片的文件头是否为png，后戳为png文件头也可能为jpg）
生成mbtiles文件后发布即访问

===============================================================================================


时空数据库
时空数据库能够存储、管理包括时间序列以及空间地理位置相关的数据。传感器网络、移动互联网、射频识别、全球定位系统等设备时刻输出时间和空间数据，数据量增长非常迅速，这对存储和管理时空数据带来了挑战，传统数据库很难应对时空数据。时空数据是一种高维数据，普通的关系型数据库更适合于存储数值和字符类型数据，也缺少相关的算子。时空数据库具有时空数据模型、时空索引和时空算子，完全兼容SQL及SQL/MM标准，支持时空数据同业务数据一体化存储、无缝衔接，易于集成使用。

应用场景
更新时间：2019-04-26 14:19:44


本页目录
地图服务
方案架构
人员监护
方案架构
车辆监控
方案架构
物流配送
方案架构
轨迹分析
方案架构
地图服务
地图服务是一种非常广泛的应用，便于各类业务数据可视化和综合查询。这个场景介绍如何使用时空数据库搭建地图服务，并给出架构参考。

方案架构
map

时空数据库作为存储空间数据与空间查询引擎，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染和地图发布，前端客户端采用Leaflet或openlayers框架，同时支持PC/Android/iOS多种类型终端。地图发布的主要流程包括三步：第一步在时空数据库中导入业务数据后；第二步通过GeoServer关联数据库；第三步选择需要发布的图层，并对图层设定相应对式样。

人员监护
人员监护应用适用对儿童和老人监护，方便实时查看活动轨迹、健康指标（体温、血压、心跳等）；并设定电子围栏（特定区域，比如学校、小区、公园等），当活动人员离开特定区域时触发告警信息。

方案架构
monitor

时空数据库存储时空和指标数据，并提供空间查询功能，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染和地图发布，前端客户端采用Leaflet或openlayers框架。电子围栏服务用于判断移动目标同电子围栏的空间关系，并触发告警信息。

车辆监控
车辆监控应用适用于查看车辆当前和历史轨迹，对车辆的行驶区域做限定，当脱离特定路线后能够报警；并对车辆传感器获取一些参数（比如车速、胎压、电池电压等）做实时监测。

方案架构
auto

时空数据库作为存储轨迹及监测指标，提供空间及指标查询功能，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染、地图发布、时空数据入库，前端客户端采用Leaflet或openlayers框架。电子围栏服务用于判断移动目标同电子围栏的空间关系，并触发告警信息。电子围栏在这里起到过滤器，再地图服务器的WFS服务写入定位和传感器监测数据。

物流配送
物流配送应用适合于物流行业，提供导航规划功能，并对物流过程做全程监控。

方案架构
wuliu

时空数据库作为存储与路径规划引擎，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染、地图发布、时空数据入库，前端客户端采用Leaflet或openlayers框架。在时空数据库存储路网数据，路网数据是做导航规划的基础；在客户端选择起始点和目的地后，由时空数据库计算最佳导航路线，经客户端确认后把导航路线推送给物流终端。时空数据库充当两个角色：轨迹数据存储和导航路径计算。从物流终端获取的轨迹数据通过地图服务器WFS服务存入时空数据库

轨迹分析
轨迹分析用于计算轨迹之间的关系以及轨迹与专题地图之间的关系；轨迹分析可以用于分析道路拥堵时空特征、人员活动热点区域、异常行驶车辆等，适用业务场景非常广，比如可以用于商业选址、交通优化、公共安全等。

方案架构
traj

地图服务器（GeoServer）接收轨迹输入，轨迹和其它监测数据最终存入时空数据库；轨迹关联计算用于轨迹聚合计算，识别轨迹之间的关系（如轨迹聚类）和轨迹与地图之间的关系（如以道路作为专题图，车辆轨迹的密集程度反应道路的拥堵情况）。


======================

应用场景

地图服务是一种非常广泛的应用，便于各类业务数据可视化和综合查询。这个场景介绍如何使用时空数据库搭建地图服务，并给出架构参考。

方案架构
map

时空数据库作为存储空间数据与空间查询引擎，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染和地图发布，前端客户端采用Leaflet或openlayers框架，同时支持PC/Android/iOS多种类型终端。地图发布的主要流程包括三步：第一步在时空数据库中导入业务数据后；第二步通过GeoServer关联数据库；第三步选择需要发布的图层，并对图层设定相应对式样。

人员监护
人员监护应用适用对儿童和老人监护，方便实时查看活动轨迹、健康指标（体温、血压、心跳等）；并设定电子围栏（特定区域，比如学校、小区、公园等），当活动人员离开特定区域时触发告警信息。

方案架构
monitor

时空数据库存储时空和指标数据，并提供空间查询功能，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染和地图发布，前端客户端采用Leaflet或openlayers框架。电子围栏服务用于判断移动目标同电子围栏的空间关系，并触发告警信息。

车辆监控
车辆监控应用适用于查看车辆当前和历史轨迹，对车辆的行驶区域做限定，当脱离特定路线后能够报警；并对车辆传感器获取一些参数（比如车速、胎压、电池电压等）做实时监测。

方案架构
auto

时空数据库作为存储轨迹及监测指标，提供空间及指标查询功能，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染、地图发布、时空数据入库，前端客户端采用Leaflet或openlayers框架。电子围栏服务用于判断移动目标同电子围栏的空间关系，并触发告警信息。电子围栏在这里起到过滤器，再地图服务器的WFS服务写入定位和传感器监测数据。

物流配送
物流配送应用适合于物流行业，提供导航规划功能，并对物流过程做全程监控。

方案架构
wuliu

时空数据库作为存储与路径规划引擎，提供后端支持。GeoServer作为地图服务引擎用于空间数据渲染、地图发布、时空数据入库，前端客户端采用Leaflet或openlayers框架。在时空数据库存储路网数据，路网数据是做导航规划的基础；在客户端选择起始点和目的地后，由时空数据库计算最佳导航路线，经客户端确认后把导航路线推送给物流终端。时空数据库充当两个角色：轨迹数据存储和导航路径计算。从物流终端获取的轨迹数据通过地图服务器WFS服务存入时空数据库

轨迹分析
轨迹分析用于计算轨迹之间的关系以及轨迹与专题地图之间的关系；轨迹分析可以用于分析道路拥堵时空特征、人员活动热点区域、异常行驶车辆等，适用业务场景非常广，比如可以用于商业选址、交通优化、公共安全等。

方案架构
traj

地图服务器（GeoServer）接收轨迹输入，轨迹和其它监测数据最终存入时空数据库；轨迹关联计算用于轨迹聚合计算，识别轨迹之间的关系（如轨迹聚类）和轨迹与地图之间的关系（如以道路作为专题图，车辆轨迹的密集程度反应道路的拥堵情况）。

=============
空间对象构造函数
更新时间：2019-04-27 17:05:53


本页目录
ST_BdPolyFromText
描述
函数声明
ST_BdMPolyFromText
描述
函数声明
ST_Box2dFromGeoHash
描述
函数声明
使用示例
ST_GeogFromText
描述
函数声明
使用示例
ST_GeographyFromText
描述
函数声明
使用示例
ST_GeogFromWKB
描述
函数声明
使用示例
ST_GeomFromTWKB
描述
函数声明
使用示例
ST_GeomCollFromText
描述
函数声明
使用示例
ST_GeomFromEWKB
描述
函数声明
使用示例
ST_GeomFromEWKT
描述
函数声明
使用示例
ST_GeometryFromText
描述
函数声明
使用示例
ST_GeomFromGeoHash
描述
函数声明
使用示例
ST_GeomFromGML
描述
函数声明
使用示例
ST_GeomFromGeoJSON
描述
函数声明
使用示例
ST_GeomFromKML
描述
函数声明
使用示例
ST_GMLToSQL
描述
函数声明
使用示例
ST_GeomFromText
描述
函数声明
使用示例
ST_GeomFromWKB
描述
函数声明
使用示例
ST_LineFromEncodedPolyline
描述
函数声明
使用示例
ST_LineFromMultiPoint
描述
函数声明
使用示例
ST_LineFromText
描述
函数声明
使用示例
ST_LineFromWKB
描述
函数声明
使用示例
ST_LinestringFromWKB
描述
函数声明
使用示例
ST_MakeBox2D
描述
函数声明
使用示例
ST_3DMakeBox
描述
函数声明
使用示例
ST_MakeLine
描述
函数声明
使用示例
ST_MakeEnvelope
描述
函数声明
使用示例
ST_MakePolygon
描述
函数声明
使用示例
ST_MakePoint
描述
函数声明
使用示例
ST_MakePointM
描述
函数声明
使用示例
ST_MLineFromText
描述
函数声明
使用示例
ST_MPointFromText
描述
函数声明
使用示例
ST_MPolyFromText
描述
函数声明
使用示例
ST_Point
描述
函数声明
使用示例
ST_PointFromGeoHash
描述
函数声明
使用示例
ST_PointFromText
描述
函数声明
使用示例
ST_PointFromWKB
描述
函数声明
使用示例
ST_Polygon
描述
函数声明
使用示例
ST_PolygonFromText
描述
函数声明
使用示例
ST_WKBToSQL
描述
函数声明
使用示例
ST_WKTToSQL
描述
函数声明
使用示例
ST_BdPolyFromText
描述
基于给定的由WKT（Well-Known Text） MultiLineString表示的一条或多条封闭曲线为基础来构造一个Polygon。

函数声明
geometry ST_BdPolyFromText(text  WKT, integer  srid);
ST_BdMPolyFromText
描述
基于给定的由WKT（Well-Known Text） MultiLineString表示的一条或多条封闭曲线为基础来构造一个MultiPolygon。

函数声明
geometry ST_BdMPolyFromText(text  WKT, integer  srid);
ST_Box2dFromGeoHash
描述
返回与给定GeoHash字符串对应的Box2D对象。

函数声明
box2d ST_Box2dFromGeoHash(text  geohash, integer  precision=full_precision_of_geohash);
使用示例
SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0');
                st_geomfromgeohash
--------------------------------------------------
 BOX(-115.172816 36.114646,-115.172816 36.114646)
SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 0);
 st_box2dfromgeohash
----------------------
 BOX(-180 -90,180 90)
 SELECT ST_Box2dFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10);
                            st_box2dfromgeohash
---------------------------------------------------------------------------
 BOX(-115.17282128334 36.1146408319473,-115.172810554504 36.1146461963654)
ST_GeogFromText
描述
返回与给定的WKT（Well-Known Text）或扩展WKT表示法相对应的地理对象。

函数声明
geography ST_GeogFromText(text  EWKT);
使用示例
--- converting lon lat coords to geography
ALTER TABLE sometable ADD COLUMN geog geography(POINT,4326);
UPDATE sometable SET geog = ST_GeogFromText('SRID=4326;POINT(' || lon || ' ' || lat || ')');
--- specify a geography point using EPSG:4267, NAD27
SELECT ST_AsEWKT(ST_GeogFromText('SRID=4267;POINT(-77.0092 38.889588)'));
              st_asewkt
-------------------------------------
 SRID=4267;POINT(-77.0092 38.889588)
ST_GeographyFromText
描述
返回与给定的WKT或扩展WKT表示法相对应的地理对象。

函数声明
geography ST_GeographyFromText(text  EWKT);
使用示例
SELECT ST_AsEWKT(ST_GeographyFromText('SRID=4267;POINT(-77.0092 38.889588)'));
              st_asewkt
-------------------------------------
 SRID=4267;POINT(-77.0092 38.889588)
ST_GeogFromWKB
描述
返回与给定的Well-Known Binary (WKB)或extended Well Known Binary (EWKB)表示法相对应的地理对象。

函数声明
geography ST_GeogFromWKB(bytea  wkb);
使用示例
--Although bytea rep contains single \, these need to be escaped when inserting into a table
SELECT ST_AsText(
ST_GeogFromWKB(E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@')
);
                      st_astext
------------------------------------------------------
 LINESTRING(-113.98 39.198,-113.981 39.195)
(1 row)
ST_GeomFromTWKB
描述
返回一个与给定的TWKB（Tiny Well-Known Binary）表示法相对应的几何对象。

函数声明
geometry ST_GeomFromTWKB(bytea  twkb);
使用示例
SELECT ST_AsText(ST_GeomFromTWKB(ST_AsTWKB('LINESTRING(126 34, 127 35)'::geometry)));
         st_astext
-----------------------------
 LINESTRING(126 34, 127 35)
(1 row)
SELECT ST_AsEWKT(
  ST_GeomFromTWKB(E'\\x620002f7f40dbce4040105')
);
                      st_asewkt
------------------------------------------------------
LINESTRING(-113.98 39.198,-113.981 39.195)
(1 row)
ST_GeomCollFromText
描述
以给定的WKT表示法和SRID构造相应的几何对象集合，如果未指定SRID，则其默认值为0。

函数声明
geometry ST_GeomCollFromText(text  WKT, integer  srid);
geometry ST_GeomCollFromText(text  WKT);
使用示例
SELECT ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(1 2),LINESTRING(1 2, 3 4))');
ST_GeomFromEWKB
描述
返回一个与给定的Extended Well-Known Binary(EWKB)表示法相对应的几何对象。

函数声明
geometry ST_GeomFromEWKB(bytea  EWKB);
使用示例
SELECT ST_GeomFromEWKB(E'\\001\\002\\000\\000 \\255\\020\\000\\000\\003\\000\\000\\000\\344J=
\\013B\\312Q\\300n\\303(\\010\\036!E@''\\277E''K
\\312Q\\300\\366{b\\235*!E@\\225|\\354.P\\312Q
\\300p\\231\\323e1!E@');
ST_GeomFromEWKT
描述
返回一个与给定的Extended Well-Known Text(EWKT)表示法相对应的几何对象。

函数声明
geometry ST_GeomFromEWKT(text  EWKT);
使用示例
SELECT ST_GeomFromEWKT('SRID=4269;LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');
SELECT ST_GeomFromEWKT('SRID=4269;MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');
SELECT ST_GeomFromEWKT('SRID=4269;POINT(-71.064544 42.28787)');
SELECT ST_GeomFromEWKT('SRID=4269;POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');
SELECT ST_GeomFromEWKT('SRID=4269;MULTIPOLYGON(((-71.1031880899493 42.3152774590236,
-71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307,
-71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248,
-71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797,
-71.103113945163 42.3142739188902,-71.10324876416 42.31402489987,
-71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772,
-71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029,
-71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058,
-71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118,
-71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681,
-71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055,
-71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936,
-71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569,
-71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809,
-71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048,
-71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859,
-71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338,
-71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985,
-71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544,
-71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219,
-71.1031880899493 42.3152774590236)),
((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857,
-71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))');
ST_GeometryFromText
描述
返回一个与给定的Well-Known Text(WKT)表示法相对应的几何对象。与ST_GeomFromText 函数相同。

函数声明
geometry ST_GeometryFromText(text  WKT);
geometry ST_GeometryFromText(text  WKT, integer  srid);
使用示例
参见ST_GeomFromText；
ST_GeomFromGeoHash
描述
返回一个与给定的GeoHash字符串相对应的几何对象。

函数声明
geometry ST_GeomFromGeoHash(text  geohash, integer  precision=full_precision_of_geohash);
使用示例
SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));
                                                        st_astext
--------------------------------------------------------------------------------------------------------------------------
 POLYGON((-115.172816 36.114646,-115.172816 36.114646,-115.172816 36.114646,-115.172816 36.114646,-115.172816 36.114646))
SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));
                                                          st_astext
------------------------------------------------------------------------------------------------------------------------------
 POLYGON((-115.3125 36.03515625,-115.3125 36.2109375,-114.9609375 36.2109375,-114.9609375 36.03515625,-115.3125 36.03515625))
SELECT ST_AsText(ST_GeomFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));
                                                                                       st_astext
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 POLYGON((-115.17282128334 36.1146408319473,-115.17282128334 36.1146461963654,-115.172810554504 36.1146461963654,-115.172810554504 36.1146408319473,-115.17282128334 36.1146408319473))
ST_GeomFromGML
描述
接受一个以GML表示的几何对象字符串为输入，输出一个几何对象。

函数声明
geometry ST_GeomFromGML(text  geomgml);
geometry ST_GeomFromGML(text  geomgml, integer  srid);
使用示例
SELECT ST_GeomFromGML('
        <gml:LineString srsName="EPSG:4269">
            <gml:coordinates>
                -71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932
            </gml:coordinates>
        </gml:LineString>');
ST_GeomFromGeoJSON
描述
接受一个以GeoJSON表示的几何对象为输入，输出一个几何对象。

函数声明
geometry ST_GeomFromGeoJSON(text  geomjson);
geometry ST_GeomFromGeoJSON(json  geomjson);
geometry ST_GeomFromGeoJSON(jsonb  geomjson);
使用示例
SELECT ST_AsText(ST_GeomFromGeoJSON('{"type":"Point","coordinates":[-48.23456,20.12345]}')) As wkt;
wkt
------
POINT(-48.23456 20.12345)
ST_GeomFromKML
描述
接受一个以KML表示的几何对象字符串为输入，输出一个几何对象。

函数声明
geometry ST_GeomFromKML(text  geomkml);
使用示例
SELECT ST_GeomFromKML('
        <LineString>
            <coordinates>-71.1663,42.2614
                -71.1667,42.2616</coordinates>
        </LineString>');
ST_GMLToSQL
描述
接受一个以GML表示的几何对象字符串为输入，输出一个几何对象。等同于ST_GeomFromGML。

函数声明
geometry ST_GMLToSQL(text  geomgml);
geometry ST_GMLToSQL(text  geomgml, integer  srid);
使用示例
None
ST_GeomFromText
描述
接受一个以Well-Known Text(WKT)表示的几何对象字符串为输入，输出一个几何对象。

函数声明
geometry ST_GeomFromText(text  WKT);
geometry ST_GeomFromText(text  WKT, integer  srid);
使用示例
SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');
SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);
SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');
SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');
SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');
SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236,
-71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307,
-71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248,
-71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797,
-71.103113945163 42.3142739188902,-71.10324876416 42.31402489987,
-71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772,
-71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029,
-71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058,
-71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118,
-71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681,
-71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055,
-71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936,
-71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569,
-71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809,
-71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048,
-71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859,
-71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338,
-71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985,
-71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544,
-71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219,
-71.1031880899493 42.3152774590236)),
((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857,
-71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);
SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');
ST_GeomFromWKB
描述
接受一个以Well-Known Binary(WKB)表示的几何对象字符串为输入，输出一个几何对象，参数SRID是可选的。

函数声明
geometry ST_GeomFromWKB(bytea  geom);
geometry ST_GeomFromWKB(bytea  geom, integer  srid);
使用示例
--Although bytea rep contains single \, these need to be escaped when inserting into a table
        -- unless standard_conforming_strings is set to on.
SELECT ST_AsEWKT(
ST_GeomFromWKB(E'\\001\\002\\000\\000\\000\\002\\000\\000\\000\\037\\205\\353Q\\270~\\\\\\300\\323Mb\\020X\\231C@\\020X9\\264\\310~\\\\\\300)\\\\\\217\\302\\365\\230C@',4326)
);
                      st_asewkt
------------------------------------------------------
 SRID=4326;LINESTRING(-113.98 39.198,-113.981 39.195)
(1 row)
SELECT
  ST_AsText(
    ST_GeomFromWKB(
      ST_AsEWKB('POINT(2 5)'::geometry)
    )
  );
 st_astext
------------
 POINT(2 5)
(1 row)
ST_LineFromEncodedPolyline
描述
从给定的Polyline的编码构造一个LineString对象。

函数声明
geometry ST_LineFromEncodedPolyline(text  polyline, integer  precision=5);
使用示例
-- Create a line string from a polyline
SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@'));
-- result --
SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)
-- Select different precision that was used for polyline encoding
SELECT ST_AsEWKT(ST_LineFromEncodedPolyline('_p~iF~ps|U_ulLnnqC_mqNvxq`@',6));
-- result --
SRID=4326;LINESTRING(-12.02 3.85,-12.095 4.07,-12.6453 4.3252)
ST_LineFromMultiPoint
描述
从一个MultiPoint几何对象构造一个LineString对象。

函数声明
geometry ST_LineFromMultiPoint(geometry  aMultiPoint);
使用示例
--Create a 3d line string from a 3d multipoint
SELECT ST_AsEWKT(ST_LineFromMultiPoint(ST_GeomFromEWKT('MULTIPOINT(1 2 3, 4 5 6, 7 8 9)')));
--result--
LINESTRING(1 2 3,4 5 6,7 8 9)
ST_LineFromText
描述
从给定的WKT表示法和SRID构造一个几何对象，如果未指定SRID，则默认值为0。

函数声明
geometry ST_LineFromText(text  WKT);
geometry ST_LineFromText(text  WKT, integer  srid);
使用示例
SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline, ST_LineFromText('POINT(1 2)') AS null_return;
aline                            | null_return
------------------------------------------------
010200000002000000000000000000F ... | t
ST_LineFromWKB
描述
从给定的WKB表示法和SRID构造一个几何对象。

函数声明
geometry ST_LineFromWKB(bytea  WKB);
geometry ST_LineFromWKB(bytea  WKB, integer  srid);
使用示例
SELECT ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))) AS aline,
        ST_LineFromWKB(ST_AsBinary(ST_GeomFromText('POINT(1 2)'))) IS NULL AS null_return;
aline                            | null_return
------------------------------------------------
010200000002000000000000000000F ... | t
ST_LinestringFromWKB
描述
从给定的WKB表示法和SRID构造一个几何对象。

函数声明
geometry ST_LinestringFromWKB(bytea  WKB);
geometry ST_LinestringFromWKB(bytea  WKB, integer  srid);
使用示例
SELECT
  ST_LineStringFromWKB(
    ST_AsBinary(ST_GeomFromText('LINESTRING(1 2, 3 4)'))
  ) AS aline,
  ST_LinestringFromWKB(
    ST_AsBinary(ST_GeomFromText('POINT(1 2)'))
  ) IS NULL AS null_return;
   aline                            | null_return
------------------------------------------------
010200000002000000000000000000F ... | t
ST_MakeBox2D
描述
从给定的左下角和右上角两个点，构造一个Box2D几何对象。

函数声明
box2d ST_MakeBox2D(geometry  pointLowLeft, geometry  pointUpRight);
使用示例
--Return all features that fall reside or partly reside in a US national atlas coordinate bounding box
--It is assumed here that the geometries are stored with SRID = 2163 (US National atlas equal area)
SELECT feature_id, feature_name, the_geom
FROM features
WHERE the_geom && ST_SetSRID(ST_MakeBox2D(ST_Point(-989502.1875, 528439.5625),
    ST_Point(-987121.375 ,529933.1875)),2163)
ST_3DMakeBox
描述
从给定的两个对角点，构造一个Box3D对象。

函数声明
box3d ST_3DMakeBox(geometry  point3DLowLeftBottom, geometry  point3DUpRightTop);
使用示例
SELECT ST_3DMakeBox(ST_MakePoint(-989502.1875, 528439.5625, 10),
    ST_MakePoint(-987121.375 ,529933.1875, 10)) As abb3d
--bb3d--
--------
BOX3D(-989502.1875 528439.5625 10,-987121.375 529933.1875 10)
ST_MakeLine
描述
从Point、MultiPoint或者Line等几何对象，构造一个LineString几何对象。

函数声明
geometry ST_MakeLine(geometry set geoms);
geometry ST_MakeLine(geometry geom1, geometry geom2);
geometry ST_MakeLine(geometry[] geoms_array);
使用示例
SELECT gps.gps_track, ST_MakeLine(gps.the_geom) As newgeom
    FROM (SELECT gps_track, gps_time, the_geom
            FROM gps_points ORDER BY gps_track, gps_time) As gps
    GROUP BY gps.gps_track;
ST_MakeEnvelope
描述
从给定的最小值和最大值构造一个Polygon。输入值必须在给定的SRID的有效范围内。

函数声明
geometry ST_MakeEnvelope(double precision xmin, double precision ymin, double precision xmax, double precision ymax, integer  srid=unknown);
使用示例
SELECT ST_AsText(ST_MakeEnvelope(10, 10, 11, 11, 4326));
st_asewkt
-----------
POLYGON((10 10, 10 11, 11 11, 11 10, 10 10))
ST_MakePolygon
描述
从给定的边界构造一个Polygon对象。输入必须是一个封闭的LineString。

函数声明
geometry ST_MakePolygon(geometry linestring);
使用示例
--2d line
SELECT ST_MakePolygon(ST_GeomFromText('LINESTRING(75.15 29.53,77 29,77.6 29.5, 75.15 29.53)'));
--If linestring is not closed
--you can add the start point to close it
SELECT ST_MakePolygon(ST_AddPoint(foo.open_line, ST_StartPoint(foo.open_line)))
FROM (
SELECT ST_GeomFromText('LINESTRING(75.15 29.53,77 29,77.6 29.5)') As open_line) As foo;
--3d closed line
SELECT ST_MakePolygon(ST_GeomFromText('LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'));
st_asewkt
-----------
POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))
--measured line --
SELECT ST_MakePolygon(ST_GeomFromText('LINESTRINGM(75.15 29.53 1,77 29 1,77.6 29.5 2, 75.15 29.53 2)'));
st_asewkt
----------
POLYGONM((75.15 29.53 1,77 29 1,77.6 29.5 2,75.15 29.53 2))
ST_MakePoint
描述
构造一个2D, 3DZ或者4D的点。

函数声明
geometry ST_MakePoint(double precision x, double precision y);
使用示例
--Return point with unknown SRID
SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);
--Return point marked as WGS 84 long lat
SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);
--Return a 3D point (e.g. has altitude)
SELECT ST_MakePoint(1, 2,1.5);
--Get z of point
SELECT ST_Z(ST_MakePoint(1, 2,1.5));
result
-------
1.5
ST_MakePointM
描述
给定x、y和m坐标值来构造一个PointM对象。

函数声明
geometry ST_MakePointM(float x, float y, float m);
使用示例
--Return EWKT representation of point with unknown SRID
SELECT ST_AsEWKT(ST_MakePointM(-71.1043443253471, 42.3150676015829, 10));
--result
                   st_asewkt
-----------------------------------------------
 POINTM(-71.1043443253471 42.3150676015829 10)
--Return EWKT representation of point with measure marked as WGS 84 long lat
SELECT ST_AsEWKT(ST_SetSRID(ST_MakePointM(-71.1043443253471, 42.3150676015829,10),4326));
                        st_asewkt
---------------------------------------------------------
SRID=4326;POINTM(-71.1043443253471 42.3150676015829 10)
--Return a 3d point (e.g. has altitude)
SELECT ST_MakePoint(1, 2,1.5);
--Get m of point
SELECT ST_M(ST_MakePointM(-71.1043443253471, 42.3150676015829,10));
result
-------
10
ST_MLineFromText
描述
从给定的WKT表示法字符串构造一个MultiLineString对象。

函数声明
geometry ST_MLineFromText(text  WKT, integer  srid);
geometry ST_MLineFromText(text  WKT);
使用示例
SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');
ST_MPointFromText
描述
从给定的WKT表示法字符串和SRID来构造一个MultiPoint几何对象，如果SRID未指定，则默认为0。

函数声明
geometry ST_MPointFromText(text  WKT, integer  srid);
geometry ST_MPointFromText(text  WKT);
使用示例
SELECT ST_MPointFromText('MULTIPOINT(1 2, 3 4)');
SELECT ST_MPointFromText('MULTIPOINT(-70.9590 42.1180, -70.9611 42.1223)', 4326);
ST_MPolyFromText
描述
从给定的WKT表示法字符串和SRID来构造一个MultiPolygon几何对象，如果SRID未指定，则默认为0。

函数声明
geometry ST_MPolyFromText(text  WKT, integer  srid);
geometry ST_MPolyFromText(text  WKT);
使用示例
SELECT ST_MPolyFromText('MULTIPOLYGON(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');
SELECt ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273,
    -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);
ST_Point
描述
以给定的坐标值构造一个Point对象，是OGC标准中ST_MakePoint的别名。

函数声明
geometry ST_Point(float  x_lon, float  y_lat);
使用示例
SELECT ST_SetSRID(ST_Point(-71.1043443253471, 42.3150676015829),4326)
ST_PointFromGeoHash
描述
从给定的GeoHash字符串中构造相应的Point对象。

函数声明
point ST_PointFromGeoHash(text  geohash, integer  precision=full_precision_of_geohash);
使用示例
SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0'));
          st_astext
------------------------------
 POINT(-115.172816 36.114646)
SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 4));
             st_astext
-----------------------------------
 POINT(-115.13671875 36.123046875)
SELECT ST_AsText(ST_PointFromGeoHash('9qqj7nmxncgyy4d0dbxqz0', 10));
                 st_astext
-------------------------------------------
 POINT(-115.172815918922 36.1146435141563)
ST_PointFromText
描述
从给定的WKT表示法字符串和SRID来构造一个Point几何对象，如果SRID未指定，则默认为0。

函数声明
geometry ST_PointFromText(text  WKT);
geometry ST_PointFromText(text  WKT, integer  srid);
使用示例
SELECT ST_PointFromText('POINT(-71.064544 42.28787)');
SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);
ST_PointFromWKB
描述
从给定的WKB表示法来构造一个Point几何对象。

函数声明
geometry ST_GeomFromWKB(bytea  geom);
geometry ST_GeomFromWKB(bytea  geom, integer  srid);
使用示例
SELECT
  ST_AsText(
    ST_PointFromWKB(
      ST_AsEWKB('POINT(2 5)'::geometry)
    )
  );
 st_astext
------------
 POINT(2 5)
(1 row)
SELECT
  ST_AsText(
    ST_PointFromWKB(
      ST_AsEWKB('LINESTRING(2 5, 2 6)'::geometry)
    )
  );
 st_astext
-----------
(1 row)
ST_Polygon
描述
从给定的LineString对象和SRID构造一个Polygon对象。

函数声明
geometry ST_Polygon(geometry  aLineString, integer  srid);
使用示例
--a 2d polygon
SELECT ST_Polygon(ST_GeomFromText('LINESTRING(75.15 29.53,77 29,77.6 29.5, 75.15 29.53)'), 4326);
--result--
POLYGON((75.15 29.53,77 29,77.6 29.5,75.15 29.53))
--a 3d polygon
SELECT ST_AsEWKT(ST_Polygon(ST_GeomFromEWKT('LINESTRING(75.15 29.53 1,77 29 1,77.6 29.5 1, 75.15 29.53 1)'), 4326));
result
------
SRID=4326;POLYGON((75.15 29.53 1,77 29 1,77.6 29.5 1,75.15 29.53 1))
ST_PolygonFromText
描述
从给定的WKT表示法字符串和SRID来构造一个Polygon几何对象，如果SRID未指定，则默认为0。

函数声明
geometry ST_PolygonFromText(text  WKT);
geometry ST_PolygonFromText(text  WKT, integer  srid);
使用示例
SELECT ST_PolygonFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');
st_polygonfromtext
------------------
010300000001000000050000006...
SELECT ST_PolygonFromText('POINT(1 2)') IS NULL as point_is_notpoly;
point_is_not_poly
----------
t
ST_WKBToSQL
描述
从给定的WKB表示法来构造一个几何对象。这是不带SRID参数的ST_GeomFromWKB函数的别名。

函数声明
geometry ST_WKBToSQL(bytea  WKB);
使用示例
参见ST_GeomFromWKB
ST_WKTToSQL
描述
从给定的Well-Known Text(WKT)表示法字符串构造一个几何对象。这是函数ST_GeomFromText的别名。

函数声明
geometry ST_WKTToSQL(text  WKT);
使用示例
参见ST_GeomFromText

=============

空间对象访问函数
更新时间：2019-04-27 17:05:53


本页目录
GeometryType
描述
函数声明
使用示例
ST_Boundary
描述
函数声明
使用示例
ST_CoordDim
描述
函数声明
使用示例
ST_Dimension
描述
函数声明
使用示例
ST_EndPoint
描述
函数声明
使用示例
ST_Envelope
描述
函数声明
使用示例
ST_BoundingDiagonal
描述
函数声明
使用示例
ST_ExteriorRing
描述
函数声明
使用示例
ST_GeometryN
描述
函数声明
使用示例
ST_GeometryType
描述
函数声明
使用示例
ST_InteriorRingN
描述
函数声明
使用示例
ST_IsPolygonCCW
描述
函数声明
使用示例
ST_IsPolygonCW
描述
函数声明
使用示例
ST_IsClosed
描述
函数声明
使用示例
ST_IsCollection
描述
函数声明
使用示例
ST_IsEmpty
描述
函数声明
使用示例
ST_IsRing
描述
函数声明
使用示例
ST_IsSimple
描述
函数声明
使用示例
ST_IsValid
描述
函数声明
使用示例
ST_IsValidReason
描述
函数声明
使用示例
ST_IsValidDetail
描述
函数声明
使用示例
ST_M
描述
函数声明
使用示例
ST_NDims
描述
函数声明
使用示例
ST_NPoints
描述
函数声明
使用示例
ST_NRings
描述
函数声明
使用示例
ST_NumGeometries
描述
函数声明
使用示例
ST_NumInteriorRings
描述
函数声明
使用示例
ST_NumInteriorRing
描述
函数声明
使用示例
ST_NumPatches
描述
函数声明
使用示例
ST_NumPoints
描述
函数声明
使用示例
ST_PatchN
描述
函数声明
使用示例
ST_PointN
描述
函数声明
使用示例
ST_Points
描述
函数声明
使用示例
ST_SRID
描述
函数声明
使用示例
ST_StartPoint
描述
函数声明
使用示例
ST_Summary
描述
函数声明
使用示例
ST_X
描述
函数声明
使用示例
ST_XMax
描述
函数声明
使用示例
ST_XMin
描述
函数声明
使用示例
ST_Y
描述
函数声明
使用示例
ST_YMax
描述
函数声明
使用示例
ST_YMin
描述
函数声明
使用示例
ST_Z
描述
函数声明
使用示例
ST_ZMax
描述
函数声明
使用示例
ST_Zmflag
描述
函数声明
使用示例
ST_ZMin
描述
函数声明
使用示例
GeometryType
描述
返回几何对象的类型名，比如: ‘LINESTRING’, ‘POLYGON’, ‘MULTIPOINT’, 等等.

函数声明
text GeometryType(geometry  geomA);
使用示例
SELECT GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
 geometrytype
--------------
 LINESTRING
ST_Boundary
描述
返回给定几何对象的边界。

函数声明
geometry ST_Boundary(geometry  geomA);
使用示例
SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));
st_astext
-----------
MULTIPOINT(1 1,-1 1)
SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));
st_astext
----------
LINESTRING(1 1,0 0,-1 1,1 1)
--Using a 3d polygon
SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('POLYGON((1 1 1,0 0 1, -1 1 1, 1 1 1))')));
st_asewkt
-----------------------------------
LINESTRING(1 1 1,0 0 1,-1 1 1,1 1 1)
--Using a 3d multilinestring
SELECT ST_AsEWKT(ST_Boundary(ST_GeomFromEWKT('MULTILINESTRING((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));
st_asewkt
----------
MULTIPOINT(-1 1 1,1 1 0.75)
ST_CoordDim
描述
返回给定几何对象的维度数。

函数声明
integer ST_CoordDim(geometry  geomA);
使用示例
SELECT ST_CoordDim('CIRCULARSTRING(1 2 3, 1 3 4, 5 6 7, 8 9 10, 11 12 13)');
---result--
    3
SELECT ST_CoordDim(ST_Point(1,2));
--result--
    2
ST_Dimension
描述
返回给定几何对象的固有维度。比如：Point是0，LineString是1，Polygon是2。

函数声明
integer ST_Dimension(geometry  g);
使用示例
SELECT ST_Dimension('GEOMETRYCOLLECTION(LINESTRING(1 1,0 0),POINT(0 0))');
ST_Dimension
-----------
1
ST_EndPoint
描述
返回给定LineString参数的最后一个点，如果参数不是一个LineString，那么返回NULL。

函数声明
boolean ST_EndPoint(geometry  g);
使用示例
postgis=# SELECT ST_AsText(ST_EndPoint('LINESTRING(1 1, 2 2, 3 3)'::geometry));
 st_astext
------------
 POINT(3 3)
(1 row)
postgis=# SELECT ST_EndPoint('POINT(1 1)'::geometry) IS NULL AS is_null;
  is_null
----------
 t
(1 row)
--3d endpoint
SELECT ST_AsEWKT(ST_EndPoint('LINESTRING(1 1 2, 1 2 3, 0 0 5)'));
  st_asewkt
--------------
 POINT(0 0 5)
(1 row)
ST_Envelope
描述
返回给定几何对象的边界框。

函数声明
geometry ST_Envelope(geometry  g1);
使用示例
SELECT ST_AsText(ST_Envelope('POINT(1 3)'::geometry));
 st_astext
------------
 POINT(1 3)
(1 row)
SELECT ST_AsText(ST_Envelope('LINESTRING(0 0, 1 3)'::geometry));
           st_astext
--------------------------------
 POLYGON((0 0,0 3,1 3,1 0,0 0))
(1 row)
SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))'::geometry));
                          st_astext
--------------------------------------------------------------
 POLYGON((0 0,0 1,1.00000011920929 1,1.00000011920929 0,0 0))
(1 row)
SELECT ST_AsText(ST_Envelope('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))'::geometry));
                          st_astext
--------------------------------------------------------------
 POLYGON((0 0,0 1,1.00000011920929 1,1.00000011920929 0,0 0))
(1 row)
SELECT Box3D(geom), Box2D(geom), ST_AsText(ST_Envelope(geom)) As envelopewkt
    FROM (SELECT 'POLYGON((0 0, 0 1000012333334.34545678, 1.0000001 1, 1.0000001 0, 0 0))'::geometry As geom) As foo;
ST_BoundingDiagonal
描述
返回一个LineString，代表给定几何对象的边界框的对角线。

函数声明
geometry ST_BoundingDiagonal(geometry  geom, boolean  fits=false);
使用示例
-- Get the minimum X in a buffer around a point
SELECT ST_X(ST_StartPoint(ST_BoundingDiagonal(
  ST_Buffer(ST_MakePoint(0,0),10)
)));
 st_x
------
  -10
ST_ExteriorRing
描述
返回一个LineString，代表给定的Polygon参数的外边界。如果参数不是一个Polygon，就返回NULL。

函数声明
geometry ST_ExteriorRing(geometry  a_polygon);
使用示例
--If you have a table of polygons
SELECT gid, ST_ExteriorRing(the_geom) AS ering
FROM sometable;
--If you have a table of MULTIPOLYGONs
--and want to return a MULTILINESTRING composed of the exterior rings of each polygon
SELECT gid, ST_Collect(ST_ExteriorRing(the_geom)) AS erings
    FROM (SELECT gid, (ST_Dump(the_geom)).geom As the_geom
            FROM sometable) As foo
GROUP BY gid;
--3d Example
SELECT ST_AsEWKT(
    ST_ExteriorRing(
    ST_GeomFromEWKT('POLYGON((0 0 1, 1 1 1, 1 2 1, 1 1 1, 0 0 1))')
    )
);
st_asewkt
---------
LINESTRING(0 0 1,1 1 1,1 2 1,1 1 1,0 0 1)
ST_GeometryN
描述
如果输入参数是：GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE，(MULTI)POLYGON 或 POLYHEDRALSURFACE，返回其给定的第n个几何对象（序号编码从1开始）。其它情况返回NULL。

函数声明
geometry ST_GeometryN(geometry  geomA, integer  n);
使用示例
--Extracting a subset of points from a 3d multipoint
SELECT n, ST_AsEWKT(ST_GeometryN(the_geom, n)) As geomewkt
FROM (
VALUES (ST_GeomFromEWKT('MULTIPOINT(1 2 7, 3 4 7, 5 6 7, 8 9 10)') ),
( ST_GeomFromEWKT('MULTICURVE(CIRCULARSTRING(2.5 2.5,4.5 2.5, 3.5 3.5), (10 11, 12 11))') )
    )As foo(the_geom)
    CROSS JOIN generate_series(1,100) n
WHERE n <= ST_NumGeometries(the_geom);
 n |               geomewkt
---+-----------------------------------------
 1 | POINT(1 2 7)
 2 | POINT(3 4 7)
 3 | POINT(5 6 7)
 4 | POINT(8 9 10)
 1 | CIRCULARSTRING(2.5 2.5,4.5 2.5,3.5 3.5)
 2 | LINESTRING(10 11,12 11)
--Extracting all geometries (useful when you want to assign an id)
SELECT gid, n, ST_GeometryN(the_geom, n)
FROM sometable CROSS JOIN generate_series(1,100) n
WHERE n <= ST_NumGeometries(the_geom);
ST_GeometryType
描述
返回给定几何对象的类型。

函数声明
text ST_GeometryType(geometry  g1);
使用示例
SELECT ST_GeometryType(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
 st_geometrytype
-----------------
 ST_LineString
ST_InteriorRingN
描述
返回一个LineString代表输入Polygon参数的第n条内部边界圈（从1开始计数）。如果输入参数不是一个Polygon或者n超出了范围，则返回NULL。

函数声明
geometry ST_InteriorRingN(geometry  a_polygon, integer  n);
使用示例
SELECT ST_AsText(ST_InteriorRingN(the_geom, 1)) As the_geom
FROM (SELECT ST_BuildArea(
        ST_Collect(ST_Buffer(ST_Point(1,2), 20,3),
            ST_Buffer(ST_Point(1, 2), 10,3))) As the_geom
        )  as foo；
                                          the_geom
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
 LINESTRING(11 2,9.66025403784436 7.00000000000005,5.99999999999995 10.6602540378444,0.999999999999954 12,-4.00000000000003 10.6
602540378444,-7.66025403784441 6.99999999999997,-9 1.99999999999997,-7.66025403784437 -3.00000000000002,-3.99999999999998 -6.660
2540378444,1.00000000000001 -8,6.00000000000001 -6.66025403784438,9.66025403784439 -3,11 2)
ST_IsPolygonCCW
描述
如果输入Polygon参数的所有外边界都是逆时针的，所有内边界都是顺时针的，则返回true。

函数声明
boolean ST_IsPolygonCCW(geometry geom);
使用示例
None
ST_IsPolygonCW
描述
如果输入Polygon参数的所有外边界都是顺时针的，所有内边界都是逆时针的，则返回true。

函数声明
boolean ST_IsPolygonCW(geometry geom);
使用示例
None
ST_IsClosed
描述
如果输入几何对象是封闭的，则返回true。

函数声明
boolean ST_IsClosed(geometry  g);
使用示例
postgis=# SELECT ST_IsClosed('LINESTRING(0 0, 1 1)'::geometry);
 st_isclosed
-------------
 f
(1 row)
postgis=# SELECT ST_IsClosed('LINESTRING(0 0, 0 1, 1 1, 0 0)'::geometry);
 st_isclosed
-------------
 t
(1 row)
postgis=# SELECT ST_IsClosed('MULTILINESTRING((0 0, 0 1, 1 1, 0 0),(0 0, 1 1))'::geometry);
 st_isclosed
-------------
 f
(1 row)
postgis=# SELECT ST_IsClosed('POINT(0 0)'::geometry);
 st_isclosed
-------------
 t
(1 row)
postgis=# SELECT ST_IsClosed('MULTIPOINT((0 0), (1 1))'::geometry);
 st_isclosed
-------------
 t
(1 row)
ST_IsCollection
描述
如果输入参数是如下类型时，返回true：

GEOMETRYCOLLECTION
MULTI{POINT,POLYGON,LINESTRING,CURVE,SURFACE}
COMPOUNDCURVE
函数声明
boolean ST_IsCollection(geometry  g);
使用示例
postgis=# SELECT ST_IsCollection('LINESTRING(0 0, 1 1)'::geometry);
 st_iscollection
-------------
 f
(1 row)
postgis=# SELECT ST_IsCollection('MULTIPOINT EMPTY'::geometry);
 st_iscollection
-------------
 t
(1 row)
postgis=# SELECT ST_IsCollection('MULTIPOINT((0 0))'::geometry);
 st_iscollection
-------------
 t
(1 row)
postgis=# SELECT ST_IsCollection('MULTIPOINT((0 0), (42 42))'::geometry);
 st_iscollection
-------------
 t
(1 row)
postgis=# SELECT ST_IsCollection('GEOMETRYCOLLECTION(POINT(0 0))'::geometry);
 st_iscollection
-------------
 t
(1 row)
ST_IsEmpty
描述
如果输入参数是一个空的GeometryCollection、Polygon或Point等，返回true。

函数声明
boolean ST_IsEmpty(geometry  geomA);
使用示例
SELECT ST_IsEmpty(ST_GeomFromText('GEOMETRYCOLLECTION EMPTY'));
 st_isempty
------------
 t
(1 row)
 SELECT ST_IsEmpty(ST_GeomFromText('POLYGON EMPTY'));
 st_isempty
------------
 t
(1 row)
SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));
 st_isempty
------------
 f
(1 row)
 SELECT ST_IsEmpty(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))')) = false;
 ?column?
----------
 t
(1 row)
 SELECT ST_IsEmpty(ST_GeomFromText('CIRCULARSTRING EMPTY'));
  st_isempty
------------
 t
(1 row)
ST_IsRing
描述
当输入几何对象的判定条件ST_IsClosed为true而且ST_IsSimple也为true时，本函数返回true。

函数声明
boolean ST_IsRing(geometry  g);
使用示例
SELECT ST_IsRing(the_geom), ST_IsClosed(the_geom), ST_IsSimple(the_geom)
FROM (SELECT 'LINESTRING(0 0, 0 1, 1 1, 1 0, 0 0)'::geometry AS the_geom) AS foo;
 st_isring | st_isclosed | st_issimple
-----------+-------------+-------------
 t         | t           | t
(1 row)
SELECT ST_IsRing(the_geom), ST_IsClosed(the_geom), ST_IsSimple(the_geom)
FROM (SELECT 'LINESTRING(0 0, 0 1, 1 0, 1 1, 0 0)'::geometry AS the_geom) AS foo;
 st_isring | st_isclosed | st_issimple
-----------+-------------+-------------
 f         | t           | f
(1 row)
ST_IsSimple
描述
当输入参数是一个没有自相交点的简单几何对象时，返回true。Simple的准确定义请参考OGC标准文档。

函数声明
boolean ST_IsSimple(geometry  geomA);
使用示例
 SELECT ST_IsSimple(ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))'));
 st_issimple
-------------
 t
(1 row)
 SELECT ST_IsSimple(ST_GeomFromText('LINESTRING(1 1,2 2,2 3.5,1 3,1 2,2 1)'));
 st_issimple
-------------
 f
(1 row)
ST_IsValid
描述
判断输入参数是否满足OGC标准中的Valid判定条件。Valid的判定标准请参考OGC标准文档。

函数声明
boolean ST_IsValid(geometry  g);
boolean ST_IsValid(geometry  g, integer  flags);
使用示例
SELECT ST_IsValid(ST_GeomFromText('LINESTRING(0 0, 1 1)')) As good_line,
    ST_IsValid(ST_GeomFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) As bad_poly
--results
NOTICE:  Self-intersection at or near point 0 0
 good_line | bad_poly
-----------+----------
 t         | f
ST_IsValidReason
描述
返回一段文本描述输入参数是否为Valid对象，如果不是，则输出原因。

函数声明
text ST_IsValidReason(geometry  geomA);
text ST_IsValidReason(geometry  geomA, integer  flags);
使用示例
--First 3 Rejects from a successful quintuplet experiment
SELECT gid, ST_IsValidReason(the_geom) as validity_info
FROM
(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), ST_Accum(f.line)) As the_geom, gid
FROM (SELECT ST_Buffer(ST_MakePoint(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid
    FROM generate_series(-4,6) x1
    CROSS JOIN generate_series(2,5) y1
    CROSS JOIN generate_series(1,8) z1
    WHERE x1 > y1*0.5 AND z1 < x1*y1) As e
    INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_MakePoint(x1*10,y1), z1)),y1*1, z1*2) As line
    FROM generate_series(-3,6) x1
    CROSS JOIN generate_series(2,5) y1
    CROSS JOIN generate_series(1,10) z1
    WHERE x1 > y1*0.75 AND z1 < x1*y1) As f
ON (ST_Area(e.buff) > 78 AND ST_Contains(e.buff, f.line))
GROUP BY gid, e.buff) As quintuplet_experiment
WHERE ST_IsValid(the_geom) = false
ORDER BY gid
LIMIT 3;
 gid  |      validity_info
------+--------------------------
 5330 | Self-intersection [32 5]
 5340 | Self-intersection [42 5]
 5350 | Self-intersection [52 5]
 --simple example
SELECT ST_IsValidReason('LINESTRING(220227 150406,2220227 150407,222020 150410)');
 st_isvalidreason
------------------
 Valid Geometry
ST_IsValidDetail
描述
返回关于传入几何对象是否为Valid的详细的信息，如果不是，则输出不是的原因，及其所在位置。

函数声明
valid_detail ST_IsValidDetail(geometry  geom);
valid_detail ST_IsValidDetail(geometry  geom, integer  flags);
使用示例
--First 3 Rejects from a successful quintuplet experiment
SELECT gid, reason(ST_IsValidDetail(the_geom)), ST_AsText(location(ST_IsValidDetail(the_geom))) as location
FROM
(SELECT ST_MakePolygon(ST_ExteriorRing(e.buff), ST_Accum(f.line)) As the_geom, gid
FROM (SELECT ST_Buffer(ST_MakePoint(x1*10,y1), z1) As buff, x1*10 + y1*100 + z1*1000 As gid
    FROM generate_series(-4,6) x1
    CROSS JOIN generate_series(2,5) y1
    CROSS JOIN generate_series(1,8) z1
    WHERE x1 > y1*0.5 AND z1 < x1*y1) As e
    INNER JOIN (SELECT ST_Translate(ST_ExteriorRing(ST_Buffer(ST_MakePoint(x1*10,y1), z1)),y1*1, z1*2) As line
    FROM generate_series(-3,6) x1
    CROSS JOIN generate_series(2,5) y1
    CROSS JOIN generate_series(1,10) z1
    WHERE x1 > y1*0.75 AND z1 < x1*y1) As f
ON (ST_Area(e.buff) > 78 AND ST_Contains(e.buff, f.line))
GROUP BY gid, e.buff) As quintuplet_experiment
WHERE ST_IsValid(the_geom) = false
ORDER BY gid
LIMIT 3;
 gid  |      reason       |  location
------+-------------------+-------------
 5330 | Self-intersection | POINT(32 5)
 5340 | Self-intersection | POINT(42 5)
 5350 | Self-intersection | POINT(52 5)
 --simple example
SELECT * FROM ST_IsValidDetail('LINESTRING(220227 150406,2220227 150407,222020 150410)');
 valid | reason | location
-------+--------+----------
 t     |        |
ST_M
描述
返回传入点的M坐标值。传入参数必须是一个坐标点。

函数声明
float ST_M(geometry  a_point);
使用示例
SELECT ST_M(ST_GeomFromEWKT('POINT(1 2 3 4)'));
 st_m
------
    4
(1 row)
ST_NDims
描述
返回传入几何对象的坐标维度值。

函数声明
integer ST_NDims(geometry  g1);
使用示例
SELECT ST_NDims(ST_GeomFromText('POINT(1 1)')) As d2point,
    ST_NDims(ST_GeomFromEWKT('POINT(1 1 2)')) As d3point,
    ST_NDims(ST_GeomFromEWKT('POINTM(1 1 0.5)')) As d2pointm;
     d2point | d3point | d2pointm
---------+---------+----------
       2 |       3 |        3
ST_NPoints
描述
返回一个几何对象中顶点的个数。

函数声明
integer ST_NPoints(geometry  g1);
使用示例
SELECT ST_NPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
--result
4
--Polygon in 3D space
SELECT ST_NPoints(ST_GeomFromEWKT('LINESTRING(77.29 29.07 1,77.42 29.26 0,77.27 29.31 -1,77.29 29.07 3)'))
--result
4
ST_NRings
描述
如果输入对象是一个Polygon或MultiPolygon，返回其中环的个数。

函数声明
integer ST_NRings(geometry  geomA);
使用示例
SELECT ST_NRings(the_geom) As Nrings, ST_NumInteriorRings(the_geom) As ninterrings
                    FROM (SELECT ST_GeomFromText('POLYGON((1 2, 3 4, 5 6, 1 2))') As the_geom) As foo;
     nrings | ninterrings
--------+-------------
      1 |           0
(1 row)
ST_NumGeometries
描述
如果输入对象是几何集合，如：GEOMETRYCOLLECTION (或者 MULTI*)，则返回其中几何对象的个数。

函数声明
integer ST_NumGeometries(geometry  geom);
使用示例
--Prior versions would have returned NULL for this -- in 2.0.0 this returns 1
SELECT ST_NumGeometries(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
--result
1
--Geometry Collection Example - multis count as one geom in a collection
SELECT ST_NumGeometries(ST_GeomFromEWKT('GEOMETRYCOLLECTION(MULTIPOINT(-2 3 , -2 2),
LINESTRING(5 5 ,10 10),
POLYGON((-7 4.2,-7.1 5,-7.1 4.3,-7 4.2)))'));
--result
3
ST_NumInteriorRings
描述
返回输入Polygon对象的内边界环的个数。

函数声明
integer ST_NumInteriorRings(geometry  a_polygon);
使用示例
--If you have a regular polygon
SELECT gid, field1, field2, ST_NumInteriorRings(the_geom) AS numholes
FROM sometable;
--If you have multipolygons
--And you want to know the total number of interior rings in the MULTIPOLYGON
SELECT gid, field1, field2, SUM(ST_NumInteriorRings(the_geom)) AS numholes
FROM (SELECT gid, field1, field2, (ST_Dump(the_geom)).geom As the_geom
    FROM sometable) As foo
GROUP BY gid, field1,field2;
ST_NumInteriorRing
描述
同ST_NumInteriorRings。

函数声明
integer ST_NumInteriorRing(geometry  a_polygon);
使用示例
None
ST_NumPatches
描述
返回一个Polyhedral曲面的平面数。

函数声明
integer ST_NumPatches(geometry  g1);
使用示例
SELECT ST_NumPatches(ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),
        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));
 st_numpatches
---------------
             6
ST_NumPoints
描述
返回一个LineString或CircularString中包含的点的个数。

函数声明
integer ST_NumPoints(geometry  g1);
使用示例
SELECT ST_NumPoints(ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)'));
--result
4
ST_PatchN
描述
返回输入几何对象的第n个平面（从1开始编号），如果输入对象是： POLYHEDRALSURFACE, POLYHEDRALSURFACEM。其它情况下，返回NULL。

函数声明
geometry ST_PatchN(geometry  geomA, integer  n);
使用示例
--Extract the 2nd face of the polyhedral surface
SELECT ST_AsEWKT(ST_PatchN(geom, 2)) As geomewkt
FROM (
VALUES (ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
    ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),
    ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
    ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ) As foo(geom);
              geomewkt
---+-----------------------------------------
 POLYGON((0 0 0,0 1 0,1 1 0,1 0 0,0 0 0))
ST_PointN
描述
返回输入几何对象LineString或者环形LineString中的第n个点。如果n是负数，那么将从末尾向前计数。如果几何对象不是LineString，则返回NULL。

函数声明
geometry ST_PointN(geometry  a_linestring, integer  n);
使用示例
-- Extract all POINTs from a LINESTRING
SELECT ST_AsText(
   ST_PointN(
      column1,
      generate_series(1, ST_NPoints(column1))
   ))
FROM ( VALUES ('LINESTRING(0 0, 1 1, 2 2)'::geometry) ) AS foo;
 st_astext
------------
 POINT(0 0)
 POINT(1 1)
 POINT(2 2)
(3 rows)
--Example circular string
SELECT ST_AsText(ST_PointN(ST_GeomFromText('CIRCULARSTRING(1 2, 3 2, 1 2)'),2));
st_astext
----------
POINT(3 2)
SELECT st_astext(f)
FROM ST_GeometryFromtext('LINESTRING(0 0 0, 1 1 1, 2 2 2)') as g
    ,ST_PointN(g, -2) AS f -- 1 based index
st_astext
----------
"POINT Z (1 1 1)"
ST_Points
描述
返回一个MultiPoint其中包含了输入几何对象的所有的顶点。

函数声明
geometry ST_Points(geometry geom);
使用示例
SELECT ST_AsText(ST_Points('POLYGON Z ((30 10 4,10 30 5,40 40 6, 30 10))'));
--result
MULTIPOINT Z (30 10 4,10 30 5,40 40 6, 30 10 4)
ST_SRID
描述
返回给定几何对象的SRID（坐标参考系标识）。SRID的定义在系统表spatial_ref_sys中。

函数声明
integer ST_SRID(geometry  g1);
使用示例
SELECT ST_SRID(ST_GeomFromText('POINT(-71.1043 42.315)',4326));
--result
4326
ST_StartPoint
描述
返回一个LineString或环形LineString的起点，如果输入对象不是这两个类型的，则返回NULL。

函数声明
geometry ST_StartPoint(geometry  geomA);
使用示例
SELECT ST_AsText(ST_StartPoint('LINESTRING(0 1, 0 2)'::geometry));
 st_astext
------------
 POINT(0 1)
(1 row)
SELECT ST_StartPoint('POINT(0 1)'::geometry) IS NULL AS is_null;
  is_null
----------
 t
(1 row)
--3d line
SELECT ST_AsEWKT(ST_StartPoint('LINESTRING(0 1 1, 0 2 2)'::geometry));
 st_asewkt
------------
 POINT(0 1 1)
(1 row)
-- circular linestring --
SELECT ST_AsText(ST_StartPoint('CIRCULARSTRING(5 2,-3 1.999999, -2 1, -4 2, 5 2)'::geometry));
 st_astext
------------
 POINT(5 2)
ST_Summary
描述
返回输入几何对象的一段文本摘要。

函数声明
text ST_Summary(geometry  g);
text ST_Summary(geography  g);
使用示例
=# SELECT ST_Summary(ST_GeomFromText('LINESTRING(0 0, 1 1)')) as geom,
        ST_Summary(ST_GeogFromText('POLYGON((0 0, 1 1, 1 2, 1 1, 0 0))')) geog;
            geom             |          geog
-----------------------------+--------------------------
 LineString[B] with 2 points | Polygon[BGS] with 1 rings
                             | ring 0 has 5 points
                             :
(1 row)
=# SELECT ST_Summary(ST_GeogFromText('LINESTRING(0 0 1, 1 1 1)')) As geog_line,
        ST_Summary(ST_GeomFromText('SRID=4326;POLYGON((0 0 1, 1 1 2, 1 2 3, 1 1 1, 0 0 1))')) As geom_poly;
;
           geog_line             |        geom_poly
-------------------------------- +--------------------------
 LineString[ZBGS] with 2 points | Polygon[ZBS] with 1 rings
                                :    ring 0 has 5 points
                                :
(1 row)
ST_X
描述
返回一个几何坐标点的X坐标值。

函数声明
float ST_X(geometry  a_point);
使用示例
SELECT ST_X(ST_GeomFromEWKT('POINT(1 2 3 4)'));
 st_x
------
    1
(1 row)
SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));
 st_y
------
  1.5
(1 row)
ST_XMax
描述
返回输入几何对象的边界框的X坐标的最大值。

函数声明
float ST_XMax(box3d  aGeomorBox2DorBox3D);
使用示例
SELECT ST_XMax('BOX3D(1 2 3, 4 5 6)');
st_xmax
-------
4
SELECT ST_XMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));
st_xmax
-------
5
SELECT ST_XMax(CAST('BOX(-3 2, 3 4)' As box2d));
st_xmax
-------
3
--Observe THIS DOES NOT WORK because it will try to autocast the string representation to a BOX3D
SELECT ST_XMax('LINESTRING(1 3, 5 6)');
--ERROR:  BOX3D parser - doesn't start with BOX3D(
SELECT ST_XMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));
st_xmax
--------
220288.248780547
ST_XMin
描述
返回输入几何对象的边界框的X坐标的最小值。

函数声明
float ST_XMin(box3d  aGeomorBox2DorBox3D);
使用示例
SELECT ST_XMin('BOX3D(1 2 3, 4 5 6)');
st_xmin
-------
1
SELECT ST_XMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));
st_xmin
-------
1
SELECT ST_XMin(CAST('BOX(-3 2, 3 4)' As box2d));
st_xmin
-------
-3
--Observe THIS DOES NOT WORK because it will try to autocast the string representation to a BOX3D
SELECT ST_XMin('LINESTRING(1 3, 5 6)');
--ERROR:  BOX3D parser - doesn't start with BOX3D(
SELECT ST_XMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));
st_xmin
--------
220186.995121892
ST_Y
描述
返回输入坐标点的Y坐标值。

函数声明
float ST_Y(geometry  a_point);
使用示例
SELECT ST_Y(ST_GeomFromEWKT('POINT(1 2 3 4)'));
 st_y
------
    2
(1 row)
SELECT ST_Y(ST_Centroid(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)')));
 st_y
------
  1.5
(1 row)
ST_YMax
描述
返回输入几何对象的边界框的Y坐标的最大值。

函数声明
float ST_YMax(box3d  aGeomorBox2DorBox3D);
使用示例
SELECT ST_YMax('BOX3D(1 2 3, 4 5 6)');
st_ymax
-------
5
SELECT ST_YMax(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));
st_ymax
-------
6
SELECT ST_YMax(CAST('BOX(-3 2, 3 4)' As box2d));
st_ymax
-------
4
--Observe THIS DOES NOT WORK because it will try to autocast the string representation to a BOX3D
SELECT ST_YMax('LINESTRING(1 3, 5 6)');
--ERROR:  BOX3D parser - doesn't start with BOX3D(
SELECT ST_YMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));
st_ymax
--------
150506.126829327
ST_YMin
描述
返回输入几何对象的边界框的Y坐标的最小值。

函数声明
float ST_YMin(box3d  aGeomorBox2DorBox3D);
使用示例
SELECT ST_YMin('BOX3D(1 2 3, 4 5 6)');
st_ymin
-------
2
SELECT ST_YMin(ST_GeomFromText('LINESTRING(1 3 4, 5 6 7)'));
st_ymin
-------
3
SELECT ST_YMin(CAST('BOX(-3 2, 3 4)' As box2d));
st_ymin
-------
2
--Observe THIS DOES NOT WORK because it will try to autocast the string representation to a BOX3D
SELECT ST_YMin('LINESTRING(1 3, 5 6)');
--ERROR:  BOX3D parser - doesn't start with BOX3D(
SELECT ST_YMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));
st_ymin
--------
150406
ST_Z
描述
返回输入坐标点的Z坐标值。

函数声明
float ST_Z(geometry  a_point);
使用示例
SELECT ST_Z(ST_GeomFromEWKT('POINT(1 2 3 4)'));
 st_z
------
    3
(1 row)
ST_ZMax
描述
返回输入几何对象的边界框的Z坐标的最大值。

函数声明
float ST_ZMax(box3d  aGeomorBox2DorBox3D);
使用示例
SELECT ST_ZMax('BOX3D(1 2 3, 4 5 6)');
st_zmax
-------
6
SELECT ST_ZMax(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));
st_zmax
-------
7
SELECT ST_ZMax('BOX3D(-3 2 1, 3 4 1)' );
st_zmax
-------
1
--Observe THIS DOES NOT WORK because it will try to autocast the string representation to a BOX3D
SELECT ST_ZMax('LINESTRING(1 3 4, 5 6 7)');
--ERROR:  BOX3D parser - doesn't start with BOX3D(
SELECT ST_ZMax(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));
st_zmax
--------
3
ST_Zmflag
描述
返回一个用整数表示的输入几何对象的Z/M标志。数字值的含义如下: 0=2d, 1=3dm, 2=3dz, 3=4d。

函数声明
smallint ST_Zmflag(geometry  geomA);
使用示例
SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRING(1 2, 3 4)'));
 st_zmflag
-----------
         0
SELECT ST_Zmflag(ST_GeomFromEWKT('LINESTRINGM(1 2 3, 3 4 3)'));
 st_zmflag
-----------
         1
SELECT ST_Zmflag(ST_GeomFromEWKT('CIRCULARSTRING(1 2 3, 3 4 3, 5 6 3)'));
 st_zmflag
-----------
         2
SELECT ST_Zmflag(ST_GeomFromEWKT('POINT(1 2 3 4)'));
 st_zmflag
-----------
         3
ST_ZMin
描述
返回输入几何对象的边界框的Z坐标的最小值。

函数声明
float ST_ZMin(box3d  aGeomorBox2DorBox3D);
使用示例
SELECT ST_ZMin('BOX3D(1 2 3, 4 5 6)');
st_zmin
-------
3
SELECT ST_ZMin(ST_GeomFromEWKT('LINESTRING(1 3 4, 5 6 7)'));
st_zmin
-------
4
SELECT ST_ZMin('BOX3D(-3 2 1, 3 4 1)' );
st_zmin
-------
1
--Observe THIS DOES NOT WORK because it will try to autocast the string representation to a BOX3D
SELECT ST_ZMin('LINESTRING(1 3 4, 5 6 7)');
--ERROR:  BOX3D parser - doesn't start with BOX3D(
SELECT ST_ZMin(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)'));
st_zmin
--------
1

======
空间对象编辑函数
更新时间：2019-04-27 17:05:54


ST_AddPoint
描述
将一个坐标点添加到LineString之中。

函数声明
geometry ST_AddPoint(geometry linestring, geometry point);
使用示例
--guarantee all linestrings in a table are closed
--by adding the start point of each linestring to the end of the line string
--only for those that are not closed
UPDATE sometable
SET the_geom = ST_AddPoint(the_geom, ST_StartPoint(the_geom))
FROM sometable
WHERE ST_IsClosed(the_geom) = false;
--Adding point to a 3-d line
SELECT ST_AsEWKT(ST_AddPoint(ST_GeomFromEWKT('LINESTRING(0 0 1, 1 1 1)'), ST_MakePoint(1, 2, 3)));
--result
st_asewkt
----------
LINESTRING(0 0 1,1 1 1,1 2 3)
ST_Affine
描述
对一个2D或3D几何对象应用给定的仿射变换。

函数声明
geometry ST_Affine(geometry  geomA, float  a, float  b, float  c, float  d, float  e, float  f, float  g, float  h, float  i, float  xoff, float  yoff, float  zoff);
geometry ST_Affine(geometry  geomA, float  a, float  b, float  d, float  e, float  xoff, float  yoff);
使用示例
--Rotate a 3d line 180 degrees about the z axis.  Note this is long-hand for doing ST_Rotate();
 SELECT ST_AsEWKT(ST_Affine(the_geom,  cos(pi()), -sin(pi()), 0,  sin(pi()), cos(pi()), 0,  0, 0, 1,  0, 0, 0)) As using_affine,
     ST_AsEWKT(ST_Rotate(the_geom, pi())) As using_rotate
    FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As the_geom) As foo;
        using_affine         |        using_rotate
-----------------------------+-----------------------------
 LINESTRING(-1 -2 3,-1 -4 3) | LINESTRING(-1 -2 3,-1 -4 3)
(1 row)
--Rotate a 3d line 180 degrees in both the x and z axis
SELECT ST_AsEWKT(ST_Affine(the_geom, cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), -sin(pi()), 0, sin(pi()), cos(pi()), 0, 0, 0))
    FROM (SELECT ST_GeomFromEWKT('LINESTRING(1 2 3, 1 4 3)') As the_geom) As foo;
           st_asewkt
-------------------------------
 LINESTRING(-1 -2 -3,-1 -4 -3)
(1 row)
ST_Force2D
描述
强制转换输入几何对象到2D模式。

函数声明
geometry ST_Force2D(geometry  geomA);
使用示例
SELECT ST_AsEWKT(ST_Force2D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));
        st_asewkt
-------------------------------------
CIRCULARSTRING(1 1,2 3,4 5,6 7,5 6)
SELECT  ST_AsEWKT(ST_Force2D('POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))'));
                  st_asewkt
----------------------------------------------
 POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))
ST_Force3D
描述
强制转换几何对象到3D（XYZ）模式。这是ST_Force3DZ的别名。

函数声明
geometry ST_Force3D(geometry  geomA);
使用示例
--Nothing happens to an already 3D geometry
SELECT ST_AsEWKT(ST_Force3D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));
                   st_asewkt
-----------------------------------------------
 CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)
SELECT  ST_AsEWKT(ST_Force3D('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));
                         st_asewkt
--------------------------------------------------------------
 POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))
ST_Force3DZ
描述
强制转换输入几何对象到3D（XYZ）模式。

函数声明
geometry ST_Force3DZ(geometry  geomA);
使用示例
--Nothing happens to an already 3D geometry
SELECT ST_AsEWKT(ST_Force3DZ(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));
                   st_asewkt
-----------------------------------------------
 CIRCULARSTRING(1 1 2,2 3 2,4 5 2,6 7 2,5 6 2)
SELECT  ST_AsEWKT(ST_Force3DZ('POLYGON((0 0,0 5,5 0,0 0),(1 1,3 1,1 3,1 1))'));
                         st_asewkt
--------------------------------------------------------------
 POLYGON((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))
ST_Force3DM
描述
强制转换输入几何对象到3D（XYM）模式。

函数声明
geometry ST_Force3DM(geometry  geomA);
使用示例
--Nothing happens to an already 3D geometry
SELECT ST_AsEWKT(ST_Force3DM(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));
                   st_asewkt
------------------------------------------------
 CIRCULARSTRINGM(1 1 0,2 3 0,4 5 0,6 7 0,5 6 0)
SELECT  ST_AsEWKT(ST_Force3DM('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));
                          st_asewkt
---------------------------------------------------------------
 POLYGONM((0 0 0,0 5 0,5 0 0,0 0 0),(1 1 0,3 1 0,1 3 0,1 1 0))
ST_Force4D
描述
强制转换输入几何对象到4D（XYZM）模式。

函数声明
geometry ST_Force4D(geometry  geomA);
使用示例
--Nothing happens to an already 3D geometry
SELECT ST_AsEWKT(ST_Force4D(ST_GeomFromEWKT('CIRCULARSTRING(1 1 2, 2 3 2, 4 5 2, 6 7 2, 5 6 2)')));
                        st_asewkt
---------------------------------------------------------
 CIRCULARSTRING(1 1 2 0,2 3 2 0,4 5 2 0,6 7 2 0,5 6 2 0)
SELECT  ST_AsEWKT(ST_Force4D('MULTILINESTRINGM((0 0 1,0 5 2,5 0 3,0 0 4),(1 1 1,3 1 1,1 3 1,1 1 1))'));
                                      st_asewkt
--------------------------------------------------------------------------------------
 MULTILINESTRING((0 0 0 1,0 5 0 2,5 0 0 3,0 0 0 4),(1 1 0 1,3 1 0 1,1 3 0 1,1 1 0 1))
ST_ForcePolygonCCW
描述
将输入的Polygon参数的外部边界按逆时针安排且将所有内部边界按顺时针方向安排。

函数声明
geometry ST_ForcePolygonCCW(geometry geom);
使用示例
None
ST_ForceCollection
描述
将一个几何对象转换成GEOMETRYCOLLECTION。

函数声明
geometry ST_ForceCollection(geometry  geomA);
使用示例
SELECT  ST_AsEWKT(ST_ForceCollection('POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1))'));
                                   st_asewkt
----------------------------------------------------------------------------------
 GEOMETRYCOLLECTION(POLYGON((0 0 1,0 5 1,5 0 1,0 0 1),(1 1 1,3 1 1,1 3 1,1 1 1)))
  SELECT ST_AsText(ST_ForceCollection('CIRCULARSTRING(220227 150406,2220227 150407,220227 150406)'));
                                   st_astext
--------------------------------------------------------------------------------
 GEOMETRYCOLLECTION(CIRCULARSTRING(220227 150406,2220227 150407,220227 150406))
(1 row)
ST_ForcePolygonCW
描述
将输入的Polygon参数的外部边界按顺时针安排且将所有内部边界按逆时针方向安排。

函数声明
geometry ST_ForcePolygonCW(geometry geom);
使用示例
None
ST_ForceSFS
描述
强制转换几何对象到SFS 1.1中的几何对象类型。

函数声明
geometry ST_ForceSFS(geometry  geomA);
geometry ST_ForceSFS(geometry  geomA, text  version);
使用示例
None
ST_ForceRHR
描述
强制给定几何对象Polygon的顶点按右手法则顺序排列。

函数声明
geometry ST_ForceRHR(geometry g);
使用示例
SELECT ST_AsEWKT(
  ST_ForceRHR(
    'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'
  )
);
                          st_asewkt
--------------------------------------------------------------
 POLYGON((0 0 2,0 5 2,5 0 2,0 0 2),(1 1 2,3 1 2,1 3 2,1 1 2))
(1 row)
ST_ForceCurve
描述
如果可行地话，将一个几何对象转换为对应的曲线版本。

函数声明
geometry ST_ForceCurve(geometry g);
使用示例
SELECT ST_AsText(
  ST_ForceCurve(
    'POLYGON((0 0 2, 5 0 2, 0 5 2, 0 0 2),(1 1 2, 1 3 2, 3 1 2, 1 1 2))'::geometry
  )
);
                              st_astext
----------------------------------------------------------------------
 CURVEPOLYGON Z ((0 0 2,5 0 2,0 5 2,0 0 2),(1 1 2,1 3 2,3 1 2,1 1 2))
(1 row)
ST_LineMerge
描述
如果可以，将输入的MultiLineString连接成一个或多个LineString。

函数声明
geometry ST_LineMerge(geometry  amultilinestring);
使用示例
SELECT ST_AsText(ST_LineMerge(
ST_GeomFromText('MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45 -33,-46 -32))')
        )
);
st_astext
--------------------------------------------------------------------------------------------------
LINESTRING(-29 -27,-30 -29.7,-36 -31,-45 -33,-46 -32)
(1 row)
--If can't be merged - original MULTILINESTRING is returned
SELECT ST_AsText(ST_LineMerge(
ST_GeomFromText('MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 -32))')
)
);
st_astext
----------------
MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))
-- example with Z dimension
SELECT ST_AsText(ST_LineMerge(
ST_GeomFromText('MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), (-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))')
        )
);
st_astext
--------------------------------------------------------------------------------------------------
LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 -32 11)
(1 row)
ST_CollectionExtract
描述
从一个几何对象集合对象中，找出并返回指定类型的几何对象。

函数声明
geometry ST_CollectionExtract(geometry  collection, integer  type);
使用示例
-- Constants: 1 == POINT, 2 == LINESTRING, 3 == POLYGON
SELECT ST_AsText(ST_CollectionExtract(ST_GeomFromText('GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(0 0)))'),1));
st_astext
---------------
MULTIPOINT(0 0)
(1 row)
SELECT ST_AsText(ST_CollectionExtract(ST_GeomFromText('GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(LINESTRING(0 0, 1 1)),LINESTRING(2 2, 3 3))'),2));
st_astext
---------------
MULTILINESTRING((0 0, 1 1), (2 2, 3 3))
(1 row)
ST_CollectionHomogenize
描述
对于给定的几何对象集合，返回一个对它所包含对象的“最简单”的表示方式。

函数声明
geometry ST_CollectionHomogenize(geometry  collection);
使用示例
SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0))'));
st_astext
------------
 POINT(0 0)
(1 row)
SELECT ST_AsText(ST_CollectionHomogenize('GEOMETRYCOLLECTION(POINT(0 0),POINT(1 1))'));
st_astext
---------------------
 MULTIPOINT(0 0,1 1)
(1 row)
ST_Multi
描述
将给定的几何对象转换为对应的Multi*版本。

函数声明
geometry ST_Multi(geometry  g1);
使用示例
SELECT ST_AsText(ST_Multi(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))')));
st_astext
--------------------------------------------------------------------------------------------------
MULTIPOLYGON(((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416)))
(1 row)
ST_Normalize
描述
返回给定输入几何对象的规范形式。

函数声明
geometry ST_Normalize(geometry  geom);
使用示例
SELECT ST_AsText(ST_Normalize(ST_GeomFromText(
  'GEOMETRYCOLLECTION(
    POINT(2 3),
    MULTILINESTRING((0 0, 1 1),(2 2, 3 3)),
    POLYGON(
      (0 10,0 0,10 0,10 10,0 10),
      (4 2,2 2,2 4,4 4,4 2),
      (6 8,8 8,8 6,6 6,6 8)
    )
  )'
)));
                                                                    st_astext
----------------------------------------------------------------------------------------------------------------------------------------------------
 GEOMETRYCOLLECTION(POLYGON((0 0,0 10,10 10,10 0,0 0),(6 6,8 6,8 8,6 8,6 6),(2 2,4 2,4 4,2 4,2 2)),MULTILINESTRING((2 2,3 3),(0 0,1 1)),POINT(2 3))
(1 row)
ST_QuantizeCoordinates
描述
将几何对象中的点的坐标值保留指定位数的有效数字。

函数声明
geometry ST_QuantizeCoordinates ( geometry g , int prec_x , int prec_y , int prec_z , int prec_m );
使用示例
SELECT ST_AsText(ST_QuantizeCoordinates('POINT (100.123456 0)'::geometry, 4));
st_astext
-------------------------
POINT(100.123455047607 0)
ST_RemovePoint
描述
从一个LineString之中移除指定编号的点。

函数声明
geometry ST_RemovePoint(geometry linestring, integer offset);
使用示例
--guarantee no LINESTRINGS are closed
--by removing the end point.  The below assumes the_geom is of type LINESTRING
UPDATE sometable
    SET the_geom = ST_RemovePoint(the_geom, ST_NPoints(the_geom) - 1)
    FROM sometable
    WHERE ST_IsClosed(the_geom) = true;
ST_Reverse
描述
返回输入几何对象的顶点逆序排列之后的几何对象。

函数声明
geometry ST_Reverse(geometry  g1);
使用示例
SELECT ST_AsText(the_geom) as line, ST_AsText(ST_Reverse(the_geom)) As reverseline
FROM
(SELECT ST_MakeLine(ST_MakePoint(1,2),
        ST_MakePoint(1,10)) As the_geom) as foo;
--result
        line         |     reverseline
---------------------+----------------------
LINESTRING(1 2,1 10) | LINESTRING(1 10,1 2)
ST_Rotate
描述
将一个几何对象逆时针旋转给定的角度。

函数声明
geometry ST_Rotate(geometry geomA, float rotRadians);
geometry ST_Rotate(geometry geomA, float rotRadians, float x0, float y0);
geometry ST_Rotate(geometry geomA, float rotRadians, geometry pointOrigin);
使用示例
--Rotate 180 degrees
SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()));
               st_asewkt
---------------------------------------
 LINESTRING(-50 -160,-50 -50,-100 -50)
(1 row)
--Rotate 30 degrees counter-clockwise at x=50, y=160
SELECT ST_AsEWKT(ST_Rotate('LINESTRING (50 160, 50 50, 100 50)', pi()/6, 50, 160));
                                 st_asewkt
---------------------------------------------------------------------------
 LINESTRING(50 160,105 64.7372055837117,148.301270189222 89.7372055837117)
(1 row)
--Rotate 60 degrees clockwise from centroid
SELECT ST_AsEWKT(ST_Rotate(geom, -pi()/3, ST_Centroid(geom)))
FROM (SELECT 'LINESTRING (50 160, 50 50, 100 50)'::geometry AS geom) AS foo;
                           st_asewkt
--------------------------------------------------------------
 LINESTRING(116.4225 130.6721,21.1597 75.6721,46.1597 32.3708)
(1 row)
ST_RotateX
描述
将给定几何对象沿X轴旋转指定角度。

函数声明
geometry ST_RotateX(geometry geomA, float rotRadians);
使用示例
--Rotate a line 90 degrees along x-axis
SELECT ST_AsEWKT(ST_RotateX(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));
         st_asewkt
---------------------------
 LINESTRING(1 -3 2,1 -1 1)
ST_RotateY
描述
将给定几何对象沿Y轴旋转指定角度。

函数声明
geometry ST_RotateY(geometry geomA, float rotRadians);
使用示例
--Rotate a line 90 degrees along y-axis
 SELECT ST_AsEWKT(ST_RotateY(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));
         st_asewkt
---------------------------
 LINESTRING(3 2 -1,1 1 -1)
ST_RotateZ
描述
将给定几何对象沿Y轴旋转指定角度。

函数声明
geometry ST_RotateZ(geometry geomA, float rotRadians);
使用示例
--Rotate a line 90 degrees along z-axis
SELECT ST_AsEWKT(ST_RotateZ(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), pi()/2));
         st_asewkt
---------------------------
 LINESTRING(-2 1 3,-1 1 1)
 --Rotate a curved circle around z-axis
SELECT ST_AsEWKT(ST_RotateZ(the_geom, pi()/2))
FROM (SELECT ST_LineToCurve(ST_Buffer(ST_GeomFromText('POINT(234 567)'), 3)) As the_geom) As foo;
                                                       st_asewkt
----------------------------------------------------------------------------------------------------------------------------
 CURVEPOLYGON(CIRCULARSTRING(-567 237,-564.87867965644 236.12132034356,-564 234,-569.12132034356 231.87867965644,-567 237))
ST_Scale
描述
将给定几何对象按指定的因子进行缩放。

函数声明
geometry ST_Scale(geometry  geomA, float XFactor, float YFactor, float ZFactor);
geometry ST_Scale(geometry  geomA, float XFactor, float YFactor);
geometry ST_Scale(geometry  geom, geometry factor);
geometry ST_Scale(geometry  geom, geometry factor, geometry origin);
使用示例
--Version 1: scale X, Y, Z
SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75, 0.8));
              st_asewkt
--------------------------------------
 LINESTRING(0.5 1.5 2.4,0.5 0.75 0.8)
--Version 2: Scale X Y
 SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 0.75));
            st_asewkt
----------------------------------
 LINESTRING(0.5 1.5 3,0.5 0.75 1)
--Version 3: Scale X Y Z M
 SELECT ST_AsEWKT(ST_Scale(ST_GeomFromEWKT('LINESTRING(1 2 3 4, 1 1 1 1)'),
   ST_MakePoint(0.5, 0.75, 2, -1)));
                   st_asewkt
----------------------------------------
 LINESTRING(0.5 1.5 6 -4,0.5 0.75 2 -1)
--Version 4: Scale X Y using false origin
SELECT ST_AsText(ST_Scale('LINESTRING(1 1, 2 2)', 'POINT(2 2)', 'POINT(1 1)'::geometry));
      st_astext
---------------------
 LINESTRING(1 1,3 3)
ST_Segmentize
描述
将一个几何对象或地理对象重新分段，使得最大段长度不大于给定值。

函数声明
geometry ST_Segmentize(geometry  geom, float  max_segment_length);
geography ST_Segmentize(geography  geog, float  max_segment_length);
使用示例
SELECT ST_AsText(ST_Segmentize(
ST_GeomFromText('MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45 -33,-46 -32))')
        ,5)
);
st_astext
--------------------------------------------------------------------------------------------------
MULTILINESTRING((-29 -27,-30 -29.7,-34.886615700134 -30.758766735029,-36 -31,-40.8809353009198 -32.0846522890933,-45 -33),(-45 -33,-46 -32))
(1 row)
SELECT ST_AsText(ST_Segmentize(ST_GeomFromText('POLYGON((-29 28, -30 40, -29 28))'),10));
st_astext
-----------------------
POLYGON((-29 28,-29.8304547985374 37.9654575824488,-30 40,-29.1695452014626 30.0345424175512,-29 28))
(1 row)
ST_SetPoint
描述
将LineString中的给定序号的坐标点替换为参数中指定的坐标点。

函数声明
geometry ST_SetPoint(geometry linestring, integer zerobasedposition, geometry point);
使用示例
--Change first point in line string from -1 3 to -1 1
SELECT ST_AsText(ST_SetPoint('LINESTRING(-1 2,-1 3)', 0, 'POINT(-1 1)'));
       st_astext
-----------------------
 LINESTRING(-1 1,-1 3)
---Change last point in a line string (lets play with 3d linestring this time)
SELECT ST_AsEWKT(ST_SetPoint(foo.the_geom, ST_NumPoints(foo.the_geom) - 1, ST_GeomFromEWKT('POINT(-1 1 3)')))
FROM (SELECT ST_GeomFromEWKT('LINESTRING(-1 2 3,-1 3 4, 5 6 7)') As the_geom) As foo;
       st_asewkt
-----------------------
LINESTRING(-1 2 3,-1 3 4,-1 1 3)
SELECT ST_AsText(ST_SetPoint(g, -3, p))
FROM ST_GEomFromText('LINESTRING(0 0, 1 1, 2 2, 3 3, 4 4)') AS g
    , ST_PointN(g,1) as p;
       st_astext
-----------------------
LINESTRING(0 0,1 1,0 0,3 3,4 4)
ST_SetSRID
描述
设置几何对象的SRID。

函数声明
geometry ST_SetSRID(geometry geom, integer srid);
使用示例
SELECT ST_SetSRID(ST_Point(-123.365556, 48.428611),4326) As wgs84long_lat;
-- the ewkt representation (wrap with ST_AsEWKT) -
SRID=4326;POINT(-123.365556 48.428611)
ST_Transform
描述
将传入的几何对象的坐标参考系转换成指定的坐标参考系的几何对象，并返回这个对象。

函数声明
geometry ST_Transform(geometry  g1, integer  srid);
geometry ST_Transform(geometry  geom, text  to_proj);
geometry ST_Transform(geometry  geom, text  from_proj, text  to_proj);
geometry ST_Transform(geometry  geom, text  from_proj, integer  to_srid);
使用示例
SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) As wgs_geom;
 wgs_geom
---------------------------
 POLYGON((-71.1776848522251 42.3902896512902,-71.1776843766326 42.3903829478009,-71.1775844305465 42.3903826677917,-71.1775825927231 42.3902893647987,-71.1776848522251 42.3902896512902));
(1 row)
--3D Circular String example
SELECT ST_AsEWKT(ST_Transform(ST_GeomFromEWKT('SRID=2249;CIRCULARSTRING(743238 2967416 1,743238 2967450 2,743265 2967450 3,743265.625 2967416 3,743238 2967416 4)'),4326));
                 st_asewkt
--------------------------------------------------------------------------------------
 SRID=4326;CIRCULARSTRING(-71.1776848522251 42.3902896512902 1,-71.1776843766326 42.3903829478009 2,
 -71.1775844305465 42.3903826677917 3,
 -71.1775825927231 42.3902893647987 3,-71.1776848522251 42.3902896512902 4)
ST_Translate
描述
将一个几何对象偏移给定的数值。

函数声明
geometry ST_Translate(geometry  g1, float  deltax, float  deltay);
geometry ST_Translate(geometry  g1, float  deltax, float  deltay, float  deltaz);
使用示例
SELECT ST_AsText(ST_Translate(ST_GeomFromText('POINT(-71.01 42.37)',4326),1,0)) As wgs_transgeomtxt;
wgs_transgeomtxt
---------------------
POINT(-70.01 42.37)
ST_TransScale
描述
将几何对象的坐标值偏移指定的数值和因子。

函数声明
geometry ST_TransScale(geometry  geomA, float deltaX, float deltaY, float XFactor, float YFactor);
使用示例
SELECT ST_AsEWKT(ST_TransScale(ST_GeomFromEWKT('LINESTRING(1 2 3, 1 1 1)'), 0.5, 1, 1, 2));
          st_asewkt
-----------------------------
 LINESTRING(1.5 6 3,1.5 4 1)
--Buffer a point to get an approximation of a circle, convert to curve and then translate 1,2 and scale it 3,4
  SELECT ST_AsText(ST_Transscale(ST_LineToCurve(ST_Buffer('POINT(234 567)', 3)),1,2,3,4));
                                                          st_astext
------------------------------------------------------------------------------------------------------------------------------
 CURVEPOLYGON(CIRCULARSTRING(714 2276,711.363961030679 2267.51471862576,705 2264,698.636038969321 2284.48528137424,714 2276))
 上一篇：空间对象访问函数
下一篇：空间对象输出函数
相关文档
空间对象访问函数
空间对象构造函数
时序分析函数
最佳实践
查询数据
空间对象输出函数
相关产品
时序时空数据库 TSDB
时序时空数据库产品系列是是广泛应用于物联网（IoT）设备监控系统 ，企业能源管理系统（EMS），生产安全监控系统，电力检测系统等行业场景的专业数据库产品，提供百万高效写入，高压缩比低成本存储、预降采样、插值、多维聚合计算，查询结果可视化功能；解决由于设备采集点数量巨大，数据采集频率高，造成的存储成本高，写入和查询分析效率低的问题。
云数据库 HBase 版
云数据库 HBase 版（ApsaraDB for HBase）是基于 Hadoop 的一个分布式数据库，支持海量的PB级的大数据存储，适用于高吞吐的随机读写的场景。目前在阿里内部有数百个集群，10000台左右规模的集群，服务数百个业务线，在订单存储、消息存储、物联网、轨迹、wifi、安全风控、搜索等领域有较多的在线应用。 阿里云特别提供HBase产品化方案服务广大的中小型客户。
实时计算
阿里云实时计算(Alibaba Cloud Realtime Compute)是一套基于Apache Flink构建的一站式、高性能实时大数据处理平台，广泛适用于流式数据处理、离线数据处理、DataLake计算等多种场景。阿里云实时计算产品彻底规避繁重的底层流式处理逻辑开发工作，助力中国企业向实时化、智能化大数据计算升级转型。

==========
空间对象输出函数
更新时间：2019-04-27 17:05:54


本页目录
ST_AsBinary
描述
函数声明
使用示例
ST_AsEncodedPolyline
描述
函数声明
使用示例
ST_AsEWKB
描述
函数声明
使用示例
ST_AsEWKT
描述
函数声明
使用示例
ST_AsGeoJSON
描述
函数声明
使用示例
ST_AsGML
描述
函数声明
使用示例
ST_AsHEXEWKB
描述
函数声明
使用示例
ST_AsKML
描述
函数声明
使用示例
ST_AsLatLonText
描述
函数声明
使用示例
ST_AsSVG
描述
函数声明
使用示例
ST_AsText
描述
函数声明
使用示例
ST_AsTWKB
描述
函数声明
使用示例
ST_AsX3D
描述
函数声明
使用示例
ST_GeoHash
描述
函数声明
使用示例
ST_AsGeobuf
描述
函数声明
使用示例
ST_AsBinary
描述
返回给定几何对象或地理对象的WKB表示，其中不包含SRID元数据信息。

函数声明
bytea ST_AsBinary(geometry  g1);
bytea ST_AsBinary(geometry  g1, text NDR_or_XDR);
bytea ST_AsBinary(geography  g1);
bytea ST_AsBinary(geography  g1, text NDR_or_XDR);
使用示例
SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
           st_asbinary
--------------------------------
\001\003\000\000\000\001\000\000\000\005
\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\000\360?\000\000\000\000\000\000
\360?\000\000\000\000\000\000\360?\000\000
\000\000\000\000\360?\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000
(1 row)
ST_AsEncodedPolyline
描述
返回给定的LineString几何对象的Encoded Polyline表示。

函数声明
text ST_AsEncodedPolyline(geometry geom, integer  precision=5);
使用示例
SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));
--result--
|_p~iF~ps|U_ulLnnqC_mqNvxq`@
ST_AsEWKB
描述
返回给定几何对象的扩展WKB表示，其中包含SRID元数据。

函数声明
bytea ST_AsEWKB(geometry  g1);
bytea ST_AsEWKB(geometry  g1, text NDR_or_XDR);
使用示例
SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
           st_asewkb
--------------------------------
\001\003\000\000 \346\020\000\000\001\000
\000\000\005\000\000\000\000
\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\360?\000\000\000\000\000\000\360?
\000\000\000\000\000\000\360?\000\000\000\000\000
\000\360?\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000
(1 row)
ST_AsEWKT
描述
返回给定几何对象的扩展WKT表示，其中包含SRID元数据。

函数声明
text ST_AsEWKT(geometry  g1);
text ST_AsEWKT(geography  g1);
使用示例
SELECT ST_AsEWKT('0103000020E61000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000'::geometry);
           st_asewkt
--------------------------------
SRID=4326;POLYGON((0 0,0 1,1 1,1 0,0 0))
(1 row)
SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018E20A4100000000485F024100000000000000400000000018E20A4100000000305C02410000000000000840')
--st_asewkt---
CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)
ST_AsGeoJSON
描述
返回给定几何对象或地理对象的GeoJSON表示。

函数声明
text ST_AsGeoJSON(geometry  geom, integer  maxdecimaldigits=15, integer  options=0);
text ST_AsGeoJSON(geography  geog, integer  maxdecimaldigits=15, integer  options=0);
text ST_AsGeoJSON(integer  gj_version, geometry  geom, integer  maxdecimaldigits=15, integer  options=0);
text ST_AsGeoJSON(integer  gj_version, geography  geog, integer  maxdecimaldigits=15, integer  options=0);
使用示例
select row_to_json(fc)
from (
    select
        'FeatureCollection' as "type",
        array_to_json(array_agg(f)) as "features"
    from (
        select
            'Feature' as "type",
            ST_AsGeoJSON(ST_Transform(way, 4326), 6) :: json as "geometry",
            (
                select json_strip_nulls(row_to_json(t))
                from (
                    select
                        osm_id,
                        "natural",
                        place
                ) t
            ) as "properties"
        from planet_osm_point
        where
            "natural" is not null
            or place is not null
        limit 10
    ) as f
) as fc;
                       st_asgeojson
-----------------------------------------------------------------------------------------------------------
{"type":"FeatureCollection","features":[{"type":"Feature","geometry":{"type":"Point","coordinates":[23.569251,51.541599]},"properties":{"osm_id":3424148658,"place":"locality"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.625174,51.511718]},"properties":{"osm_id":4322036818,"place":"locality"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.613928,51.5417]},"properties":{"osm_id":242979330,"place":"hamlet"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.586361,51.563272]},"properties":{"osm_id":3424148656,"place":"locality"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.605488,51.553886]},"properties":{"osm_id":242979323,"place":"village"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.6067,51.57609]},"properties":{"osm_id":242979327,"place":"village"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.636533,51.575683]},"properties":{"osm_id":5737800420,"place":"locality"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.656733,51.518733]},"properties":{"osm_id":5737802397,"place":"locality"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.672542,51.504584]},"properties":{"osm_id":242979320,"place":"hamlet"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[23.574094,51.63389]},"properties":{"osm_id":242979333,"place":"village"}}]}
ST_AsGML
描述
返回给定几何对象或地理对象的GML表示。

函数声明
text ST_AsGML(geometry  geom, integer  maxdecimaldigits=15, integer  options=0);
text ST_AsGML(geography  geog, integer  maxdecimaldigits=15, integer  options=0);
text ST_AsGML(integer  version, geometry  geom, integer  maxdecimaldigits=15, integer  options=0, text  nprefix=null, text  id=null);
text ST_AsGML(integer  version, geography  geog, integer  maxdecimaldigits=15, integer  options=0, text  nprefix=null, text  id=null);
使用示例
SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
st_asgml
--------
<gml:Polygon srsName="EPSG:4326"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>
ST_AsHEXEWKB
描述
返回给定几何对象的HEXEWKB表示字符串，采用小端编码（NDR）或大端编码（XDR）。

函数声明
text ST_AsHEXEWKB(geometry  g1, text  NDRorXDR);
text ST_AsHEXEWKB(geometry  g1);
使用示例
SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
which gives same answer as
SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326)::text;
st_ashexewkb
--------
0103000020E6100000010000000500
00000000000000000000000000000000
00000000000000000000000000000000F03F
000000000000F03F000000000000F03F000000000000F03
F000000000000000000000000000000000000000000000000
ST_AsKML
描述
返回给定几何对象或地理对象的KML表示。可以指定多个变种，默认采用version=2, maxdecimaldigits=15。

函数声明
text ST_AsKML(geometry  geom, integer  maxdecimaldigits=15);
text ST_AsKML(geography  geog, integer  maxdecimaldigits=15);
text ST_AsKML(integer  version, geometry  geom, integer  maxdecimaldigits=15, text  nprefix=NULL);
text ST_AsKML(integer  version, geography  geog, integer  maxdecimaldigits=15, text  nprefix=NULL);
使用示例
SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
st_askml
--------
<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>
--3d linestring
SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');
<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>
ST_AsLatLonText
描述
返回给定坐标点的度、分、秒表示。

函数声明
text ST_AsLatLonText(geometry  pt, text  format='');
使用示例
SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));
      st_aslatlontext
----------------------------
 2°19'29.928"S 3°14'3.243"W
ST_AsSVG
描述
返回给定几何对象或地理对象的SVG表示。

函数声明
text ST_AsSVG(geometry  geom, integer  rel=0, integer  maxdecimaldigits=15);
text ST_AsSVG(geography  geog, integer  rel=0, integer  maxdecimaldigits=15);
使用示例
SELECT ST_AsSVG(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
st_assvg
--------
M 0 0 L 0 -1 1 -1 1 0 Z
ST_AsText
描述
返回给定几何对象或地理对象的WKT表示，不包含SRID元数据。

函数声明
text ST_AsText(geometry  g1);
text ST_AsText(geometry  g1, integer  maxdecimaldigits=15);
text ST_AsText(geography  g1);
text ST_AsText(geography  g1, integer  maxdecimaldigits=15);
使用示例
SELECT ST_AsText('01030000000100000005000000000000000000
000000000000000000000000000000000000000000000000
F03F000000000000F03F000000000000F03F000000000000F03
F000000000000000000000000000000000000000000000000');
           st_astext
--------------------------------
 POLYGON((0 0,0 1,1 1,1 0,0 0))
(1 row)
ST_AsTWKB
描述
返回给定几何对象的TWKB表示，即”Tiny Well-Known Binary”。

函数声明
bytea ST_AsTWKB(geometry  g1, integer  decimaldigits_xy=0, integer  decimaldigits_z=0, integer  decimaldigits_m=0, boolean  include_sizes=false, boolean  include_bounding boxes=false);
bytea ST_AsTWKB(geometry[]  geometries, bigint[]  unique_ids, integer  decimaldigits_xy=0, integer  decimaldigits_z=0, integer  decimaldigits_m=0, boolean  include_sizes=false, boolean  include_bounding_boxes=false);
使用示例
SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);
                 st_astwkb
--------------------------------------------
\x02000202020808
ST_AsX3D
描述
返回给定几何对象的X3D表示，参见: ISO-IEC-19776-1.2-X3DEncodings-XML

函数声明
text ST_AsX3D(geometry  g1, integer  maxdecimaldigits=15, integer  options=0);
使用示例
SELECT '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D>
  <Scene>
    <Transform>
      <Shape>
       <Appearance>
            <Material emissiveColor=''0 0 1''/>
       </Appearance> ' ||
       ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),
((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ||
      '</Shape>
    </Transform>
  </Scene>
</X3D>' As x3ddoc;
x3ddoc
--------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D>
  <Scene>
    <Transform>
      <Shape>
       <Appearance>
            <Material emissiveColor='0 0 1'/>
       </Appearance>
       <IndexedFaceSet  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'>
            <Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' />
      </IndexedFaceSet>
      </Shape>
    </Transform>
  </Scene>
</X3D>
ST_GeoHash
描述
返回给定几何对象的GeoHash表示。

函数声明
text ST_GeoHash(geometry  geom, integer  maxchars=full_precision_of_point);
使用示例
SELECT ST_GeoHash(ST_SetSRID(ST_MakePoint(-126,48),4326));
     st_geohash
----------------------
 c0w3hf1s70w3hf1s70w3
SELECT ST_GeoHash(ST_SetSRID(ST_MakePoint(-126,48),4326),5);
 st_geohash
------------
 c0w3h
ST_AsGeobuf
描述
返回给定行的集合的Geobuf表示。

函数声明
bytea ST_AsGeobuf(anyelement set  row);
bytea ST_AsGeobuf(anyelement  row, text  geom_name);
使用示例
SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64')
    FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;
 st_asgeobuf
----------------------------------
 GAAiEAoOCgwIBBoIAAAAAgIAAAE=
 =========
 ST_Buffer
 描述
 对于给定的几何对象或地理对象，返回一个覆盖了所有的到它的距离小于给定值的坐标点的相应几何对象或地理对象。

 函数声明
 geometry ST_Buffer(geometry  g1, float  radius_of_buffer);
 geometry ST_Buffer(geometry  g1, float  radius_of_buffer, integer  num_seg_quarter_circle);
 geometry ST_Buffer(geometry  g1, float  radius_of_buffer, text  buffer_style_parameters);
 geography ST_Buffer(geography  g1, float  radius_of_buffer_in_meters);
 geography ST_Buffer(geography  g1, float  radius_of_buffer, integer  num_seg_quarter_circle);
 geography ST_Buffer(geography  g1, float  radius_of_buffer, text  buffer_style_parameters);
 使用示例
 SELECT ST_Buffer(
  ST_GeomFromText('POINT(100 90)'),
  50, 'quad_segs=8');
 ST_BuildArea
 描述
 返回由传入的几何对象围成的几何对象。

 函数声明
 geometry ST_BuildArea(geometry  A);
 使用示例
 SELECT ST_BuildArea(ST_Collect(smallc,bigc))
 FROM (SELECT
     ST_Buffer(
       ST_GeomFromText('POINT(100 90)'), 25) As smallc,
     ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) As bigc) As foo;
 ST_ClipByBox2D
 描述
 返回给定的几何对象之中落在给定的2维框中的部分。

 函数声明
 geometry ST_ClipByBox2D(geometry geom, box2d box);
 使用示例
 -- Rely on implicit cast from geometry to box2d for the second parameter
 SELECT ST_ClipByBox2D(the_geom, ST_MakeEnvelope(0,0,10,10)) FROM mytab;
 ST_Collect
 描述
 返回由若干个输入几何对象组合构成的一个几何对象的集合：Multi* 或 GeometryCollection。

 本函数也可以当做聚合函数来使用。

 函数声明
 geometry ST_Collect(geometry set g1field);
 geometry ST_Collect(geometry g1, geometry g2);
 geometry ST_Collect(geometry[] g1_array);
 使用示例
 SELECT stusps, ST_Collect(f.the_geom) as singlegeom
      FROM (SELECT stusps, (ST_Dump(the_geom)).geom As the_geom
                 FROM
                 somestatetable ) As f
 GROUP BY stusps
 ST_ConcaveHull
 描述
 返回给定几何对象的凹包。

 函数声明
 geometry ST_ConcaveHull(geometry  geomA, float  target_percent, boolean  allow_holes=false);
 使用示例
 --Get estimate of infected area based on point observations
 SELECT d.disease_type,
     ST_ConcaveHull(ST_Collect(d.pnt_geom), 0.99) As geom
     FROM disease_obs As d
     GROUP BY d.disease_type;
 ST_ConvexHull
 描述
 返回给定几何对象的最小凸包。

 函数声明
 geometry ST_ConvexHull(geometry  geomA);
 使用示例
 --Get estimate of infected area based on point observations
 SELECT d.disease_type,
     ST_ConvexHull(ST_Collect(d.the_geom)) As the_geom
     FROM disease_obs As d
     GROUP BY d.disease_type;
 ST_CurveToLine
 描述
 将一个给定的 CIRCULARSTRING/CURVEPOLYGON/MULTISURFACE 几何对象转换为对应的 LINESTRING/POLYGON/MULTIPOLYGON 类型。

 函数声明
 geometry ST_CurveToLine(geometry curveGeom, float tolerance, integer tolerance_type, integer flags);
 使用示例
 SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)')));
 --Result --
  LINESTRING(220268 150415,220269.95064912 150416.539364228,220271.823415575 150418.17258804,220273.613787707 150419.895736857,
  220275.317452352 150421.704659462,220276.930305234 150423.594998003,220278.448460847 150425.562198489,
  220279.868261823 150427.60152176,220281.186287736 150429.708054909,220282.399363347 150431.876723113,
  220283.50456625 150434.10230186,220284.499233914 150436.379429536,220285.380970099 150438.702620341,220286.147650624 150441.066277505,
  220286.797428488 150443.464706771,220287.328738321 150445.892130112,220287.740300149 150448.342699654,
  220288.031122486 150450.810511759,220288.200504713 150453.289621251,220288.248038775 150455.77405574,
  220288.173610157 150458.257830005,220287.977398166 150460.734960415,220287.659875492 150463.199479347,
  220287.221807076 150465.64544956,220286.664248262 150468.066978495,220285.988542259 150470.458232479,220285.196316903 150472.81345077,
  220284.289480732 150475.126959442,220283.270218395 150477.39318505,220282.140985384 150479.606668057,
  220280.90450212 150481.762075989,220279.5637474 150483.85421628,220278.12195122 150485.87804878,
  220276.582586992 150487.828697901,220274.949363179 150489.701464356,220273.226214362 150491.491836488,
  220271.417291757 150493.195501133,220269.526953216 150494.808354014,220267.559752731 150496.326509628,
  220265.520429459 150497.746310603,220263.41389631 150499.064336517,220261.245228106 150500.277412127,
  220259.019649359 150501.38261503,220256.742521683 150502.377282695,220254.419330878 150503.259018879,
  220252.055673714 150504.025699404,220249.657244448 150504.675477269,220247.229821107 150505.206787101,
  220244.779251566 150505.61834893,220242.311439461 150505.909171266,220239.832329968 150506.078553494,
  220237.347895479 150506.126087555,220234.864121215 150506.051658938,220232.386990804 150505.855446946,
  220229.922471872 150505.537924272,220227.47650166 150505.099855856,220225.054972724 150504.542297043,
  220222.663718741 150503.86659104,220220.308500449 150503.074365683,
  220217.994991777 150502.167529512,220215.72876617 150501.148267175,
  220213.515283163 150500.019034164,220211.35987523 150498.7825509,
  220209.267734939 150497.441796181,220207.243902439 150496,
  220205.293253319 150494.460635772,220203.420486864 150492.82741196,220201.630114732 150491.104263143,
  220199.926450087 150489.295340538,220198.313597205 150487.405001997,220196.795441592 150485.437801511,
  220195.375640616 150483.39847824,220194.057614703 150481.291945091,220192.844539092 150479.123276887,220191.739336189 150476.89769814,
  220190.744668525 150474.620570464,220189.86293234 150472.297379659,220189.096251815 150469.933722495,
  220188.446473951 150467.535293229,220187.915164118 150465.107869888,220187.50360229 150462.657300346,
  220187.212779953 150460.189488241,220187.043397726 150457.710378749,220186.995863664 150455.22594426,
  220187.070292282 150452.742169995,220187.266504273 150450.265039585,220187.584026947 150447.800520653,
  220188.022095363 150445.35455044,220188.579654177 150442.933021505,220189.25536018 150440.541767521,
  220190.047585536 150438.18654923,220190.954421707 150435.873040558,220191.973684044 150433.60681495,
  220193.102917055 150431.393331943,220194.339400319 150429.237924011,220195.680155039 150427.14578372,220197.12195122 150425.12195122,
  220198.661315447 150423.171302099,220200.29453926 150421.298535644,220202.017688077 150419.508163512,220203.826610682 150417.804498867,
  220205.716949223 150416.191645986,220207.684149708 150414.673490372,220209.72347298 150413.253689397,220211.830006129 150411.935663483,
  220213.998674333 150410.722587873,220216.22425308 150409.61738497,220218.501380756 150408.622717305,220220.824571561 150407.740981121,
  220223.188228725 150406.974300596,220225.586657991 150406.324522731,220227 150406)
 --3d example
 SELECT ST_AsEWKT(ST_CurveToLine(ST_GeomFromEWKT('CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)')));
 Output
 ------
  LINESTRING(220268 150415 1,220269.95064912 150416.539364228 1.0181172856673,
  220271.823415575 150418.17258804 1.03623457133459,220273.613787707 150419.895736857 1.05435185700189,....AD INFINITUM ....
     220225.586657991 150406.324522731 1.32611114201132,220227 150406 3)
 --use only 2 segments to approximate quarter circle
 SELECT ST_AsText(ST_CurveToLine(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'),2));
 st_astext
 ------------------------------
  LINESTRING(220268 150415,220287.740300149 150448.342699654,220278.12195122 150485.87804878,
  220244.779251566 150505.61834893,220207.243902439 150496,220187.50360229 150462.657300346,
  220197.12195122 150425.12195122,220227 150406)
 -- Ensure approximated line is no further than 20 units away from
 -- original curve, and make the result direction-neutral
 SELECT ST_AsText(ST_CurveToLine(
  'CIRCULARSTRING(0 0,100 -100,200 0)'::geometry,
     20, -- Tolerance
     1, -- Above is max distance between curve and line
     1  -- Symmetric flag
 ));
 st_astext
 -------------------------------------------------------------------------------------------
  LINESTRING(0 0,50 -86.6025403784438,150 -86.6025403784439,200 -1.1331077795296e-13,200 0)
 ST_DelaunayTriangles
 描述
 返回给定几何对象的德罗内三角形剖分生成结果，结果的类型可能是：

 如果flags=0，是GeometryCollection；
 如果flags=1，是MultiLinestring；
 如果flags=2，是TIN。
 函数声明
 geometry ST_DelaunayTriangles(geometry  g1, float  tolerance, int4  flags);
 使用示例
 -- geometries overlaid multilinestring triangles
 SELECT
     ST_DelaunayTriangles(
         ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,
             50 60, 125 100, 175 150))'),
         ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)
         ))
      As  dtriag;
 ST_Difference
 描述
 返回一个几何对象，代表给定几何对象A中与几何对象B不相交的部分。

 函数声明
 geometry ST_Difference(geometry  geomA, geometry  geomB);
 使用示例
 --Safe for 2d. This is same geometries as what is shown for st_symdifference
 SELECT ST_AsText(
     ST_Difference(
             ST_GeomFromText('LINESTRING(50 100, 50 200)'),
             ST_GeomFromText('LINESTRING(50 50, 50 150)')
         )
     );
 st_astext
 ---------
 LINESTRING(50 150,50 200)
 ST_Dump
 描述
 对于给定的几何对象，以(geom,path)记录的形式返回其中包含的几何对象，其中geom是被包含的几何对象，path是其在传入对象中的位置。

 函数声明
 geometry_dump[] ST_Dump(geometry  g1);
 使用示例
 SELECT sometable.field1, sometable.field1,
       (ST_Dump(sometable.the_geom)).geom AS the_geom
 FROM sometable;
 -- Break a compound curve into its constituent linestrings and circularstrings
 SELECT ST_AsEWKT(a.geom), ST_HasArc(a.geom)
   FROM ( SELECT (ST_Dump(p_geom)).geom AS geom
          FROM (SELECT ST_GeomFromEWKT('COMPOUNDCURVE(CIRCULARSTRING(0 0, 1 1, 1 0),(1 0, 0 1))') AS p_geom) AS b
         ) AS a;
           st_asewkt          | st_hasarc
 -----------------------------+----------
  CIRCULARSTRING(0 0,1 1,1 0) | t
  LINESTRING(1 0,0 1)         | f
 (2 rows)
 ST_DumpPoints
 描述
 以(geom,path)记录的形式返回给定几何对象中包含的所有的坐标点。

 函数声明
 geometry_dump[] ST_DumpPoints(geometry geom);
 使用示例
 SELECT edge_id, (dp).path[1] As index, ST_AsText((dp).geom) As wktnode
 FROM (SELECT 1 As edge_id
     , ST_DumpPoints(ST_GeomFromText('LINESTRING(1 2, 3 4, 10 10)')) AS dp
      UNION ALL
      SELECT 2 As edge_id
     , ST_DumpPoints(ST_GeomFromText('LINESTRING(3 5, 5 6, 9 10)')) AS dp
    ) As foo;
  edge_id | index |    wktnode
 ---------+-------+--------------
        1 |     1 | POINT(1 2)
        1 |     2 | POINT(3 4)
        1 |     3 | POINT(10 10)
        2 |     1 | POINT(3 5)
        2 |     2 | POINT(5 6)
        2 |     3 | POINT(9 10)
 ST_DumpRings
 描述
 以(geom,path)记录的形式返回给定几何对象中包含的所有的环。其中path中包含了环的序号，0代表外壳，大于0的序号代表了内部环。geom中包含了相应的环，是用Polygon类型来表示的。

 函数声明
 geometry_dump[] ST_DumpRings(geometry  a_polygon);
 使用示例
 SELECT sometable.field1, sometable.field1,
       (ST_DumpRings(sometable.the_geom)).geom As the_geom
 FROM sometableOfpolys;
 SELECT ST_AsEWKT(geom) As the_geom, path
     FROM ST_DumpRings(
         ST_GeomFromEWKT('POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,-8148941 5132466 1,-8148924 5132394 1,
         -8148903 5132210 1,-8148930 5131967 1,-8148992 5131978 1,-8149237 5132093 1,-8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,
         -8150305 5132788 1,-8149064 5133092 1),
         (-8149362 5132394 1,-8149446 5132501 1,-8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))')
         )  as foo;
  path |                                            the_geom
 ----------------------------------------------------------------------------------------------------------------
   {0} | POLYGON((-8149064 5133092 1,-8149064 5132986 1,-8148996 5132839 1,-8148972 5132767 1,-8148958 5132508 1,
       |          -8148941 5132466 1,-8148924 5132394 1,
       |          -8148903 5132210 1,-8148930 5131967 1,
       |          -8148992 5131978 1,-8149237 5132093 1,
       |          -8149404 5132211 1,-8149647 5132310 1,-8149757 5132394 1,-8150305 5132788 1,-8149064 5133092 1))
   {1} | POLYGON((-8149362 5132394 1,-8149446 5132501 1,
       |          -8149548 5132597 1,-8149695 5132675 1,-8149362 5132394 1))
 ST_FlipCoordinates
 描述
 交换给定几何对象的经纬度坐标。

 函数声明
 geometry ST_FlipCoordinates(geometry geom);
 使用示例
 SELECT ST_AsEWKT(ST_FlipCoordinates(GeomFromEWKT('POINT(1 2)')));
  st_asewkt
 ------------
 POINT(2 1)
 ST_GeneratePoints
 描述
 将一个给定的Polygon或MultiPolygon几何对象，转换为其内部随机选取的若干个坐标点。

 函数声明
 geometry ST_GeneratePoints(geometry g, numeric npoints);
 使用示例
 SELECT ST_GeneratePoints(
     ST_Buffer(
         ST_GeomFromText(
         'LINESTRING(50 50,150 150,150 50)'
         ), 10, 'endcap=round join=round'), 12);
 ST_Intersection
 描述
 返回一个代表了给定几何对象或地理对象A与B的重叠部分的几何对象或地理对象。

 函数声明
 geometry ST_Intersection( geometry geomA , geometry geomB );
 geography ST_Intersection( geography geogA , geography geogB );
 使用示例
 SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::geometry));
  st_astext
 ---------------
 GEOMETRYCOLLECTION EMPTY
 (1 row)
 SELECT ST_AsText(ST_Intersection('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::geometry));
  st_astext
 ---------------
 POINT(0 0)
 (1 row)
 ---Clip all lines (trails) by country (here we assume country geom are POLYGON or MULTIPOLYGONS)
 -- NOTE: we are only keeping intersections that result in a LINESTRING or MULTILINESTRING because we don't
 -- care about trails that just share a point
 -- the dump is needed to expand a geometry collection into individual single MULT* parts
 -- the below is fairly generic and will work for polys, etc. by just changing the where clause
 SELECT clipped.gid, clipped.f_name, clipped_geom
 FROM (SELECT trails.gid, trails.f_name, (ST_Dump(ST_Intersection(country.the_geom, trails.the_geom))).geom As clipped_geom
 FROM country
     INNER JOIN trails
     ON ST_Intersects(country.the_geom, trails.the_geom))  As clipped
     WHERE ST_Dimension(clipped.clipped_geom) = 1 ;
 --For polys e.g. polygon landmarks, you can also use the sometimes faster hack that buffering anything by 0.0
 -- except a polygon results in an empty geometry collection
 --(so a geometry collection containing polys, lines and points)
 -- buffered by 0.0 would only leave the polygons and dissolve the collection shell
 SELECT poly.gid,  ST_Multi(ST_Buffer(
                 ST_Intersection(country.the_geom, poly.the_geom),
                 0.0)
                 ) As clipped_geom
 FROM country
     INNER JOIN poly
     ON ST_Intersects(country.the_geom, poly.the_geom)
     WHERE Not ST_IsEmpty(ST_Buffer(ST_Intersection(country.the_geom, poly.the_geom),0.0));
 ST_LineToCurve
 描述
 将给定的LINESTRING/POLYGON几何对象转换为对应的CIRCULARSTRING或CURVEPOLYGON对象。

 函数声明
 geometry ST_LineToCurve(geometry  geomANoncircular);
 使用示例
  -- 2D Example
 SELECT ST_AsText(ST_LineToCurve(foo.the_geom)) As curvedastext,ST_AsText(foo.the_geom) As non_curvedastext
     FROM (SELECT ST_Buffer('POINT(1 3)'::geometry, 3) As the_geom) As foo;
 curvedatext                                                            non_curvedastext
 --------------------------------------------------------------------|-----------------------------------------------------------------
 CURVEPOLYGON(CIRCULARSTRING(4 3,3.12132034355964 0.878679656440359, | POLYGON((4 3,3.94235584120969 2.41472903395162,3.77163859753386 1.85194970290473,
 1 0,-1.12132034355965 5.12132034355963,4 3))                        |  3.49440883690764 1.33328930094119,3.12132034355964 0.878679656440359,
                                                                     |  2.66671069905881 0.505591163092366,2.14805029709527 0.228361402466141,
                                                                     |  1.58527096604839 0.0576441587903094,1 0,
                                                                     |  0.414729033951621 0.0576441587903077,-0.148050297095264 0.228361402466137,
                                                                     |  -0.666710699058802 0.505591163092361,-1.12132034355964 0.878679656440353,
                                                                     |  -1.49440883690763 1.33328930094119,-1.77163859753386 1.85194970290472
                                                                     |  --ETC-- ,3.94235584120969 3.58527096604839,4 3))
 --3D example
 SELECT ST_AsText(ST_LineToCurve(geom)) As curved, ST_AsText(geom) AS not_curved
 FROM (SELECT ST_Translate(ST_Force3D(ST_Boundary(ST_Buffer(ST_Point(1,3), 2,2))),0,0,3) AS geom) AS foo;
                         curved                        |               not_curved
 ------------------------------------------------------+---------------------------------------------------------------------
  CIRCULARSTRING Z (3 3 3,-1 2.99999999999999 3,3 3 3) | LINESTRING Z (3 3 3,2.4142135623731 1.58578643762691 3,1 1 3,
                                                       |    -0.414213562373092 1.5857864376269 3,-1 2.99999999999999 3,
                                                       | -0.414213562373101 4.41421356237309 3,
                                                       |    0.999999999999991 5 3,2.41421356237309 4.4142135623731 3,3 3 3)
 (1 row)
 ST_MakeValid
 描述
 尝试将一个无效的几何对象，在不丢失顶点的前提下，转换为一个有效的几何对象。

 函数声明
 geometry ST_MakeValid(geometry input);
 使用示例
 None
 ST_MemUnion
 描述
 功能与ST_Union相同，是其内存友好的版本（使用更少的内存，但需要更多的处理器时间）。

 函数声明
 geometry ST_MemUnion(geometry set geomfield);
 使用示例
 参见ST_Union
 ST_MinimumBoundingCircle
 描述
 返回给定几何对象的最小外接圆。默认情况下此圆的四分之一圆弧包括48个线段。

 函数声明
 geometry ST_MinimumBoundingCircle(geometry  geomA, integer  num_segs_per_qt_circ=48);
 使用示例
 SELECT d.disease_type,
     ST_MinimumBoundingCircle(ST_Collect(d.the_geom)) As the_geom
     FROM disease_obs As d
     GROUP BY d.disease_type;
 ST_MinimumBoundingRadius
 描述
 返回给定几何对象最小外接圆的圆心坐标和半径。

 函数声明
 (geometry, double precision) ST_MinimumBoundingRadius(geometry geom);
 使用示例
 SELECT ST_AsText(center), radius FROM ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 65136,26096 65427,26426 65078))');
                 st_astext                 |      radius
 ------------------------------------------+------------------
  POINT(26284.8418027133 65267.1145090825) | 247.436045591407
 ST_OrientedEnvelope
 描述
 返回给定几何对象的最小外接框。

 函数声明
 geometry ST_OrientedEnvelope(geometry geom);
 使用示例
 SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 2))'));
 st_astext
 ------------------------------------------------
 POLYGON((3 2,2.88 2.16,-1.12 -0.84,-1 -1,3 2))
 ST_Polygonize
 描述
 聚合函数。返回一个GeometryCollection，其中包含了由给定的几何对象中的组成线条构成的Polygon。

 函数声明
 geometry ST_Polygonize(geometry set geomfield);
 geometry ST_Polygonize(geometry[] geom_array);
 使用示例
 SELECT ST_AsEWKT(ST_Polygonize(the_geom_4269)) As geomtextrep
 FROM (SELECT the_geom_4269 FROM ma.suffolk_edges ORDER BY tlid LIMIT 45) As foo;
 geomtextrep
 -------------------------------------
  SRID=4269;GEOMETRYCOLLECTION(POLYGON((-71.040878 42.285678,-71.040943 42.2856,-71.04096 42.285752,-71.040878 42.285678)),
  POLYGON((-71.17166 42.353675,-71.172026 42.354044,-71.17239 42.354358,-71.171794 42.354971,-71.170511 42.354855,
  -71.17112 42.354238,-71.17166 42.353675)))
 (1 row)
 --Use ST_Dump to dump out the polygonize geoms into individual polygons
 SELECT ST_AsEWKT((ST_Dump(foofoo.polycoll)).geom) As geomtextrep
 FROM (SELECT ST_Polygonize(the_geom_4269) As polycoll
     FROM (SELECT the_geom_4269 FROM ma.suffolk_edges
         ORDER BY tlid LIMIT 45) As foo) As foofoo;
 geomtextrep
 ------------------------
  SRID=4269;POLYGON((-71.040878 42.285678,-71.040943 42.2856,-71.04096 42.285752,
 -71.040878 42.285678))
  SRID=4269;POLYGON((-71.17166 42.353675,-71.172026 42.354044,-71.17239 42.354358
 ,-71.171794 42.354971,-71.170511 42.354855,-71.17112 42.354238,-71.17166 42.353675))
 (2 rows)
 ST_OffsetCurve
 描述
 从输入几何对象（LineString）构造给定距离和侧边的偏移线并返回。通常用于计算围绕中心线的平行线。

 函数声明
 geometry ST_OffsetCurve(geometry line, float signed_distance, text style_parameters='');
 使用示例
 SELECT ST_Union(
  ST_OffsetCurve(f.the_geom,  f.width/2, 'quad_segs=4 join=round'),
  ST_OffsetCurve(f.the_geom, -f.width/2, 'quad_segs=4 join=round')
 ) as track
 FROM someroadstable;
 ST_RemoveRepeatedPoints
 描述
 返回一个从给定几何对象中去掉重复的坐标点之后生成的几何对象。

 函数声明
 geometry ST_RemoveRepeatedPoints(geometry geom, float8 tolerance);
 使用示例
 None
 ST_SharedPaths
 描述
 返回两个给定的几何对象中重叠的线段。

 函数声明
 geometry ST_SharedPaths(geometry lineal1, geometry lineal2);
 使用示例
  SELECT ST_AsText(
   ST_SharedPaths(
     ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),
        (51 150,101 150,76 175,51 150))'),
     ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161, 76 175)')
     )
   ) As wkt
                                 wkt
 -------------------------------------------------------------
 GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),
  (101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)
 ST_ShiftLongitude
 描述
 将给定的几何对象的经度范围在-180..180和0..360两种模式之间切换！

 函数声明
 geometry ST_ShiftLongitude(geometry  geomA);
 使用示例
 --3d points
 SELECT ST_AsEWKT(ST_ShiftLongitude(ST_GeomFromEWKT('SRID=4326;POINT(-118.58 38.38 10)'))) As geomA,
     ST_AsEWKT(ST_ShiftLongitude(ST_GeomFromEWKT('SRID=4326;POINT(241.42 38.38 10)'))) As geomb
 geomA                              geomB
 ----------                          -----------
 SRID=4326;POINT(241.42 38.38 10) SRID=4326;POINT(-118.58 38.38 10)
 --regular line string
 SELECT ST_AsText(ST_ShiftLongitude(ST_GeomFromText('LINESTRING(-118.58 38.38, -118.20 38.45)')))
 st_astext
 ----------
 LINESTRING(241.42 38.38,241.8 38.45)
 ST_Simplify
 描述
 返回给定几何对象的简化版本，使用道格拉斯-普克算法生成该几何对象的近似表示。

 函数声明
 geometry ST_Simplify(geometry geomA, float tolerance, boolean preserveCollapsed);
 使用示例
 SELECT ST_Npoints(the_geom) As np_before, ST_NPoints(ST_Simplify(the_geom,0.1)) As np01_notbadcircle, ST_NPoints(ST_Simplify(the_geom,0.5)) As np05_notquitecircle,
 ST_NPoints(ST_Simplify(the_geom,1)) As np1_octagon, ST_NPoints(ST_Simplify(the_geom,10)) As np10_triangle,
 (ST_Simplify(the_geom,100) is null) As  np100_geometrygoesaway
 FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) As the_geom) As foo;
 -result
  np_before | np01_notbadcircle | np05_notquitecircle | np1_octagon | np10_triangle | np100_geometrygoesaway
 -----------+-------------------+---------------------+-------------+---------------+------------------------
         49 |                33 |                  17 |           9 |             4 | t
 ST_SimplifyPreserveTopology
 描述
 返回给定几何对象的简化版本，使用道格拉斯-普克算法生成该几何对象的近似表示。同时避免构造无效（Invalid）的几何对象（特别是Polygon）。

 函数声明
 geometry ST_SimplifyPreserveTopology(geometry geomA, float tolerance);
 使用示例
 SELECT ST_Npoints(the_geom) As np_before, ST_NPoints(ST_SimplifyPreserveTopology(the_geom,0.1)) As np01_notbadcircle, ST_NPoints(ST_SimplifyPreserveTopology(the_geom,0.5)) As np05_notquitecircle,
 ST_NPoints(ST_SimplifyPreserveTopology(the_geom,1)) As np1_octagon, ST_NPoints(ST_SimplifyPreserveTopology(the_geom,10)) As np10_square,
 ST_NPoints(ST_SimplifyPreserveTopology(the_geom,100)) As  np100_stillsquare
 FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) As the_geom) As foo;
 --result--
  np_before | np01_notbadcircle | np05_notquitecircle | np1_octagon | np10_square | np100_stillsquare
 -----------+-------------------+---------------------+-------------+---------------+-------------------
         49 |                33 |                  17 |           9 |             5 |                 5
 ST_SimplifyVW
 描述
 返回给定几何对象的简化版本，使用Visvalingam-Whyatt算法生成该几何对象的简化表示。

 函数声明
 geometry ST_SimplifyVW(geometry geomA, float tolerance);
 使用示例
 select ST_AsText(ST_SimplifyVW(geom,30)) simplified
 FROM (SELECT  'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) As foo;
 -result
  simplified
 ------------------------------
 LINESTRING(5 2,7 25,10 10)
 ST_ChaikinSmoothing
 描述
 使用Chaikin算法对给定的几何对象进行平滑处理，返回处理结果。

 函数声明
 geometry ST_ChaikinSmoothing(geometry geom, integer nIterations = 1, boolean preserveEndPoints = false);
 使用示例
 select ST_AsText(ST_ChaikinSmoothing(geom)) smoothed
 FROM (SELECT  'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) As foo;
 ┌───────────────────────────────────────────┐
 │                 smoothed                  │
 ├───────────────────────────────────────────┤
 │ POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2)) │
 └───────────────────────────────────────────┘
 ST_FilterByM
 描述
 将给定几何对象的顶点按M值过滤，返回满足过滤条件的顶点构成的几何对象。

 函数声明
 geometry ST_FilterByM(geometry geom, double precision min, double precision max = null, boolean returnM = false);
 使用示例
 SELECT ST_AsText(ST_FilterByM(geom,30)) simplified
 FROM (SELECT  ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry) geom) As foo;
 -result
          simplified
 ----------------------------
  LINESTRING(5 2,7 25,10 10)
 ST_SetEffectiveArea
 描述
 计算给定几何对象每个顶点的有效面积，并将结果存储为此顶点的M坐标值。

 函数声明
 geometry ST_SetEffectiveArea(geometry geomA, float threshold = 0, integer set_area = 1);
 使用示例
 select ST_AsText(ST_SetEffectiveArea(geom)) all_pts, ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30
 FROM (SELECT  'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) As foo;
 -result
  all_pts | thrshld_30
 -----------+-------------------+
 LINESTRING M (5 2 3.40282346638529e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 3.40282346638529e+38) | LINESTRING M (5 2 3.40282346638529e+38,7 25 49.5,10 10 3.40282346638529e+38)
 ST_Split
 描述
 返回给定几何对象input，被另一个几何对象blade切割产生的结果，用GeometryCollection表示。

 函数声明
 geometry ST_Split(geometry input, geometry blade);
 使用示例
 -- this creates a geometry collection consisting of the 2 halves of the polygon
 -- this is similar to the example we demonstrated in ST_BuildArea
 SELECT ST_Split(circle, line)
 FROM (SELECT
     ST_MakeLine(ST_MakePoint(10, 10),ST_MakePoint(190, 190)) As line,
     ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) As circle) As foo;
 -- result --
  GEOMETRYCOLLECTION(POLYGON((150 90,149.039264020162 80.2454838991936,146.193976625564 70.8658283817455,..), POLYGON(..)))
 -- To convert to individual polygons, you can use ST_Dump or ST_GeometryN
 SELECT ST_AsText((ST_Dump(ST_Split(circle, line))).geom) As wkt
 FROM (SELECT
     ST_MakeLine(ST_MakePoint(10, 10),ST_MakePoint(190, 190)) As line,
     ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) As circle) As foo;
 -- result --
 wkt
 ---------------
 POLYGON((150 90,149.039264020162 80.2454838991936,..))
 POLYGON((60.1371179574584 60.1371179574584,58.4265193848728 62.2214883490198,53.8060233744357 ..))
 ST_SymDifference
 描述
 返回给定几何对象A和B中不相交的部分。

 函数声明
 geometry ST_SymDifference(geometry  geomA, geometry  geomB);
 使用示例
 --Safe for 2d - symmetric difference of 2 linestrings
 SELECT ST_AsText(
     ST_SymDifference(
         ST_GeomFromText('LINESTRING(50 100, 50 200)'),
         ST_GeomFromText('LINESTRING(50 50, 50 150)')
     )
 );
 st_astext
 ---------
 MULTILINESTRING((50 150,50 200),(50 50,50 100))
 ST_Subdivide
 描述
 将给定的几何对象切分成一系列几何对象，使得每个一对象都可以用不多于给定数目的顶点来表示。

 函数声明
 setof geometry ST_Subdivide(geometry geom, integer max_vertices=256);
 使用示例
 -- Subdivide complex geometries in table, in place
 with complex_areas_to_subdivide as (
     delete from polygons_table
     where ST_NPoints(geom) > 255
     returning id, column1, column2, column3, geom
 )
 insert into polygons_table (fid, column1, column2, column3, geom)
     select
         fid, column1, column2, column3,
         ST_Subdivide(geom, 255) as geom
     from complex_areas_to_subdivide;
 ST_SwapOrdinates
 描述
 将给定的几何对象中坐标点的指定坐标值交换，ords参数是两个字符，代表要交换的坐标值，包含：x, y, z和m。

 函数声明
 geometry ST_SwapOrdinates(geometry geom, cstring ords);
 使用示例
 -- Scale M value by 2
 SELECT ST_AsText(
   ST_SwapOrdinates(
     ST_Scale(
       ST_SwapOrdinates(g,'xm'),
       2, 1
     ),
   'xm')
 ) FROM ( SELECT 'POINT ZM (0 0 0 2)'::geometry g ) foo;
      st_astext
 --------------------
  POINT ZM (0 0 0 4)
 ST_Union
 描述
 返回给定几何对象的并集。

 函数声明
 geometry ST_Union(geometry set g1field);
 geometry ST_Union(geometry g1, geometry g2);
 geometry ST_Union(geometry[] g1_array);
 使用示例
 -- Aggregate example
 SELECT stusps,
        ST_Multi(ST_Union(f.the_geom)) as singlegeom
      FROM sometable As f
 GROUP BY stusps
 SELECT ST_AsText(ST_Union(ST_GeomFromText('POINT(1 2)'),
     ST_GeomFromText('POINT(-2 3)') ) )
 st_astext
 ----------
 MULTIPOINT(-2 3,1 2)
 SELECT ST_AsText(ST_Union(ST_GeomFromText('POINT(1 2)'),
         ST_GeomFromText('POINT(1 2)') ) );
 st_astext
 ----------
 POINT(1 2)
 --3d example - sort of supports 3d (and with mixed dimensions!)
 SELECT ST_AsEWKT(st_union(the_geom))
 FROM
 (SELECT ST_GeomFromEWKT('POLYGON((-7 4.2,-7.1 4.2,-7.1 4.3,
 -7 4.2))') as the_geom
 UNION ALL
 SELECT ST_GeomFromEWKT('POINT(5 5 5)') as the_geom
 UNION ALL
     SELECT ST_GeomFromEWKT('POINT(-2 3 1)') as the_geom
 UNION ALL
 SELECT ST_GeomFromEWKT('LINESTRING(5 5 5, 10 10 10)') as the_geom ) as foo;
 st_asewkt
 ---------
 GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 5,-7.1 4.2 5,-7.1 4.3 5,-7 4.2 5)));
 --3d example not mixing dimensions
 SELECT ST_AsEWKT(st_union(the_geom))
 FROM
 (SELECT ST_GeomFromEWKT('POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,
 -7 4.2 2))') as the_geom
 UNION ALL
 SELECT ST_GeomFromEWKT('POINT(5 5 5)') as the_geom
 UNION ALL
     SELECT ST_GeomFromEWKT('POINT(-2 3 1)') as the_geom
 UNION ALL
 SELECT ST_GeomFromEWKT('LINESTRING(5 5 5, 10 10 10)') as the_geom ) as foo;
 st_asewkt
 ---------
 GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2)))
 --Examples using new Array construct
 SELECT ST_Union(ARRAY(SELECT the_geom FROM sometable));
 SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'),
             ST_GeomFromText('LINESTRING(3 4, 4 5)')])) As wktunion;
 --wktunion---
 MULTILINESTRING((3 4,4 5),(1 2,3 4))
 ST_VoronoiLines
 描述
 返回由给定几何对象的顶点构造的沃罗诺伊图的边界线。

 函数声明
 geometry ST_VoronoiLines( g1 geometry , tolerance float8 , extend_to geometry );
 使用示例
 SELECT ST_VoronoiLines(geom, 30) As geom
 FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry As geom ) As g
 -- ST_AsText output
 MULTILINESTRING((135.555555555556 270,36.8181818181818 92.2727272727273),(36.8181818181818 92.2727272727273,-110 43.3333333333333),(230 -45.7142857142858,36.8181818181818 92.2727272727273))
 ST_VoronoiPolygons
 描述
 返回由给定几何对象的顶点构造的沃罗诺伊图的各个单元（作为Polygon类型）。

 函数声明
 geometry ST_VoronoiPolygons(g1 geometry , tolerance float8 , extend_to geometry);
 使用示例
 SELECT
     ST_VoronoiPolygons(geom) As geom
 FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::geometry As geom ) As g;
  -- ST_AsText output
 GEOMETRYCOLLECTION(POLYGON((-110 43.3333333333333,-110 270,100.5 270,59.3478260869565 132.826086956522,36.8181818181818 92.2727272727273,-110 43.3333333333333)),
 POLYGON((55 -90,-110 -90,-110 43.3333333333333,36.8181818181818 92.2727272727273,55 79.2857142857143,55 -90)),
 POLYGON((230 47.5,230 -20.7142857142857,55 79.2857142857143,36.8181818181818 92.2727272727273,59.3478260869565 132.826086956522,230 47.5)),POLYGON((230 -20.7142857142857,230 -90,55 -90,55 79.2857142857143,230 -20.7142857142857)),
 POLYGON((100.5 270,230 270,230 47.5,59.3478260869565 132.826086956522,100.5 270)))

 ============
