第1章 安装Nginx及第三方模块	1
1．1 使用包管理器安装Nginx	2
1．1．1 CentOS	2
1．1．2 Debian	3
1．2 从源代码安装Nginx	3
1．2．1 准备编译环境	4
1．2．2 从源代码编译	4
1．3 配置web或者mail服务器	6
1．3．1 邮件代理的配置选项	6
1．3．2 指定路径的配置选项	7
1．4 使用各种模块	8
1．5 查找并安装第三方模块	11
1．6 组合在一起	12
1．7 总结	14

第2章 配置指南	15
2．1 基本配置格式	15
2．2 Nginx的全局配置参数	16
2．3 使用include文件	17
2．4 Http的server部分	18
2．4．1 客户端指令	18
2．4．2 文件I/O指令	19
2．4．3 Hash指令	20
2．4．4 Socket指令	21
2．4．5 示例配置文件	22
2．5 虚拟server部分	22
2．6 Locations——wheve，when，how	26
2．7 mail的server部分	28
2．8 完整的样本配置文件	30
2．9 总结	31

第3章 使用mail模块	33
3．1 基本代理服务	33
3．1．1 POP3服务	35
3．1．2 IMAP服务	36
3．1．3 SMTP服务	36
3．1．4 使用SSL/TLS	37
3．1．5 完整的mail示例	40
3．2 认证服务	42
3．3 与Memcached结合	49
3．4 解释日志文件	52
3．5 操作系统的限制	54
3．6 总结	55

第4章 Nginx作为反向代理	57
4．1 反向代理简介	58
4．1．1 代理模块	59
4．1．2 upstream模块	64
4．2 upstream服务器的类型	67
4．2．1 单个upstream服务器	67
4．2．2 多个upstream服务器	69
4．2．3 非Http型upstream服务器	70
4．3 将if配置转换为一个更现代的解释	72
4．4 使用错误文件来处理upstream的问题	76
4．5 确定客户端的真实IP地址	78
4．6 总结	78

第5章 反向代理高级话题	81
5．1 实现安全隔离	82
5．1．1 使用SSL对流量进行加密	82
5．1．2 使用SSL进行客户端身份验证	84
5．1．3 基于原始IP地址阻止流量	86
5．2 孤立应用程序的扩展	89
5．3 反向代理服务器的性能调优	92
5．3．1 缓冲	92
5．3．2 缓存	94
5．3．3 压缩	100
5．4 总结	103

第6章 Nginx Http服务器	105
6．1 Nginx的系统结构	106
6．2 Http的核心模块	106
6．2．1 server	107
6．2．2 日志	108
6．2．3 文件查找	111
6．2．4 名字解析	113
6．2．5 客户端交互	115
6．3 使用limit指令防止滥用	117
6．4 约束访问	121
6．5 流媒体文件	126
6．6 预定义变量	127
6．7 使用Nginx和PHP-FPM	129
6．8 将Nginx和uWSGI连接在一起工作	141
6．9 总结	143

第7章 Nginx的开发	145
7．1 缓存集成	145
7．1．1 应用程序没有缓存	146
7．1．2 使用数据库缓存	148
7．1．3 使用文件做缓存	150
7．2 动态修改内容	154
7．2．1 addition模块	154
7．2．2 sub模块	155
7．2．3 xslt模块	156
7．3 使用服务器端包含SSI	157
7．4 在Nginx中的决策	159
7．5 创建安全链接	163
7．6 生成图像	165
7．7 跟踪网站的访问者	169
7．8 防止意外的代码执行	170
7．9 总结	171

第8章 故障排除技巧	173
8．1 分析日志文件	173
8．1．1 错误日志文件格式	174
8．1．2 错误日志文件条目实例	175
8．2 配置高级日志记录	178
8．2．1 调试日志记录	178
8．2．2 使用访问日志文件进行调试	185
8．3 常见的配置错误	188
8．3．1使用if取代try_files	188
8．3．2 使用if作为主机名切换	189
8．3．3 不使用server部分的配置追求更好的效果	190
8．4 操作系统限制	192
8．4．1 文件描述符限制	192
8．4．2 网络限制	194
8．5 性能问题	195
8．6 使用Stub Status模块	197
8．7 总结	198

附录A 指令参考	199
附录B Rewrite规则指南	241
B．1 介绍rewrite模块	241
创建新的rewrite规则	245
B．2 转换Apache的重写规则	247
B．2．1 规则 #1：使用try_files替代目录和文件存在性检测	247
B．2．2 规则 #2：使用location替代匹配REQUEST_URI	247
B．2．3 规则 #3：使用server替代匹配R Http_HOST	248
B．2．4 规则 #4：变量检查使用if替代RewriteCond	250
B．3 总结	251
附录C Nginx的社区	253
C．1 邮件列表	253
C．2 IRC频道	254
C．3 Web资源	254
C．4 撰写好的bug报告	254
C．5 总结	255
附录D Solaris系统下的网络调优	257

1.1Nginx简介1
1.1.1Web服务器1
1.1.2Nginx概述2
1.2Linux操作系统3
1.2.1Linux的起源与发展3
1.2.2获取Linux系统4
1.3VMware虚拟机5
1.3.1什么是虚拟机5
1.3.2VMware安装CentOS6
1.3.3VMware快照功能11
1.3.4VMware克隆功能12
本章小结13
课后练习14
第2章基础知识15
2.1Linux入门15
2.1.1基本命令15
2.1.2目录结构18
2.1.3shell和终端19
2.1.4文件管理23
2.1.5vi编辑器26
2.1.6用户和权限29
2.2正则表达式36
2.2.1正则表达式概述36
2.2.2正则表达式入门37
2.2.3正则表达式语法规则39
2.2.4正则表达式应用案例42
2.3HTTP协议43
2.3.1HTTP概述43
2.3.2HTTP消息44
2.3.3HTTP请求消息46
2.3.4HTTP响应消息49
本章小结51
课后练习51
目录Nginx高性能Web服务器实战教程第3章Nginx的安装53
3.1Linux服务器搭建53
3.1.1最小化安装CentOS53
3.1.2网络配置58
3.1.3远程终端访问64
3.1.4安装必备软件68
3.2Linux环境下安装Nginx70
3.2.1获取Nginx70
3.2.2编译安装Nginx71
3.2.3Nginx的启动与停止74
3.2.4访问测试76
3.2.5后续操作77
3.3Windows环境下使用Nginx82
本章小结84
课后练习84
第4章Nginx基本配置86
4.1认识配置文件86
4.1.1配置文件结构86
4.1.2设置用户和组88
4.1.3自定义错误页90
4.2访问控制93
4.2.1权限控制指令93
4.2.2访问控制典型应用97
4.3日志文件101
4.3.1访问日志101
4.3.2错误日志104
4.3.3日志文件切割105
4.4虚拟主机107
4.4.1什么是虚拟主机107
4.4.2基于端口号配置虚拟主机107
4.4.3基于IP配置Nginx虚拟主机110
4.4.4基于域名配置虚拟主机113
4.4.5设置目录列表115
4.4.6子配置文件的引入117
本章小结119
课后练习119
第5章Web服务器搭建120
5.1Nginx+PHP环境120
5.1.1PHP的安装与使用120
5.1.2PHP与Nginx整合124
5.2Nginx+Apache环境132
5.2.1Apache的安装与使用132
5.2.2Apache的基本配置137
5.2.3Apache与PHP整合141
5.2.4Nginx+Apache动静分离143
5.3Nginx+Tomcat环境146
5.3.1Tomcat的安装与使用146
5.3.2Nginx+Tomcat动静分离150
5.4OpenResty环境150
5.4.1OpenResty的安装与使用151
5.4.2OpenResty开发入门153
本章小结156
课后练习156
第6章负载均衡与缓存158
6.1反向代理158
6.1.1代理与反向代理158
6.1.2反向代理服务配置159
6.2负载均衡162
6.2.1什么是负载均衡162
6.2.2负载均衡的配置163
6.3缓存配置168
6.3.1缓存实现原理169
6.3.2永久缓存配置169
6.3.3临时缓存配置171
6.3.4缓存清理配置174
6.4邮件服务177
6.4.1Nginx实现邮件服务178
6.4.2邮件服务配置178
本章小结181
课后练习181
第7章模块配置应用182
7.1模块概述182
7.1.1模块化结构设计182
7.1.2Nginx模块分类及作用182
7.1.3Nginx手册的使用184
7.2调试输出186
7.2.1调试输出的配置186
7.2.2常见的应用案例188
7.3查看响应状态与替换响应内容192
7.3.1安装所需模块192
7.3.2查看网站响应状态193
7.3.3替换网站响应内容193
7.4网页压缩传输195
7.4.1gzip压缩技术195
7.4.2网页压缩传输配置195
7.5重写与重定向198
7.5.1rewrite模块的简介198
7.5.2rewrite实现重写199
7.5.3rewrite实现重定向201
7.6防盗链的配置202
7.6.1图片防盗链202
7.6.2下载防盗链205
7.7配置HTTPS网站208
7.7.1什么是HTTPS208
7.7.2颁发认证证书208
7.7.3配置HTTPS网站211
本章小结212
课后练习212
第8章高可用负载均衡集群214
8.1Nginx配置优化214
8.1.1连接数优化214
8.1.2客户端请求限制217
8.1.3浏览器缓存优化219
8.2LNMP分布式集群220
8.2.1什么是集群220
8.2.2LNMP分布式部署221
8.2.3搭建NFS文件服务器229
8.2.4搭建MySQL数据库服务器234
8.2.5搭建Memcached缓存服务器238
8.2.6ThinkPHP项目部署241
8.3Nginx+Keepalived高可用方案247
8.3.1高可用方案概述247
8.3.2安装和配置Keepalived服务248
8.3.3使用Keepalived监控Nginx服务251

第1章 Nginx入门 9

1.1 关于Nginx 9

1.2 安装Nginx 13

1.3 配置Nginx 19

1.4 总结 30

第2章 Nginx开发准备 31

2.1 开发环境 31

2.2 目录结构 32

2.3 源码特点 34

2.4 使用C++ 35

2.5 C++包装类 38

2.6 总结 40

第3章 Nginx基础设施 41

3.1 头文件 41

3.2 整数类型 42

3.3 错误处理 47

3.4 内存池 50

3.5 字符串 58

3.6 时间与日期 64

3.7 运行日志 70

3.8 总结 74

第4章 Nginx高级数据结构 77

4.1 动态数组 77

4.2 单向链表 83

4.3 双端队列 90

4.4 红黑树 101

4.5 缓冲区 108

4.6 数据块链 113

4.7 键值对 120

4.8 总结 121

第5章 Nginx开发综述 123

5.1 最简单的模块 123

5.2 开发基本流程 131

5.3 编译脚本 134

5.4 总结 137

第6章 Nginx模块体系 139

6.1 模块架构 139

6.2 配置解析 152

6.3 源码分析 168

6.4 C++封装 172

6.5 C++开发模块 180

6.6 总结 187

第7章 Nginx HTTP框架综述 191

7.1 框架简介 191

7.2 处理引擎 198

7.3 过滤引擎 205

7.4 源码分析 211

7.5 C++封装 213

7.6 总结 219

第8章 Nginx HTTP请求处理 221

8.1 状态码 221

8.2 请求结构体 222

8.3 请求行 223

8.4 请求头 225

8.5 请求体 226

8.6 响应头 227

8.7 响应体 229

8.8 源码分析 229

8.9 C++封装 232

8.10 开发handler模块 241

8.11 开发filter模块 246

8.12 总结 253

第9章 Nginx HTTP请求转发 255

9.1 框架简介 255

9.2 请求转发机制 261

9.3 负载均衡机制 266

9.4 源码分析 275

9.5 C++封装 281

9.6 开发upstream模块 288

9.7 开发load-balance模块 294

9.8 总结 299

第10章 Nginx HTTP子请求 301

10.1 子请求简介 301

10.2 子请求运行机制 307

10.3 C++封装 314

10.4 数据回传模块 317

10.5 在模块里使用子请求 323

10.6 总结 328

第11章 Nginx变量 329

11.1 结构定义 329

11.2 运行机制 332

11.3 复杂变量 334

11.4 C++封装 335

11.5 在模块里使用变量 341

11.6 在模块里使用复杂变量 343

11.7 总结 345

第12章 Nginx辅助设施 347

12.1 摘要算法 347

12.2 编码和解码 352

12.3 正则表达式 356

12.4 共享内存 356

12.5 总结 359

第13章 Nginx进程机制 361

13.1 基本系统调用 361

13.2 进程系统调用 362

13.3 信号系统调用 364

13.4 结构定义 365

13.5 全局变量 368

13.6 启动过程 370

13.7 信号处理 377

13.8 单进程模式 379

13.9 多进程模式 382

13.10 总结 390

第14章 Nginx事件机制 393

14.1 基本系统调用 393

14.2 socket系统调用 395

14.3 epoll系统调用 399

14.4 结构定义 403

14.5 定时器 415

14.6 模块体系 419

14.7 全局变量 425

14.8 运行机制 427

14.9 总结 452

第15章 Nginx多线程机制 455

15.1 eventfd系统调用 455

15.2 pthread系统调用 456

15.3 结构定义 457

15.4 事件通知 460

15.5 运行机制 463

15.6 在模块里使用多线程 469

15.7 总结 474

第16章 Nginx Stream机制 477

16.1 模块体系 477

16.2 监听端口 483

16.3 处理引擎 491

16.4 过滤引擎 495

16.5 运行机制 496

16.6 开发stream模块 507

16.7 总结 514

第17章 Nginx HTTP机制 517

17.1 结构定义 517

17.2 初始化连接 519

17.3 执行引擎 528

17.4 处理请求体 534

17.5 发送数据 540

17.6 结束请求 543

17.7 总结 548

第18章 Nginx与设计模式 551

18.1 设计模式简介 551

18.2 框架级别的模式 551

18.3 业务级别的模式 553

18.4 代码级别的模式 554

18.5 总结 556

第19章 OpenResty开发 557

19.1 简介 557

19.2 Lua语言 566

19.3 LuaJIT 577

19.4 Lua模块 581

19.5 功能接口 585

19.6 应用实例 594

19.7 Stream Lua模块 598

19.8 lua-resty库 601

19.9 总结 603

第20章 结束语 605

20.1 本书的遗憾 605

20.2 下一步 605

20.3 临别赠言 606

附录A 推荐书目 607

附录B GDB调试简介 609

附录C Nginx C++模块简介 611

附录D Nginx的字符串格式化 613

附录E nginScript简介 615

第1章　Nginx高效服务器 2
1.1　Nginx的特点 2
1.2　Nginx的安装 3
1.3　configure命令参数 7
1.4　小结 12
第2章　数据库的基本操作 13
2.1　Nginx应用中的数据库 13
2.2　MySQL关系型数据库 15
2.2.1　yum安装方法 16
2.2.2　使用mysql测试服务 18
2.2.3　MySQL文件分布 19
2.2.4　数据库操作 19
2.3　Redis内存数据库 22
2.3.1　Redis安装 22
2.3.2　启动Redis服务 23
2.3.3　Redis 配置 23
2.3.4　参数说明 26
2.3.5　数据类型 29
2.4　PostgreSQL关系型数据库 31
2.5　Memcached内存数据库 33
2.5.1　Memcached安装 34
2.5.2　连接编辑 34
2.5.3　管理Memcached服务 35
2.5.4　Memcached命令 37
2.6　MongoDB分布式NoSQL数据库 42
2.6.1　MongoDB安装 43
2.6.2　mongod.conf配置说明 45
2.7　小结 48
第3章　OpenResty 49
3.1　OpenResty：概述 49
3.2　OpenResty的组成 50
3.3　OpenResty的安装 52
3.4　Nginx多实例 54
3.5　小结 54
第4章　Nginx核心技术 55
4.1　Nginx设计目标 55
4.2　Nginx架构 57
4.2.1　事件驱动 57
4.2.2　异步多阶段处理 59
4.2.3　模块化设计 61
4.2.4　管理进程、工作进程设计 63
4.2.5　内存池 65
4.2.6　连接池 66
4.2.7　时间缓存 66
4.2.8　延迟关闭 67
4.2.9　跨平台 67
4.2.10　HTTP模块管道过滤模式 67
4.2.11　keepalive 68
4.2.12　pipeline 69
4.3　小结 69
第5章　Nginx的工作流程 70
5.1　Nginx的启动流程 70
5.2　管理进程的工作流程 72
5.3　工作进程的工作流程 75
5.4　配置加载流程 76
5.5　HTTP框架初始化流程 79
5.6　HTTP模块调用流程 81
5.7　HTTP请求处理流程 82
5.8　小结 83
第二部分　Lua脚本语言
第6章　Lua教程 86
6.1　Lua基础 86
6.1.1　Lua的特性 86
6.1.2　Lua的应用场景 87
6.1.3　安装Lua环境 87
6.2　Lua基本语法 88
6.2.1　第一个Lua程序 88
6.2.2　注释 89
6.2.3　标识符 90
6.2.4　关键词 90
6.2.5　全局变量 90
6.3　Lua的数据类型 90
6.4　Lua变量 96
6.4.1　赋值语句 96
6.4.2　索引 97
6.5　Lua循环 98
6.6　Lua流程控制 98
6.7　Lua函数 99
6.7.1　函数的定义 99
6.7.2　多返回值 100
6.7.3　可变参数 101
6.8　Lua运算符 101
6.8.1　算术运算符 102
6.8.2　关系运算符 102
6.8.3　逻辑运算符 103
6.8.4　其他运算符 104
6.8.5　运算符的优先级 105
6.9　Lua字符串 106
6.10　Lua数组 107
6.10.1　一维数组 107
6.10.2　多维数组 108
6.11　Lua迭代器 109
6.11.1　泛型for迭代器 109
6.11.2　无状态的迭代器 110
6.11.3　多状态的迭代器 111
6.12　Lua表 112
6.13　Lua模块与包 113
6.13.1　require函数 114
6.13.2　加载机制 115
6.13.3　C包 115
6.14　Lua元表 116
6.14.1　_index元方法 117
6.14.2　_newindex元方法 118
6.14.3　为表添加运算符 119
6.14.4　_call元方法 119
6.14.5　_tostring元方法 120
6.15　Lua协同程序 121
6.15.1　基本语法 121
6.15.2　生产者–消费者问题 124
6.16　Lua错误处理 125
6.16.1　语法错误 125
6.16.2　运行错误 125
6.16.3　错误处理 126
6.16.4　error函数 126
6.16.5　pcall、xpcall、debug 127
6.17　Lua调试 128
6.18　Lua垃圾回收 130
6.19　Lua面向对象 131
6.19.1　Lua中面向对象 132
6.19.2　Lua继承 134
6.20　Lua数据库访问 136
6.21　小结 137
第7章　Lua通用库 138
7.1　字符串库 138
7.2　表库 141
7.3　文件I/O库 143
7.3.1　简单模式 144
7.3.2　完全模式 145
7.3.3　其他方法 146
7.4　数学库 147
7.5　操作系统库 150
7.6　小结 151
第三部分　Nginx开发技术
第8章　JSON数据交换格式 154
8.1　什么是JSON 154
8.2　JSON转换为JavaScript对象 155
8.3　JSON与XML的比较 155
8.4　JSON语法规则 156
8.5　格式化 157
8.6　小结 158
第9章　nginx.conf文件配置 159
9.1　默认nginx.conf文件 159
9.2　nginx.conf示例 162
9.3　全局配置与顶层配置块 166
9.3.1　main全局配置 166
9.3.2　events配置块 170
9.3.3　http服务器配置块 172
9.3.4　ngx_http_core_module变量 194
9.3.5　stream 195
9.4　中文版nginx.conf 201
9.5　小结 204
第10章　Nginx下Lua实现机制 206
10.1　ngx_lua原理 206
10.2　HTTP请求的处理阶段 209
10.3　ngx_lua的处理阶段 210
10.4　Lua阶段解析 212
10.4.1　init_by_lua 212
10.4.2　init_worker_by_lua 213
10.4.3　set_by_lua 214
10.4.4　rewrite_by_lua 216
10.4.5　access_by_lua 217
10.4.6　content_by_lua 218
10.4.7　header_filter_by_lua 220
10.4.8　body_filter_by_lua 220
10.4.9　log_by_lua 220
10.4.10　balancer_b

第1章　安装Nginx及第三方模块 1
1．1　使用包管理器安装Nginx 2
1．1．1　在Centos上安装Nginx 2
1．1．2　在Debian上安装Nginx 3
1．2　从源代码安装Nginx 3
1．2．1　准备编译环境 3
1．2．2　从源代码编译 4
1．2．3　为Web或者Mail服务器
配置Nginx 5
1．2．4　邮件代理的配置选项 6
1．2．5　指定路径的配置选项 6
1．3　配置SSL支持 7
1．4　使用各种模块 7
禁用不再使用的模块 9
1．5　查找并安装第三方模块 10
1．6　添加对Lua的支持 11
1．7　组合在一起 11
1．8　小结 13
第2章　配置指南 14
2．1　基本配置格式 14
2．2　Nginx全局配置参数 15
2．3　使用include文件 16
2．4　HTTP的server部分 17
2．4．1　客户端指令 17
2．4．2　文件I/O指令 18
2．4．3　Hash指令 19
2．4．4　Socket指令 19
2．4．5　示例配置文件 20
2．5　虚拟服务器部分 20
2．6　Locations—where，when，how 24
2．7　完整的示例配置文件 26
2．8　小结 27
第3章　使用mail模块 29
3．1　基本代理服务 29
3．1．1　mail的server配置部分 30
3．1．2　POP3服务 32
3．1．3　IMAP服务 33
3．1．4　SMTP服务 33
3．1．5　使用SSL/TLS 34
3．1．6　完整的mail示例 37
3．2　认证服务 38
3．3　与memcached结合 46
3．4　解释日志文件 48
3．5　操作系统限制 50
3．6　小结 51
第4章　Nginx作为反向代理 52
4．1　反向代理简介 53
4．2　代理模块 54
4．3　带有cookie的遗留应用程序 57
4．4　upstream模块 58
4．5　保持活动连接 59
4．6　上游服务器的类型 61
4．7　单个上游服务器 61
4．8　多个上游服务器 62
4．9　非HTTP型上游服务器 63
4．9．1　Memcached上游服务器 63
4．9．2　FastCGI上游服务器 64
4．9．3　SCGI上游服务器 65
4．9．4　uWSGI上游服务器 65
4．10　负载均衡 65
负载均衡算法 65
4．11　将if配置转换为一个更现代的
解释 66
4．12　使用错误文件处理上游服务器
问题 70
4．13　确定客户端真实的IP地址 72
4．14　小结 72
第5章　反向代理高级话题 73
5．1　安全隔离 74
5．1．1　使用SSL对流量进行加密 74
5．1．2　使用SSL进行客户端身份
验证 76
5．1．3　基于原始IP地址阻止流量 78
5．2　孤立应用程序组件的扩展 80
5．3　反向代理服务器的性能调优 83
5．3．1　缓冲数据 84
5．3．2　缓存数据 86
5．3．3　存储数据 90
5．3．4　压缩数据 91
5．4　小结 94
第6章　Nginx HTTP服务器 95
6．1　Nginx的系统架构 95
6．2　HTTP核心模块 96
6．2．1　server指令 97
6．2．2　Nginx中的日志 98
6．2．3　查找文件 101
6．2．4　域名解析 103
6．2．5　客户端交互 104
6．3　使用limit指令防止滥用 106
6．4　约束访问 110
6．5　流媒体文件 114
6．6　预定义变量 115
6．7　SPDY和HTTP/2 117
6．8　使用Nginx和PHP-FPM 118
6．9　一个Drupal的配置示例 121
6．9　将Nginx和uWSGI结合 129
一个Django的配置示例 129
6．10　小结 131
第7章　Nginx的开发 133
7．1　集成缓存 133
7．1．1　应用程序没有缓存 134
7．1．2　使用数据库缓存 135
7．1．3　使用文件系统做缓存 138
7．2　动态修改内容 141
7．2．1　使用addition模块 141
7．2．2　sub模块 142
7．2．3　xslt模块 143
7．3　使用服务器端包含SSI（Server
Side Include） 144
7．4　Nginx中的决策 146
7．5　创建安全链接 150
7．6　生成图像 152
7．7　跟踪网站访问者 155
7．8　防止意外代码执行 156
7．9　小结 157
第8章　在Nginx中集成Lua 159
8．1　ngx_lua模块 159
8．2　集成Lua 160
8．3　使用Lua记录日志 163
8．4　小结 163
第9章　故障排除技巧 164
9．1　分析日志文件 164
9．1．1　错误日志文件格式 164
9．1．2　错误日志文件条目实例 166
9．2　配置高级日志记录 168
9．2．1　调试日志记录 169
9．2．2　在运行时切换二进制运行
文件 169
9．2．3　使用访问日志文件进行
调试 175
9．3　常见的配置错误 177
9．3．1　使用if取代try_files 178
9．3．2　使用if作为主机名切换 179
9．3．3　不使用server部分的配置追求
更好的效果 180
9．4　操作系统限制 181
9．4．1　文件描述符限制 181
9．4．2　网络限制 183
9．5　性能问题 184
9．6　使用Stub Status模块 186
9．7　小结 187
附录A　指令参考 189
附录B　Rewrite规则指南 224
附录C　Nginx社区 236
附录D　Solaris系统下的网络调优 239

第1章Nginx学前必知1
1.1HTTP请求报文1
1.2HTTP响应报文2
1.3安装Nginx2
1.4支持HTTPS4
1.5添加模块4
1.6小结4
第2章基础配置5
2.1Nginx指令和指令块5
2.2Nginx基本配置说明6
2.2.1Main配置6
2.2.2与客户端有关的配置7
2.2.3server块7
2.2.4location块8
2.3include的使用9
2.4常见配置9
2.4.1常见配置注解10
2.4.2常见配置实战技巧11
2.5内置变量13
2.5.1常见内置变量13
2.5.2常见内置变量实战技巧15
2.6小结16
第3章强化基础配置17
3.1牢记Context标识17
3.2获取请求的IP地址18
3.2.1获取用户的真实IP地址18
3.2.2防止IP地址伪造19
3.2.3后端服务器对IP地址的需求19
3.3管理请求的行为20
3.3.1限制IP地址的访问20
3.3.2auth身份验证21
3.3.3利用LDAP服务加强安全22
3.3.4satisfy二选一的访问限制功能23
3.4proxy代理23
3.4.1proxy_pass请求代理规则24
3.4.2减少后端服务器的网络开销24
3.4.3控制请求头和请求体25
3.4.4控制请求和后端服务器的交互时间26
3.5upstream使用手册26
3.5.1代理多台服务器27
3.5.2故障转移28
3.5.3负载均衡29
3.5.4通过hash分片提升缓存命中率29
3.5.5利用长连接提升性能30
3.5.6利用resolver加速内部域名访问31
3.6rewrite使用手册32
3.6.1内部重定向32
3.6.2域名跳转33
3.6.3跳转POST请求34
3.6.4设置变量的值34
3.7限速白名单35
3.8日志36
3.8.1记录自定义变量36
3.8.2日志格式规范36
3.8.3日志存储37
3.9HTTP执行阶段38
3.10小结39
第4章常用模块精解40
4.1定制HTTP头信息40
4.1.1使用ngx_http_headers_module设置响应头40
4.1.2使用headers-more-nginx控制请求头和响应头43
4.2第三方模块set-misc-nginx45
4.2.1设置变量46
4.2.2防止SQL注入46
4.2.3字符串非转义和转义47
4.2.4基于键值的集群分片48
4.2.5base编码48
4.2.6md5编码50
4.2.7生成随机数50
4.2.8本地时间的输出52
4.2.9实战经验52
4.3图片的处理53
4.3.1image_filter图片处理53
4.3.2采用渐进式方式打开JPEG图片55
4.3.3WebP格式56
4.3.4优化图片56
4.3.5实战经验：动态切图58
4.4TCP和UDP代理58
4.4.1代理配置说明58
4.4.2DNS服务的反向代理62
4.4.3MySQL集群代理配置62
4.4.4实战经验63
4.5常用模块介绍63
4.5.1基于访问IP地址跳转到对应城市63
4.5.2修改响应内容65
4.5.3零像素文件的生成及其作用66
4.5.4图片的防盗链67
4.6小结68
第5章缓存系统69
5.1缓存配置说明69
5.2控制缓存有效期71
5.3性能优化72
5.3.1缓存未命中的最佳实践72
5.3.2横向扩展最佳实践75
5.3.3避免硬盘I/O阻塞76
5.3.4集群模式77
5.4高可用方案77
5.5proxy_cache配置模板78
5.6小结81
第6章引入Lua82
6.1为什么要引入Lua82
6.2Lua和LuaJIT83
6.3环境搭建83
6.4Lua的数据类型84
6.5表达式89
6.6变量93
6.7流程控制95
6.8函数98
6.9模块100
6.10Lua常见操作102
6.11引入Lua的插曲104
6.12小结105
第7章Lua-Nginx-Module常用指令106
7.1Nginx和OpenResty106
7.2安装Ngx_Lua107
7.3牢记Context标识108
7.4Helloworld108
7.5避免I/O阻塞109
7.6定义模块搜索路径109
7.7读/写Nginx的内置变量110
7.8控制请求头111
7.9控制响应头113
7.10读取请求体116
7.11输出响应体121
7.12正则表达式124
7.13子请求130
7.14获取Nginx的环境变量135
7.15定时任务138
7.16常用指令142
7.17提升开发和测试效率149
7.18小结156
第8章Ngx_Lua的执行阶段157
8.1init_by_lua_block157
8.2init_worker_by_lua_block160
8.3set_by_lua_block165
8.4rewrite_by_lua_block168
8.5access_by_lua_block169
8.6content_by_lua_block170
8.8header_filter_by_lua_block172
8.9body_filter_by_lua_block173
8.10log_by_lua_block176
8.11Lua和ngx.ssl177
8.12Ngx_Lua执行阶段177
8.13小结180
第9章Nginx与数据库的交互181
9.1安装cjson181
9.2与MySQL交互183
9.3与Redis交互189
9.4与数据库交互的常见问题194
9.5小结198
第10章缓存利器199
10.1worker进程的共享内存200
10.2Lua模块下的共享内存209
10.3当前请求在各执行阶段间的数据共享213
10.4利用共享内存配置动态IP地址认证215
10.5缓存和数据库的交互218
10.6小结228
第11章动态管理upstream229
11.1实战需求分析230
11.2ngx_http_dyups_module230
11.3nginx-upsync-module233
11.4基于balancer_by_lua_block的灵活控制238
11.5小结239
第12章Nginx日志分析系统240
12.1实战需求分析240
12.2ngxtop实时分析241
12.3Flume方案的日志分析243
12.4智能化nginx_log_analysis244
12.5lua-resty-logger-socket传输方案246
12.6时序数据库InfluxDB249
12.7利用lua-resty-http实现API交互254
12.8提升InfluxDB性能255
12.9小结255
第13章静态容灾系统256
13.1荆棘之路257
13.2设计之路259
13.3架构流程图261
13.4核心代码解说264
13.5静态容灾的智能关闭方案267
13.6小结269
第14章深入挖掘反向代理270
14.1验证码防御中心270
14.2鉴权管理中心272
14.3并行访问274
14.4小结281
第15章爬虫282
15.1区分搜索引擎爬虫和恶意爬虫282
15.2应对搜索引擎爬虫284
15.3应对恶意爬虫288
15.4小插曲——使用假数据迷惑恶意爬虫290
15.5小结291
第16章性能分析和优化292
16.1性能分析场景搭建292
16.2流量复制295
16.3各项指标分析和优化建议295
16.4检查全局变量305
16.5小结305
第17章值得拥有的OpenResty306
17.1OPM307
17.2使用DNS提升访问效率309
17.3TCP和UDP服务310
17.4多层级缓存312
17.5lua-resty-core扩展313
17.6字符串分割313
17.7Nginx进程管理313
17.8全局唯一标识符UUID315
17.9“全家福”awesome-resty316
17.10OpenResty，未来！316
第18章开发环境下的常见问题317
18.1被截断的响应体317
18.2“邪恶”的if317
18.3“贪婪”的正则匹配318
18.4规范HTTP状态码319
18.5规范URL319
18.6proxy_set_header的误操作320
18.7开发环境下的证书问题320
18.8深层次的错误重定向323
18.9压测环境下的限速和短连接323
18.10小结323

第1章 Nginx初探
1.1 Nginx的历史
1.2 常见服务器产品介绍
1.2.1 Apache服务器
1.2.2 Microsoft IIS
1.2.3 Tomcat服务器
1.2.4 Lighttpd服务器
1.2.5 Nginx诞生记
1.2.6 版本变更大事记
1.3 Nginx的功能特性
1.3.1 基本HTTP服务
1.3.2 高级HTTP服务
1.3.3 邮件代理服务
1.4 常用功能介绍
1.4.1 HTTP代理和反向代理
1.4.2 负载均衡
1.4.3 Web缓存
1.5 本章小结

第2章 Nginx服务器的安装部署
2.1 如何获取Nginx服务器安装文件
2.1.1 获取新版本的Nginx服务器
2.1.2 获取Nginx服务器的历史版本
2.2 安装Nginx服务器和基本配置
2.2.1 Windows版本的安装
2.2.2 Linux版本的编译和安装：准备工作
2.2.3 Linux版本的编译和安装：Nginx软件的自动脚本
2.2.4 Linux版本的编译和安装：Nginx源代码的编译和安装
2.3 Nginx服务的启停控制
2.3.1 Nginx服务的信号控制
2.3.2 Nginx服务的启动
2.3.3 Nginx服务的停止
2.3.4 Nginx服务的重启
2.3.5 Nginx服务器的升级
2.4 Nginx服务器基础配置指令
2.4.1 nginx.conf文件的结构
2.4.2 配置运行Nginx服务器用户（组）
2.4.3 配置允许生成的worker process数
2.4.4 配置Nginx进程PID存放路径
2.4.5 配置错误日志的存放路径
2.4.6 配置文件的引入
2.4.7 设置网络连接的序列化
2.4.8 设置是否允许同时接收多个网络连接
2.4.9 事件驱动模型的选择
2.4.10 配置最大连接数
2.4.11 定义MIME-Type
2.4.12 自定义服务日志
2.4.13 配置允许sendfile方式传输文件
2.4.14 配置连接超时时间
2.4.15 单连接请求数上限
2.4.16 配置网络监听
2.4.17 基于名称的虚拟主机配置
2.4.18 基于IP的虚拟主机配置
2.4.19 配置location块
2.4.20 配置请求的根目录
2.4.21 更改location的URI
2.4.22 设置网站的默认首页
2.4.23 设置网站的错误页面
2.4.24 基于IP配置Nginx的访问权限
2.4.25 基于密码配置Nginx的访问权限
2.5 Nginx服务器基础配置实例
2.5.1 测试myServer1的访问
2.5.2 测试myServer2的访问
2.6 本章小结

第3章 Nginx服务器架构初探
3.1 模块化结构
3.1.1 什么是“模块化设计”
3.1.2 Nginx模块化结构
3.2 Nginx服务器的Web请求处理机制
3.2.1 多进程方式
3.2.2 多线程方式
3.2.3 异步方式
3.2.4 Nginx服务器如何处理请求
3.2.5 Nginx服务器的事件处理机制
3.3 Nginx服务器的事件驱动模型
3.3.1 事件驱动模型概述
3.3.2 Nginx中的事件驱动模型
3.3.3 select库
3.3.4 poll库
3.3.5 epoll库
3.3.6 rtsig模型
3.3.7 其他事件驱动模型
3.4 设计架构概览
3.3.1 Nginx服务器架构
3.3.2 Nginx服务器的进程
3.3.3 进程交互
3.3.4 Run Loops事件处理循环模型
3.5 本章小结

第4章 Nginx服务器的高级配置
4.1 针对IPv4的内核7个参数的配置优化
4.2 针对CPU的Nginx配置优化的2个指令
4.3 与网络连接相关的配置的4个指令
4.4 与事件驱动模型相关的配置的8个指令
4.5 本章小结

第5章 Nginx服务器的Gzip压缩
5.1 由ngx_http_gzip_module模块处理的9个指令
5.2 由ngx_http_gzip_static_module模块处理的指令
5.3 由ngx_http_gunzip_module模块处理的2个指令
5.4 Gzip压缩功能的使用
5.4.1 Gzip压缩功能综合配置实例
5.4.2 Gzip压缩功能与IE6浏览器运行脚本的兼容问题
5.4.3 Nginx与其他服务器交互时产生的Gzip压缩功能相关问题
5.5 本章小结

第6章 Nginx服务器的Rewrite功能
6.1 Nginx后端服务器组的配置的5个指令
6.2 Rewrite功能的配置
6.2.1 “地址重写”与“地址转发”
6.2.2 Rewrite规则
6.2.3 if指令
6.2.4 break指令
6.2.5 rewrite指令
6.2.6 rewrite_log指令
6.2.7 set指令
6.2.8 uninitialized_variable_warn指令
6.2.9 Rewrite常用全局变量
6.3 Rewrite的使用
6.3.1 域名跳转
6.3.2 域名镜像
6.3.3 独立域名
6.3.4 目录自动添加“/”
6.3.5 目录合并
6.3.6 防盗链
6.4 本章小结

第7章 Nginx服务器的代理服务
7.1 正向代理与反向代理的概念
7.2 Nginx服务器的正向代理服务
7.2.1 Nginx服务器正向代理服务的配置的3个指令
7.2.2 Nginx服务器正向代理服务的使用
7.3 Nginx服务器的反向代理服务
7.3.1 反向代理的基本设置的21个指令
7.3.2 Proxy Buffer的配置的7个指令
7.3.3 Proxy Cache的配置的12个指令
7.4 Nginx服务器的负载均衡
7.4.1 什么是负载均衡
7.4.2 Nginx服务器负载均衡配置
7.4.3 配置实例一：对所有请求实现一般轮询规则的负载均衡
7.4.4 配置实例二：对所有请求实现加权轮询规则的负载均衡
7.4.5 配置实例三：对特定资源实现负载均衡
7.4.6 配置实例四：对不同域名实现负载均衡
7.4.7 配置实例五：实现带有URL重写的负载均衡
7.5 本章小结

第8章 Nginx服务器的缓存机制
8.1 Web缓存技术简述
8.2 404错误驱动Web缓存
8.3 资源不存在驱动Web缓存
8.4 基于memcached的缓存机制的6个指令
8.5 Proxy Cache缓存机制
8.6 Nginx与Squid组合
8.6.1 Squid服务器的配置
8.6.2 Nginx服务器的配置
8.7 基于第三方模块ncache的缓存机制
8.8 本章小结

第9章 Nginx服务器的邮件服务
9.1 邮件服务
9.2 Nginx邮件服务的配置的12个指令
9.3 Nginx邮件服务配置实例
9.4 本章小结

第10章 Nginx源码结构
10.1 Nginx源码的3个目录结构
10.1.1 core目录
10.1.2 event目录
10.1.3 http目录
10.2 Nginx源码的模块化结构
10.2.1 公共功能
10.2.2 配置解析
10.2.3 内存管理
10.2.4 事件驱动
10.2.5 日志管理
10.2.6 HTTP服务
10.2.7 Mail服务
10.2.8 模块支持
10.3 本章小结

第11章 Nginx基本数据结构
11.1 ngx_module_s结构体
11.1.1 分类标识ctx_index
11.1.2 模块计数器index
11.1.3 模块上下文
11.1.4 回调函数
11.2 ngx_command_s结构体
11.2.1 type成员
11.2.2 函数指针set
11.2.3 conf和offset
11.3 3个基本模块的指令集数组结构
11.3.1 http模块
11.3.2 event模块

第1章　研究Nginx前的准备工作 2

1.1　Nginx是什么 2

1.2　为什么选择Nginx 5

1.3　准备工作 7

1.3.1　Linux操作系统 7

1.3.2　使用Nginx的必备软件 7

1.3.3　磁盘目录 8

1.3.4　Linux内核参数的优化 9

1.3.5　获取Nginx源码 10

1.4　编译安装Nginx 11

1.5　conf?igure详解 11

1.5.1　conf?igure的命令参数 11

1.5.2　conf?igure执行流程 18

1.5.3　conf?igure生成的文件 21

1.6　Nginx的命令行控制 23

1.7　小结 27

第2章　Nginx的配置 28

2.1　运行中的Nginx进程间的关系 28

2.2　Nginx配置的通用语法 31

2.2.1　块配置项 31

2.2.2　配置项的语法格式 32

2.2.3　配置项的注释 33

2.2.4　配置项的单位 33

2.2.5　在配置中使用变量 33

2.3　Nginx服务的基本配置 34

2.3.1　用于调试进程和定位问题的配置项 34

2.3.2　正常运行的配置项 36

2.3.3　优化性能的配置项 37

2.3.4　事件类配置项 39

2.4　用HTTP核心模块配置一个静态Web服务器 40

2.4.1　虚拟主机与请求的分发 41

2.4.2　文件路径的定义 45

2.4.3　内存及磁盘资源的分配 47

2.4.4　网络连接的设置 49

2.4.5　MIME类型的设置 52

2.4.6　对客户端请求的限制 53

2.4.7　文件操作的优化 54

2.4.8　对客户端请求的特殊处理 56

2.4.9　ngx_http_core_module模块提供的变量 57

2.5　用HTTP proxy module配置一个反向代理服务器 59

2.5.1　负载均衡的基本配置 61

2.5.2　反向代理的基本配置 63

2.6　小结 66

第二部分　如何编写HTTP模块

第3章　开发一个简单的HTTP模块 68

3.1　如何调用HTTP模块 68

3.2　准备工作 70

3.2.1　整型的封装 71

3.2.2　ngx_str_t数据结构 71

3.2.3　ngx_list_t数据结构 71

3.2.4　ngx_table_elt_t数据结构 75

3.2.5　ngx_buf_t数据结构 75

3.2.6　ngx_chain_t数据结构 77

3.3　如何将自己的HTTP模块编译进Nginx 77

3.3.1　conf?ig文件的写法 77

3.3.2　利用conf?igure脚本将定制的模块加入到Nginx中 78

3.3.3　直接修改Makef?ile文件 81

3.4　HTTP模块的数据结构 82

3.5　定义自己的HTTP模块 86

3.6　处理用户请求 89

3.6.1　处理方法的返回值 89

3.6.2　获取URI和参数 92

3.6.3　获取HTTP头部 94

3.6.4　获取HTTP包体 97

3.7　发送响应 99

3.7.1　发送HTTP头部 99

3.7.2　将内存中的字符串作为包体发送 101

3.7.3　经典的“Hello World”示例 102

3.8　将磁盘文件作为包体发送 103

3.8.1　如何发送磁盘中的文件 104

3.8.2　清理文件句柄 106

3.8.3　支持用户多线程下载和断点续传 107

3.9　用C++语言编写HTTP模块 108

3.9.1　编译方式的修改 108

3.9.2　程序中的符号转换 109

3.10　小结 110

第4章　配置、error日志和请求上下文 111

4.1　http配置项的使用场景 111

4.2　怎样使用http配置 113

4.2.1　分配用于保存配置参数的数据结构 113

4.2.2　设定配置项的解析方式 115

4.2.3　使用14种预设方法解析配置项 121

4.2.4　自定义配置项处理方法 131

4.2.5　合并配置项 133

4.3　HTTP配置模型 135

4.3.1　解析HTTP配置的流程 136

4.3.2　HTTP配置模型的内存布局 139

4.3.3　如何合并配置项 142

4.3.4　预设配置项处理方法的工作原理 144

4.4　error日志的用法 145

4.5　请求的上下文 149

4.5.1　上下文与全异步Web服务器的关系 149

4.5.2　如何使用HTTP上下文 151

4.5.3　HTTP框架如何维护上下文结构 152

4.6　小结 153

第5章　访问第三方服务 154

5.1　upstream的使用方式 155

5.1.1　ngx_http_upstream_t结构体 158

5.1.2　设置upstream的限制性参数 159

5.1.3　设置需要访问的第三方服务器地址 160

5.1.4　设置回调方法 161

5.1.5　如何启动upstream机制 161

5.2　回调方法的执行场景 162

5.2.1　create_request回调方法 162

5.2.2　reinit_request回调方法 164

5.2.3　f?inalize_request回调方法 165

============================================

学到老活到老
前端圈一直很新，一直要不停的学习，而且在进入大厂的路上，还要求熟悉一门后台语言等等。用一句别人开玩笑的话来说，java十年前的技术现在还能用，而前端的技术就不是这样的了

突然想起了deno项目发布的时候，一个搞笑的issue，“求别更新了，老子学不动了”。虽然看起来是一个玩笑的issue，但却道出了前端们不得不表现出来的疲态，知识点越来越庞大，学习的内容越来越多

也听到一些朋友们说，换成现在再面试阿里，恐怕不好进了啊。当然很多都是随便一说的玩笑话，听过一笑便可，不必当真，也不必抱怨了

好了，今天就直接来说一下主题吧，前端要了解一些运维的Nginx用法，内容不多，简单看看就好，这两个功能在工作当中就够用了，那么首先来看个问题，什么是反向代理与负载均衡

什么是反向代理与负载均衡
什么是反向代理
当我们有一个服务器集群，并且服务器集群中的每台服务器的内容一样的时候，同样我们要直接从个人电脑访问到服务器集群服务器的时候无法访问，必须通过第三方服务器才能访问集群

这个时候，我们通过第三方服务器访问服务器集群的内容，但是我们并不知道是哪一台服务器提供的内容，此种代理方式称为反向代理

什么是负载均衡
公司会建立很多的服务器，这些服务器组成了服务器集群，然后，当用户访问网站的时候，先访问一个中间服务器，再让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入选择的服务器

所以，用户每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况

一句话：nginx会给你分配服务器压力小的去访问

Nginx反向代理与负载均衡的实现
用户访问网站的时候首先会访问nginx服务器，然后nginx服务器再从服务器集群中选择压力较小的服务器，将该访问请求引向该服务器

nginx配置
下面修改配置方面我就从mac系统下来进行简单的演示，如何安装的话也暂以mac为主了，windows系统直接去Nginx官网下载安装即可

安装nginx

    1-进到homebrew官网，然后复制命令，预安装需要的东西

    2-brew install nginx    安装nginx

    3-nginx -v  显示版本号

进入nginx

    cd /usr/local/etc/nginx

下图为进入nginx文件夹下的文件内容



当进到这个目录下，我们就可以操作nginx了，接下来就列举一些非常非常有用的命令，多敲几遍，一定要记住

nginx常用命令
启动nginx

nginx

当你敲完nginx这5个键的时候，并没有任何反应，此时你只需访问localhost:8080(默认)即可





关闭nginx

如果出现下图情况，不要惊慌，是因为之前nginx被启动过了

只需nginx -s stop，停止nginx服务

然后再次启动nginx即可







重启nginx

nginx -s reload

每次修改完.conf文件就需要重启nginx

检查配置

检查修改的nginx.conf配置是否正确

nginx -t

如果出现下面ok和successfull就代表正确了，其他的都不对

nginx:the configuration file/usr/local/etc/nginx/nginx.conf syntaxisok

nginx:configuration file/usr/local/etc/nginx/nginx.conf testissuccessful



对于我们前端来说正常工作当中，倒是不需要过多的修改nginx的。我们之所以修改nginx配置，是为了做一些反向代理罢了

proxy_pass
nginx反向代理主要通过proxy_pass来配置，将你项目的开发机地址填写到proxy_pass后面，正常的格式为proxy_pass URL即可

server {

    listen 80;

    location / {

        proxy_pass http://10.10.10.10:20186;

    }

}

Upstream模块实现负载均衡
ip_hash指令

server指令

upstream指令及相关变量



上面写的三个指令，我们直接通过代码来一一分析

// 修改nginx.conf

worker_processes 1;

events {

    worker_connections 1024;

}

http {

    upstream firstdemo {

        server 39.106.145.33;

        server 47.93.6.93;

    }

    server {

        listen 8080;

        location / {

            proxy_pass http://firstdemo;

        }

    }

}

上面修改的nginx.conf就是上图中花圈的那个文件，nginx配置的主要修改就在这里。化繁为简，把原本nginx.conf里的内容直接替换为上面的不到20行的代码了

既然不到20行，那就把里面对应的内容统统解释一下吧，有个了解就好

worker_processes

worker_connections

upstream模块

负载均衡就靠它

语法格式：upstream name {}

里面写的两个server分别对应着不同的服务器

server模块

实现反向代理

listen监督端口号

location / {}访问根路径

proxy_pass http://firstdemo，代理到firstdemo里两个服务器上



上面修改了nginx.conf之后，别忘了最重要的一步重启nginx

那么再次访问localhost:8080，会看到如下图页面



还有另一个页面



每次刷新都会访问不同的服务器，这样就做到了负载均衡处理

不过，更应该做到的是当用户第一次访问到其中一台服务器后，下次再访问的时候就直接访问该台服务器就好了，不用总变化了。那么就发挥了ip_hash的威力了

// 省略...

    upstream firstdemo {

        ip_hash;

        server 39.106.145.33;

        server 47.93.6.93;

    }

ip_hash它的作用是如果第一次访问该服务器后就记录，之后再访问都是该服务器了，这样比如第一次访问是33服务器，那之后再访问也会分配为33服务器访问了

工作中的简单使用
在公司开发项目的时候，遇到设计，产品走查环节的时候，不能每次都让他们去配一个host，毕竟这样不友好，走查起来有麻烦。所以更应该给他们直观的感受，既给一个访问地址就可以看到样子

下面给大家看一下，我正常在公司时nginx做的反向代理配置，和咱们上面的如出一辙，只是加了一个server_name，用指定的域名去访问即可

server {

    listen       80;

    server_name  chd.news.so.m.qss.test.so.com ;

    auth_basic off;

    location / {

        proxy_pass    http://10.10.10.10:20186;

        proxy_set_header Host $host;

        proxy_redirect off;

        proxy_set_header X-Real-IP $remote_addr;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_connect_timeout 60;

        proxy_read_timeout 600;

        proxy_send_timeout 600;

    }

}

每次修改完nginx配置后不要忘记重启nginx才能生效，这样只需要访问chd.news.so.m.qss.test.so.com这个地址就可以查看我的开发环境，进行走查了。



