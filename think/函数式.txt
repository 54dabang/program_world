java8实战读书笔记：初识Stream、流的基本操作（流计算）


本文中的部分示例基于如下场景：餐厅点菜，Dish为餐厅中可提供的菜品，Dish的定义如下：

 1public class Dish {
 2    /** 菜品名称 */
 3    private final String name;
 4    /** 是否是素食 */
 5    private final boolean vegetarian;
 6    /** 含卡路里 */
 7    private final int calories;
 8    /** 类型 */
 9    private final Type type;
10
11    public Dish(String name, boolean vegetarian, int calories, Type type) {
12        this.name = name;
13        this.vegetarian = vegetarian;
14        this.calories = calories;
15        this.type = type;
16    }
17
18    public enum Type { MEAT, FISH, OTHER }
19
20    // 省略set get方法
21}
菜单的数据如下：

 1List<Dish> menu = Arrays.asList(
 2new Dish("pork", false, 800, Dish.Type.MEAT),
 3new Dish("beef", false, 700, Dish.Type.MEAT),
 4new Dish("chicken", false, 400, Dish.Type.MEAT),
 5new Dish("french fries", true, 530, Dish.Type.OTHER),
 6new Dish("rice", true, 350, Dish.Type.OTHER),
 7new Dish("season fruit", true, 120, Dish.Type.OTHER),
 8new Dish("pizza", true, 550, Dish.Type.OTHER),
 9new Dish("prawns", false, 300, Dish.Type.FISH),
10new Dish("salmon", false, 450, Dish.Type.FISH) );
我们以一个简单的示例来引入流：从菜单列表中，查找出是素食的菜品，并打印其菜品的名称。

在Java8之前，我们通常是这样实现该需求的：

 1List<String> dishNames = new ArrayList<>();
 2for(Dish d menu) {
 3    if(d.isVegetarian()) {
 4        dishNames.add(d.getName());
 5    }
 6}
 7//输出帅选出来的菜品的名称：
 8for(String n : dishNames) {
 9    System.out.println(n);
10}
那在java8中，我们可以这样写：

1menu.streams() .filter( Dish::isVegetarian).map( Dish::getName) .forEach( a -> System.out.println(a) );
其运行输出的结果：

在这里插入图片描述

怎么样，神奇吧！！！
在解释上面的代码之前，我们先对流做一个理论上的介绍。

流是什么？
流，就是数据流，是元素序列，在Java8中，流的接口定义在 java.util.stream.Stream包中，并且在Collection(集合)接口中新增一个方法：

1default Stream<E> stream() {
2        return StreamSupport.stream(spliterator(), false);
3}
流的简短定义：从支持数据处理操作的源生成的元素序列。例如集合、数组都是支持数据操作的数据结构（容器），都可以做为流的创建源，该定义的核心要素如下：

源
流是从一个源创建来而来，而且这个源是支持数据处理的，例如集合、数组等。

元素序列
流代表一个元素序列（流水线），因为是从根据一个数据处理源而创建得来的。

数据处理操作
流的侧重点并不在数据存储，而在于数据处理，例如示例中的filter、map、forEach等。

迭代方式
流的迭代方式为内部迭代，而集合的迭代方式为外部迭代。例如我们遍历Collection接口需要用户去做迭代，例如for-each，然后在循环体中写对应的处理代码，这叫外部迭代。相反，Stream库使用内部迭代，我们只需要对流传入对应的函数即可，表示要做什么就行。

注意：流和迭代器Iterator一样，只能遍历一次，如果要多次遍历，请创建多个流。

接下来我们将重点先介绍流的常用操作方法。

流的常用操作
filter
filter函数的方法声明如下：

1java.util.stream.Stream#filter
2Stream<T> filter(Predicate<? super T> predicate);
该方法接收一个谓词，返回一个流，即filter方法接收的lambda表达式需要满足 （  T  -> Boolean ）。

示例：从菜单中选出所有是素食的菜品：

1List<Dish> vegetarianDishs = menu.stream().filter(  Dish::isVegetarian )    // 使用filter过滤流中的菜品。
2                                          .collect(toList())；              // 将流转换成List，该方法将在后面介绍。
温馨提示：流的操作可以分成中间件操作和终端操作。中间操作通常的返回结果还是流，并且在调用终端操作之前，并不会立即调用，等终端方法调用后，中间操作才会真正触发执行，该示例中的collect方法为终端方法。

我们类比一下数据库查询操作，除了基本的筛选动作外，还有去重，分页等功能，那java8的流API能支持这些操作吗？
答案当然是肯定。

distinct
distinct，类似于数据库中的排重函数，就是对结果集去重。
例如有一个数值numArr = [1,5,8,6,5,2,6]，现在要输出该数值中的所有奇数并且不能重复输出，那该如何实现呢？

1Arrays.stream(numArr).filter(  a -> a % 2 == 0 ).distinict().forEach(System.out::println);
limit
截断流，返回一个i不超过指定元素个数的流。
还是以上例举例，如果要输出的元素是偶数，不能重复输出，并且只输出1个元素，那又该如何实现呢？

1Arrays.stream(numArr).filter(  a -> a % 2 == 0 ).distinict().limit(1).forEach(System.out::println);
skip
跳过指定元素，返回剩余元素的流，与limit互补。

Map
还是类比数据库操作，我们通常可以只选择一个表中的某一列，java8流操作也提供了类似的方法。
例如，我们需要从菜单中提取所有菜品的名称，在java8中我们可以使用如下代码实现：

1版本1：List<String> dishNames = menu.stream().map( (Dish d) -> d.getName() ).collect(Collectors.toList());
2版本2：List<String> dishNames = menu.stream().map( d -> d.getName() ).collect(Collectors.toList());
3版本3：List<String> dishNames = menu.stream().map(Dish::getName).collect(Collectors.toList());
文章的后续部分尽量使用最简洁的lambda表达式。

我们来看一下Stream关于map方法的声明：

1<R> Stream<R> map(Function<? super T, ? extends R> mapper)
2
接受一个函数Function，其函数声明为：T -> R，接收一个T类型的对象，返回一个R类型的对象。

当然，java为了高效的处理基础数据类型（避免装箱、拆箱带来性能损耗）也定义了如下方法：

1IntStream mapToInt(ToIntFunction<? super T> mapper)
2LongStream mapToLong(ToLongFunction<? super T> mapper)
3DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper)
思考题：对于字符数值["Hello","World"] ，输出字符序列，并且去重。
第一次尝试：

1public static void test_flat_map() {
2    String[] strArr = new String[] {"hello", "world"};
3    List<String> strList = Arrays.asList(strArr);
4    strList.stream().map( s -> s.split(""))
5                    .distinct().forEach(System.out::println);
6}
输出结果：

在这里插入图片描述

为什么会返回两个String[]元素呢？因为map(s -> s.split()) 此时返回的流为Stream，那我们是不是可以继续对该Steam[String[]],把String[]转换为字符流，其代码如下：
1public static void test_flat_map() {
2    String[] strArr = new String[] {"hello", "world"};
3    List<String> strList = Arrays.asList(strArr);
4    strList.stream().map( s -> s.split(""))
5                    .map(Arrays::stream)
6                    .distinct().forEach(System.out::println);
7}
其返回结果：

在这里插入图片描述

还是不符合预期，其实原因也很好理解，再次经过map(Arrays:stream)后，返回的结果为Stream，即包含两个元素，每一个元素为一个字符流，可以通过如下代码验证：
 1public static void test_flat_map() {
 2    String[] strArr = new String[] {"hello", "world"};
 3    List<String> strList = Arrays.asList(strArr);
 4    strList.stream().map( s -> s.split(""))
 5                    .map(Arrays::stream)
 6                    .forEach(  (Stream<String> s) -> {
 7                        System.out.println("\n --start---");
 8                        s.forEach(a -> System.out.print(a + " "));
 9                        System.out.println("\n --end---");
10                    } );
11}
综合上述分析，之所以不符合预期，主要是原数组中的两个字符，经过map后返回的是两个独立的流，那有什么方法将这两个流合并成一个流，然后再进行disinic去重呢？

答案当然是可以的，flatMap方法闪亮登场：先看代码和显示结果：

1public static void test_flat_map() {
2    String[] strArr = new String[] {"hello", "world"};
3    List<String> strList = Arrays.asList(strArr);
4    strList.stream().map( s -> s.split(""))
5                    .flatMap(Arrays::stream)
6                    .distinct().forEach( a -> System.out.print(a +" "));
7}
其输出结果：

在这里插入图片描述

符合预期。一言以蔽之，flatMap可以把两个流合并成一个流进行操作。
查找和匹配
Stream API提供了allMatch、anyMatch、noneMatch、findFirst和findAny方法来实现对流中数据的匹配与查找。

allMatch
我们先看一下该方法的声明：

1boolean allMatch(Predicate<? super T> predicate);
接收一个谓词函数(T->boolean)，返回一个boolean值，是一个终端操作，用于判断流中的所有元素是否与Predicate相匹配，只要其中一个元素不复合，该表达式将返回false。
示例如下：例如存在这样一个List a,其中元素为 1,2,4,6,8。判断流中的元素是否都是偶数。

1boolean result = a.stream().allMatch(  a -> a % 2 == 0 )；  // 将返回false。
anyMatch
该方法的函数声明如下：

1boolean anyMatch(Predicate<? super T> predicate)
2
同样接收一个谓词Predicate( T -> boolean )，表示只要流中的元素至少一个匹配谓词，即返回真。

示例如下：例如存在这样一个List a,其中元素为 1,2,4,6,8。判断流中的元素是否包含偶数。

1boolean result = a.stream().anyMatch(  a -> a % 2 == 0 )；  // 将返回true。
noneMatch
该方法的函数声明如下：

1boolean noneMatch(Predicate<? super T> predicate);
同样接收一个谓词Predicate( T -> boolean )，表示只要流中的元素全部不匹配谓词表达式，则返回true。

示例如下：例如存在这样一个List a,其中元素为 2,4,6,8。判断流中的所有元素都不式奇数。

1boolean result = a.stream().noneMatch(  a -> a % 2 == 1 )；  // 将返回true。
findFirst
查找流中的一个元素，其函数声明如下：

1Optional<T> findFirst();
返回流中的一个元素。其返回值为Optional，这是jdk8中引入的一个类，俗称值容器类，其主要左右是用来避免值空指针，一种更加优雅的方式来处理null。该类的具体使用将在下一篇详细介绍。

1public static void test_find_first(List<Dish> menu) {
2    Optional<Dish> dish = menu.stream().findFirst();
3    // 这个方法表示，Optional中包含Dish对象，则执行里面的代码，否则什么事不干，是不是比判断是否为null更友好
4    dish.ifPresent(a -> System.out.println(a.getName()));
5}
findAny
返回流中任意一个元素，其函数声明如下：

1Optional<T> findAny();
reduce
reduce归约，看过大数据的人用过会非常敏感，目前的java8的流操作是不是有点map-reduce的味道，归约，就是对流中所有的元素进行统计分析，归约成一个数值。
首先我们看一下reduce的函数说明：

1T reduce(T identity, BinaryOperator<T> accumulator)
T identity：累积器的初始值。

BinaryOperator< T> accumulator：累积函数。BinaryOperator< T> extend BiFunction。BinaryOperator的函数式表示，接受两个T类型的入参，返回T类型的返回值。

1Optional<T> reduce(BinaryOperator<T> accumulator);
可以理解为没有初始值的归约，如果流为空，则会返回空，故其返回值使用了Optional类来优雅处理null值。

1<U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner);
首先，最后的返回值类型为U。

U identity：累积函数的初始值。

BiFunction accumulator：累积器函数，对流中的元素使用该累积器进行归约，在具体执行时accumulator.apply(  identity,  第二个参数的类型不做限制 )，只要最终返回U即可。

BinaryOperator< U> combiner：组合器。对累积器的结果进行组合，因为归约reduce，java流计算内部使用了fork-join框架，会对流的中的元素使用并行累积，每个线程处理流中一部分数据，最后对结果进行组合，得出最终的值。

温馨提示：对流API的学习，一个最最重点的就是要掌握这些函数式编程接口，然后掌握如何使用Lambda表达式进行行为参数化（lambda表达当成参数传入到函数中）。

接下来我们举例来展示如何使用reduce。
示例1：对集合中的元素求和

1List<Integer> goodsNumber = Arrays.asList(   3, 5, 8, 4, 2, 13 );
2java7之前的示例：
3int sum = 0;
4for(Integer i : goodsNumber) {
5sum += i;//  sum = sum + i;
6}
7System.out.println("sum:" + sum);
求和运算符： c = a + b，也就是接受2个参数，返回一个值，并且这三个值的类型一致。

故我们可以使用T reduce(T identity, BinaryOperator< T> accumulator)来实现我们的需求：

1public static void test_reduce() {
2    List<Integer> goodsNumber = Arrays.asList(   3, 5, 8, 4, 2, 13 );
3    int sum = goodsNumber.stream().reduce(0, (a,b) -> a + b);
4    //这里也可以写成这样：
5    // int sum = goodsNumber.stream().reduce(0, Integer::sum);
6    System.out.println(sum);
7}
不知大家是否只读(a,b)这两个参数的来源，其实第一个参数为初始值T identity，第二个参数为流中的元素。

那三个参数的reduce函数主要用在什么场景下呢？接下来还是用求和的例子来展示其使用场景。在java多线程编程模型中，引入了fork-join框架，就是对一个大的任务进行先拆解，用多线程分别并行执行，最终再两两进行合并，得出最终的结果。reduce函数的第三个函数，就是组合这个动作，下面给出并行执行的流式处理示例代码如下：

 1 public static void test_reduce_combiner() {
 2
 3    /** 初始化待操作的流 */
 4    List<Integer> nums = new ArrayList<>();
 5    int s = 0;
 6    for(int i = 0; i < 200; i ++) {
 7        nums.add(i);
 8        s = s + i;
 9    }
10
11    // 对流进行归并，求和,这里使用了流的并行执行版本 parallelStream，内部使用Fork-Join框架多线程并行执行，
12    // 关于流的内部高级特性，后续再进行深入，目前先以掌握其用法为主。
13    int sum2 = nums.parallelStream().reduce(0,Integer::sum, Integer::sum);
14    System.out.println("和为：" + sum2);
15
16    // 下面给出上述版本的debug版本。
17
18    // 累积器执行的次数
19    AtomicInteger accumulatorCount = new AtomicInteger(0);
20
21    // 组合器执行的次数（其实就是内部并行度）
22    AtomicInteger combinerCount = new AtomicInteger(0);
23
24    int sum = nums.parallelStream().reduce(0,(a,b) -> {
25                accumulatorCount.incrementAndGet();
26                return a + b;
27           }, (c,d) -> {
28                combinerCount.incrementAndGet();
29                return  c+d;
30        });
31
32    System.out.println("accumulatorCount:" + accumulatorCount.get());
33    System.out.println("combinerCountCount:" + combinerCount.get());
34}
从结果上可以看出，执行了100次累积动作，但只进行了15次合并。

流的基本操作就介绍到这里，在此总结一下，目前接触到的流操作：

1、filter

函数功能：过滤

操作类型：中间操作

返回类型：Stream

函数式接口：Predicate

函数描述符：T -> boolean

2、distinct

函数功能：去重

操作类型：中间操作

返回类型：Stream

3、skip

函数功能：跳过n个元素

操作类型：中间操作

返回类型：Stream

接受参数：long

4、limit

函数功能：截断流，值返回前n个元素的流

操作类型：中间操作

返回类型：Stream

接受参数：long

5、map

函数功能：映射

操作类型：中间操作

返回类型：Stream

函数式接口：Function

函数描述符：T -> R



6、flatMap

函数功能：扁平化流，将多个流合并成一个流

操作类型：中间操作

返回类型：Stream

函数式接口：Function>

函数描述符：T -> Stream

7、sorted

函数功能：排序

操作类型：中间操作

返回类型：Stream

函数式接口：Comparator

函数描述符：(T,T) -> int

8、anyMatch

函数功能：流中任意一个匹配则返回true

操作类型：终端操作

返回类型：boolean

函数式接口：Predicate

函数描述符：T -> boolean

9、allMatch

函数功能：流中全部元素匹配则返回true

操作类型：终端操作

返回类型：boolean

函数式接口：Predicate

函数描述符：T -> boolean

10、 noneMatch

函数功能：流中所有元素都不匹配则返回true

操作类型：终端操作

返回类型：boolean

函数式接口：Predicate

函数描述符：T -> boolean

11、findAny

函数功能：从流中任意返回一个元素

操作类型：终端操作

返回类型：Optional

12、findFirst

函数功能：返回流中第一个元素

操作类型：终端操作

返回类型：Optional

13、forEach

函数功能：遍历流

操作类型：终端操作

返回类型：void

函数式接口：Consumer

函数描述符：T -> void

14、collect

函数功能：将流进行转换

操作类型：终端操作

返回类型：R

函数式接口：Collector

15、reduce

函数功能：规约流

操作类型：终端操作

返回类型：Optional

函数式接口：BinaryOperator

函数描述符：(T,T) -> T

16、count

函数功能：返回流中总元素个数

操作类型：终端操作

返回类型：long

由于篇幅的原因，流的基本计算就介绍到这里了.

推荐阅读

八个开源的 Spring Boot 学习资源，你值得拥有

Spring Boot MyBatis 动态数据源切换、多数据源，读写分离

JAVA中令人眼花撩乱的数字魔法

一次非常有意思的SQL优化经历:从30248.271s到0.001s


===================================================


技巧 | Java 8 Stream 中异常处理的4种方式

大家都知道，不能直接在 lambda 中调用那些会抛出异常的方法，因为这样从编译上都通不过。所以我们需要捕获异常以使代码能够编译通过。

例如，我们可以在 lambda 中做一个简单的 try-catch 并将异常包装成一个 RuntimeException，如下面的代码所示，但这不是最好的方法。

myList
.
stream
()


.
map
(
t
->

{


try

{


return
 doSomething
(
t
);


}

catch

(
MyException
 e
)

{


throw

new

RuntimeException
(
e
);


}


})


.
forEach
(
System
.
out
::
println
);

我们大多数人都知道，lambda 代码块是笨重的，可读性较差。在我看来，应该尽可能避免直接在 lambda 中使用大量的代码段。

如果我们在 lambda 表达式中需要做多行代码，那么我们可以把这些代码提取到一个单独的方法中，并简单地调用新方法。

所以，解决此问题的更好和更易读的方法是将调用包装在一个普通的方法中，该方法执行 try-catch 并从 lambda 中调用该方法，如下面的代码所示：

myList
.
stream
()


.
map
(
this
::
trySomething
)


.
forEach
(
System
.
out
::
println
);



private
 T trySomething
(
T t
)

{


try

{


return
 doSomething
(
t
);


}

catch

(
MyException
 e
)

{


throw

new

RuntimeException
(
e
);


}

}

这个解决方案至少有点可读性，并且将我们所关心的的问题也解决了。如果你真的想要捕获异常并做一些特定的事情而不是简单地将异常包装成一个 RuntimeException，那么这对你来说可能是一个还不错的解决方案。

一.包装成运行时异常
在许多情况下，你会看到大家都喜欢将异常包装成一个RuntimeException，或者是一个具体的未经检查的异常类。这样做的话，我们就可以在 lambda 内调用该方法。

如果你想把 lambda 中的每个可能抛出异常的调用都包装到 RuntimeException中，那你会看到很多重复的代码。为了避免一遍又一遍地重写相同的代码，我们可以将它抽象为一个方法，这样，你只需编写一次然后每次需要的时候直接调用他就可以了。

首先，你需要为函数编写自己的方法接口。只有这一次，你需要定义该函数可能抛出异常，例如下列所示：

@FunctionalInterface

public

interface

CheckedFunction
<
T
,
R
>

{

    R apply
(
T t
)

throws

Exception
;

}

现在，您可以编写自己的通用方法了，它将接受一个 CheckedFunction 参数。你可以在这个通用方法中处理 try-catch 并将原始异常包装到 RuntimeException中，如下列代码所示：

public

static

<
T
,
R
>

Function
<
T
,
R
>
 wrap
(
CheckedFunction
<
T
,
R
>
 checkedFunction
)

{


return
 t
->

{


try

{


return
 checkedFunction
.
apply
(
t
);


}

catch

(
Exception
 e
)

{


throw

new

RuntimeException
(
e
);


}


};

}

但是这种写法也是一个比较丑陋的 lambda 代码块，你可以选择要不要再对方法进行抽象。

通过简单的静态导入，你现在可以使用全新的通用方法来包装可能引发异常的lambda，如下列代码所示：

myList
.
stream
()


.
map
(
wrap
(
t
->
 doSomething
(
t
)))


.
forEach
(
System
.
out
::
println
);

剩下的唯一问题是，当发生异常时，你的 stream 处理会立即停止。如果你的业务可以容忍这种情况的话，那没问题，但是，我可以想象，在许多情况下，直接终止并不是最好的处理方式。

二.包装成 Either 类型
使用 stream 时，如果发生异常，我们可能不希望停止处理。如果你的 stream 包含大量需要处理的项目，你是否希望在例如第二个项目引发异常时终止该 stream 呢？可能不是吧。

那我们可以换一种方式来思考，我们可以把 “异常情况” 下产生的结果，想象成一种特殊性的成功的结果。那我们可以把他们都看成是一种数据，不管成功还是失败，都继续处理流，然后决定如何处理它。我们可以这样做，这就是我们需要引入的一种新类型 - Either类型。

Either 类型是函数式语言中的常见类型，而不是 Java 的一部分。与 Java 中的 Optional 类型类似，一个 Either 是具有两种可能性的通用包装器。它既可以是左派也可以是右派，但绝不是两者兼而有之。左右两种都可以是任何类型。

例如，如果我们有一个 Either 值，那么这个值可以包含 String 类型或 Integer 类型：Either。

如果我们将此原则用于异常处理，我们可以说我们的 Either 类型包含一个 Exception 或一个成功的值。为了方便处理，通常左边是 Exception，右边是成功值。

下面，你将看到一个 Either 类型的基本实现 。在这个例子中，我使用了 Optional 类型，代码如下：

public

class

Either
<
L
,
 R
>

{


private

final
 L left
;


private

final
 R right
;


private

Either
(
L left
,
 R right
)

{


this
.
left
=
 left
;


this
.
right
=
 right
;


}


public

static

<
L
,
R
>

Either
<
L
,
R
>

Left
(
 L value
)

{


return

new

Either
(
value
,

null
);


}


public

static

<
L
,
R
>

Either
<
L
,
R
>

Right
(
 R value
)

{


return

new

Either
(
null
,
 value
);


}


public

Optional
<
L
>
 getLeft
()

{


return

Optional
.
ofNullable
(
left
);


}


public

Optional
<
R
>
 getRight
()

{


return

Optional
.
ofNullable
(
right
);


}


public

boolean
 isLeft
()

{


return
 left
!=

null
;


}


public

boolean
 isRight
()

{


return
 right
!=

null
;


}


public

<
T
>

Optional
<
T
>
 mapLeft
(
Function
<?

super
 L
,
 T
>
 mapper
)

{


if

(
isLeft
())

{


return

Optional
.
of
(
mapper
.
apply
(
left
));


}


return

Optional
.
empty
();


}


public

<
T
>

Optional
<
T
>
 mapRight
(
Function
<?

super
 R
,
 T
>
 mapper
)

{


if

(
isRight
())

{


return

Optional
.
of
(
mapper
.
apply
(
right
));


}


return

Optional
.
empty
();


}


public

String
 toString
()

{


if

(
isLeft
())

{


return

"Left("

+
 left
+
")"
;


}


return

"Right("

+
 right
+
")"
;


}

}

你现在可以让你自己的函数返回 Either 而不是抛出一个 Exception。但是如果你想在现有的抛出异常的 lambda 代码中直接使用 Either 的话，你还需要对原有的代码做一些调整，如下所示：

public

static

<
T
,
R
>

Function
<
T
,

Either
>
 lift
(
CheckedFunction
<
T
,
R
>
 function
)

{


return
 t
->

{


try

{


return

Either
.
Right
(
function
.
apply
(
t
));


}

catch

(
Exception
 ex
)

{


return

Either
.
Left
(
ex
);


}


};

}

通过添加这种静态提升方法 Either，我们现在可以简单地“提升”抛出已检查异常的函数，并让它返回一个 Either。这样做的话，我们现在最终得到一个 Eithers 流而不是一个可能会终止我们的 Stream 的 RuntimeException，具体的代码如下：

myList
.
stream
()


.
map
(
Either
.
lift
(
item
->
 doSomething
(
item
)))


.
forEach
(
System
.
out
::
println
);

通过在 Stream APU 中使用过滤器功能，我们可以简单地过滤出左侧实例，然后打印日志。也可以过滤右侧的实例，并且忽略掉异常的情况。无论哪种方式，你都可以对结果进行控制，并且当可能 RuntimeException 发生时你的流不会立即终止。

因为 Either 类型是一个通用的包装器，所以它可以用于任何类型，而不仅仅用于异常处理。这使我们有机会做更多的事情而不仅仅是将一个 Exception 包装到一个 Either 的左侧实例中。

我们现在可能遇到的问题是,如果 Either 只保存了包装的异常，并且我们无法重试，因为我们丢失了原始值。

通过使用 Either 保存任何东西的能力，我们可以将异常和原始值都保存在左侧。为此，我们只需制作第二个静态提升功能。

public

static

<
T
,
R
>

Function
<
T
,

Either
>
 liftWithValue
(
CheckedFunction
<
T
,
R
>
 function
)

{


return
 t
->

{


try

{


return

Either
.
Right
(
function
.
apply
(
t
));


}

catch

(
Exception
 ex
)

{


return

Either
.
Left
(
Pair
.
of
(
ex
,
t
));


}


};

}

你可以看到，在这个 liftWithValue 函数中，这个 Pair 类型用于将异常和原始值配对到 Either 的左侧，如果出现问题我们可能需要所有信息，而不是只有 Exception。

Pair 使用的类型是另一种泛型类型，可以在 Apache Commons lang 库中找到，或者你也可以简单地实现自己的类型。

无论如何，它只是一个可以容纳两个值的类型，如下所示：

public

class

Pair
<
F
,
S
>

{


public

final
 F fst
;


public

final
 S snd
;


private

Pair
(
F fst
,
 S snd
)

{


this
.
fst
=
 fst
;


this
.
snd
=
 snd
;


}


public

static

<
F
,
S
>

Pair
<
F
,
S
>
 of
(
F fst
,
 S snd
)

{


return

new

Pair
<>(
fst
,
snd
);


}

}

通过使用 liftWithValue，你现在可以灵活的并且可控制的来在 lambda 表达式中调用可能会抛出 Exception 的方法了。

如果 Either 是一个 Right 类型，我们知道我们的方法已正确执行，我们可以正常的提取结果。另一方面，如果 Either 是一个 Left 类型，那意味着有地方出了问题，我们可以提取 Exception 和原始值，然后我们可以按照具体的业务来继续处理。

通过使用 Either 类型而不是将被检查包装 Exception 成 RuntimeException，我们可以防止 Stream 中途终止。

三.包装成 Try 类型
使用过 Scala 的人可能会使用 Try 而不是 Either 来处理异常。Try 类型与 Either 类型是非常相似的。

它也有两种情况：“成功”或“失败”。失败时只能保存 Exception 类型，而成功时可以保存任何你想要的类型。

所以 Try 可以说是 Either 的一种固定的实现，因为他的 Left 类型被确定为 Exception了，如下列的代码所示：

public

class

Try
<
Exception
,
 R
>

{


private

final

Exception
 failure
;


private

final
 R succes
;


public

Try
(
Exception
 failure
,
 R succes
)

{


this
.
failure
=
 failure
;


this
.
succes
=
 succes
;


}

}

有人可能会觉得 Try 类型更加容易使用，但是因为 Try 只能将 Exception 保存在 Left 中，所以无法将原始数据保存起来，这就和最开始 Either 不使用 Pair 时遇到的问题一样了。所以我个人更喜欢 Either 这种更加灵活的。

无论如何，不管你使用 Try 还是 Either，这两种情况，你都解决了异常处理的初始问题，并且不要让你的流因为 RuntimeException而终止。

四.使用已有的工具库
无论是 Either 和 Try 是很容易实现自己。另一方面，您还可以查看可用的功能库。例如：VAVR（以前称为Javaslang）确实具有可用的类型和辅助函数的实现。我建议你去看看它，因为它比这两种类型还要多得多。

但是，你可以问自己这样一个问题：当你只需几行代码就可以自己实现它时，是否希望将这个大型库作为依赖项进行异常处理。

结论
当你想在 lambda 表达式中调用一个会抛出异常的方法时，你需要做一些额外的处理才行。

将其包装成一个 RuntimeException 并且创建一个简单的包装工具来复用它，这样你就不需要每次都写try/catch 了

如果你想要有更多的控制权，那你可以使用 Either 或者 Try 类型来包装方法执行的结果，这样你就可以将结果当成一段数据来处理了，并且当抛出 RuntimeException 时，你的流也不会终止。

如果你不想自己封装 Either 或者 Try 类型，那么你可以选择已有的工具库来使用

干货分享
最近将个人学习笔记整理成册，使用PDF分享。关注我，回复如下代码，即可获得百度盘地址，无套路领取！



package lamada;

import com.google.common.collect.Lists;

import java.awt.event.ActionEvent;
import java.util.*;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.stream.Collectors.counting;

/**
* <p>Title: LamadaTest</p>
* <p>Description: </p>
* <p>Copyright: Copyright (c) 2019</p>
* <p>Company: 寿险总部核心系统开发部后端批处理系统开发团队再保精算开发组</p>
*
* @author EX-ZHANGYONGTIAN001
* @version 1.0.0
* @date 2019-3-11  9:27
*/
public class LamadaTest {

    public static void main(String[] args) {
        long startTime = System.currentTimeMillis();
//        ActionEvent localEvent = null;
//        button.addActionListener(event -> {
//            localEvent = event;
//        });


//        artists.collect(partitioningBy(artist -> artist.isSolo()));
//        artists.collect(partitioningBy(Artist::isSolo))

//        albums.collect(groupingBy(album -> album.getMainMusician()))

//        String result = artists
//                .stream()
//                .map(Artist::getName)
//                .collect(Collectors.joining(", ", "[", "]"));

//        albums.collect(groupingBy(album -> album.getMainMusician(),
//                counting()));


//        albums.collect(groupingBy(Album::getMainMusician,mapping(Album::getName, toList())));

//        StringCombiner combined = artists.stream()
//                        .map(Artist::getName)
//                        .reduce(new StringCombiner(", ", "[", "]"),
//                                StringCombiner::add,
//                                StringCombiner::merge);
//        String result = combined.toString();


//        String result =
//                artists.stream()
//                        .map(Artist::getName)
//                        .collect(new StringCollector(", ", "[", "]"));

//        () -> new StringCombiner(delim, prefix, suffix

//        String result =
//                artists.stream()
//                        .map(Artist::getName)
//                        .collect(Collectors.reducing(
//                                new StringCombiner(", ", "[", "]"),
//                                name -> new StringCombiner(", ", "[", "]").add(name),
//                                StringCombiner::merge))
//                        .toString();


        //缓存
//        artistCache.computeIfAbsent(name, this::readArtistFromDB);

//        Map<Artist, Integer> countOfAlbums = new HashMap<>();
//        albumsByArtist.forEach((artist, albums) -> {
//            countOfAlbums.put(artist, albums.size());
//        });


//        Stream<String> names = Stream.of("John Lennon", "Paul McCartney",
//                "George Harrison", "Ringo Starr", "Pete Best", "Stuart Sutcliffe");


        //串行化计算专辑曲目长度
//        albums.stream()
//                .flatMap(Album::getTracks)
//                .mapToInt(Track::getLength)
//                .sum();

        //并行化计算专辑曲目长度
//        albums.parallelStream()
//                .flatMap(Album::getTracks)
//                .mapToInt(Track::getLength)
//                .sum();

//    Runnable runnable = ()->System.out.println("haha");
//    runnable.run();


//        Arrays.sort(players, (String s1, String s2) -> (s1.compareTo(s2)));


//        Arrays.sort(players, (String s1, String s2) ->
//                (s1.substring(s1.indexOf(" ")).compareTo(s2.substring(s2.indexOf(" "))))
//        );

//        Arrays.sort(players, (String s1, String s2) -> (s1.length() - s2.length()));

//        Arrays.sort(players, (String s1, String s2) -> (s1.charAt(s1.length() - 1) - s2.charAt(s2.length() - 1)));


        List<Person> javaProgrammers = new ArrayList<Person>() {
            {
                add(new Person("Elsdon", "Jaycob", "Java programmer", "male", 43, 2000));
                add(new Person("Tamsen", "Brittany", "Java programmer", "female", 23, 1500));
                add(new Person("Floyd", "Donny", "Java programmer", "male", 33, 1800));
                add(new Person("Sindy", "Jonie", "Java programmer", "female", 32, 1600));
                add(new Person("Vere", "Hervey", "Java programmer", "male", 22, 1200));
                add(new Person("Maude", "Jaimie", "Java programmer", "female", 27, 1900));
                add(new Person("Shawn", "Randall", "Java programmer", "male", 30, 2300));
                add(new Person("Jayden", "Corrina", "Java programmer", "female", 35, 1700));
                add(new Person("Palmer", "Dene", "Java programmer", "male", 33, 2000));
                add(new Person("Addison", "Pam", "Java programmer", "female", 34, 1300));
            }
        };

        List<Person> phpProgrammers = new ArrayList<Person>() {
            {
                add(new Person("Jarrod", "Pace", "PHP programmer", "male", 34, 1550));
                add(new Person("Clarette", "Cicely", "PHP programmer", "female", 23, 1200));
                add(new Person("Victor", "Channing", "PHP programmer", "male", 32, 1600));
                add(new Person("Tori", "Sheryl", "PHP programmer", "female", 21, 1000));
                add(new Person("Osborne", "Shad", "PHP programmer", "male", 32, 1100));
                add(new Person("Rosalind", "Layla", "PHP programmer", "female", 25, 1300));
                add(new Person("Fraser", "Hewie", "PHP programmer", "male", 36, 1100));
                add(new Person("Quinn", "Tamara", "PHP programmer", "female", 21, 1000));
                add(new Person("Alvin", "Lance", "PHP programmer", "male", 38, 1600));
                add(new Person("Evonne", "Shari", "PHP programmer", "female", 40, 1800));
            }
        };

//        System.out.println("所有程序员的姓名:");
//        javaProgrammers.forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));
//        phpProgrammers.forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));
//
//
//        System.out.println("给程序员加薪 5% :");
//        Consumer<Person> giveRaise = e -> e.setSalary(e.getSalary() / 100 * 5 + e.getSalary());
//        javaProgrammers.forEach(giveRaise);
//        phpProgrammers.forEach(giveRaise);
//
//        System.out.println("下面是月薪超过 $1,400 的PHP程序员:");
//        phpProgrammers.stream()
//                .filter((p) -> (p.getSalary() > 1400))
//                .forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));
//
//
//        // 定义 filters
//        Predicate<Person> ageFilter = (p) -> (p.getAge() > 25);
//        Predicate<Person> salaryFilter = (p) -> (p.getSalary() > 1400);
//        Predicate<Person> genderFilter = (p) -> ("female".equals(p.getGender()));
//
//        System.out.println("下面是年龄大于 24岁且月薪在$1,400以上的女PHP程序员:");
//        phpProgrammers.stream()
//                .filter(ageFilter)
//                .filter(salaryFilter)
//                .filter(genderFilter)
//                .forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));
//
//        // 重用filters
//        System.out.println("年龄大于 24岁的女性 Java programmers:");
//        javaProgrammers.stream()
//                .filter(ageFilter)
//                .filter(genderFilter)
//                .forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));
//
//
//
//
//        System.out.println("最前面的3个 Java programmers:");
//        javaProgrammers.stream()
//                .limit(3)
//                .forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));
//
//
//        System.out.println("最前面的3个女性 Java programmers:");
//        javaProgrammers.stream()
//                .filter(genderFilter)
//                .limit(3)
//                .forEach((p) -> System.out.printf("%s %s; ", p.getFirstName(), p.getLastName()));


//        System.out.println("根据 name 排序,并显示前5个 Java programmers:");
//        List<Person> sortedJavaProgrammers = javaProgrammers
//                .stream()
//                .sorted((p, p2) -> (p.getFirstName().compareTo(p2.getFirstName())))
//                .limit(5)
//                .collect(toList());
//
//        sortedJavaProgrammers.forEach((p) -> System.out.printf("%s %s; %n", p.getFirstName(), p.getLastName()));
//
//        System.out.println("根据 salary 排序 Java programmers:");
//        sortedJavaProgrammers = javaProgrammers
//                .stream()
//                .sorted( (p, p2) -> (p.getSalary() - p2.getSalary()) )
//                .collect(toList() );

//        sortedJavaProgrammers.forEach((p) -> System.out.printf("%s %s; %n", p.getFirstName(), p.getLastName()));


//        System.out.println("工资最低的 Java programmer:");
//        Person pers = javaProgrammers
//                .stream()
//                .min((p1, p2) -> (p1.getSalary() - p2.getSalary()))
//                .get();
//
//        System.out.printf("Name: %s %s; Salary: $%,d.", pers.getFirstName(), pers.getLastName(), pers.getSalary())
//
//        System.out.println("工资最高的 Java programmer:");
//        Person person = javaProgrammers
//                .stream()
//                .max((p, p2) -> (p.getSalary() - p2.getSalary()))
//                .get();
//
//        System.out.printf("Name: %s %s; Salary: $%,d.", person.getFirstName(), person.getLastName(), person.getSalary())


//        System.out.println("将 PHP programmers 的 first name 拼接成字符串:");
//        String phpDevelopers = phpProgrammers
//                .stream()
//                .map(Person::getFirstName)
//                .collect(joining(" ; ")); // 在进一步的操作中可以作为标记(token)
//
//        System.out.println("将 Java programmers 的 first name 存放到 Set:");
//        Set<String> javaDevFirstName = javaProgrammers
//                .stream()
//                .map(Person::getFirstName)
//                .collect(toSet());
//
//        System.out.println("将 Java programmers 的 first name 存放到 TreeSet:");
//        TreeSet<String> javaDevLastName = javaProgrammers
//                .stream()
//                .map(Person::getLastName)
//                .collect(toCollection(TreeSet::new));


//        System.out.println("计算付给 Java programmers 的所有money:");
//        javaProgrammers
//                .parallelStream()
//                .mapToInt(p -> p.getSalary())
//                .sum();

//        javaProgrammers
//                .stream()
//                .mapToInt(p -> p.getSalary())
//                .sum();

//        System.out.println(System.currentTimeMillis() - startTime);


        //计算 count, min, max, sum, and average for numbers
//        IntSummaryStatistics stats = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
//                .stream()
//                .mapToInt((x) -> x)
//                .summaryStatistics();
//
//        System.out.println("List中最大的数字 : " + stats.getMax());
//        System.out.println("List中最小的数字 : " + stats.getMin());
//        System.out.println("所有数字的总和   : " + stats.getSum());
//        System.out.println("所有数字的平均值 : " + stats.getAverage());


//        List<String> proNames = Arrays.asList(new String[]{"Ni", "Hao", "Lambda"});
//        List<String> lowercaseNames1 = proNames.stream().map(name -> {
//            return name.toLowerCase();
//        }).collect(Collectors.toList());
//

//        List<String> lowercaseNames2 = proNames.stream().map(name -> name.toLowerCase()).collect(Collectors.toList());
//        List<String> lowercaseNames3 = proNames.stream().map(String::toLowerCase).collect(Collectors.toList());


        //因为变量waibu被lambda表达式引用，所以编译器会隐式的把其当成final来处理
//        String waibu = "lambda :";
//        List<String> proStrs = Arrays.asList(new String[]{"Ni", "Hao", "Lambda"});
//        List<String> execStrs = proStrs
//                .stream()
//                .map(chuandi -> {
//                    Long zidingyi = System.currentTimeMillis();
//                    return waibu + chuandi + " -----:" + zidingyi;
//                }).collect(Collectors.toList());
//        execStrs.forEach(System.out::println);

//        proStrs.stream().map(str -> {
//            System.out.println(this.getClass().getName());
//            return str.toLowerCase();
//        }).collect(Collectors.toList());
//        execStrs.forEach(System.out::println);
//

//        List<Integer> nums = Lists.newArrayList(1,null,3,4,null,6);
//        nums.stream().filter(num -> num != null).count();
//
//
//        Stream<Integer> integerStream = Stream.of(1, 2, 3, 5);
//        Stream<String> stringStream = Stream.of("taobao");

//        Stream.generate(() -> Math.random());
//        Stream.generate(Math::random);

//        Stream.generate(Math::random).limit(10).collect(Collectors.toList()).forEach(System.out::println);
//
//        Stream.iterate(1, item -> item + 1).limit(10).forEach(System.out::println);
//
//        Stream<List<Integer>> inputStream = Stream.of(
//                Arrays.asList(1),
//                Arrays.asList(2, 3),
//                Arrays.asList(4, 5, 6)
//        );
//        Stream<Integer> outputStream = inputStream.
//                flatMap((childList) -> childList.stream());

//        List<Integer> nums = Lists.newArrayList(1,1,null,2,3,4,null,5,6,7,8,9,10);
//        nums.stream().filter(num -> num != null).distinct().mapToInt(num -> num * 2).peek(System.out::println).skip(2).limit(4).sum();


        //把Stream中的要有元素收集到一个结果容器中（比如Collection）。先看一下最通用的collect方法的定义（还有其他override方法）：
//        Supplier supplier是一个工厂函数，用来生成一个新的容器；BiConsumer accumulator也是一个函数，用来把Stream中的元素添加到结果容器中；BiConsumer combiner还是一个函数，用来把中间状态的多个结果容器合并成为一个（并发的时候会用到）

//        对一个元素是Integer类型的List，先过滤掉全部的null，然后把剩下的元素收集到一个新的List中。进一步看一下collect方法的三个参数，都是lambda形式的函数。
//
//        第一个函数生成一个新的ArrayList实例；
//        第二个函数接受两个参数，第一个是前面生成的ArrayList对象，二个是stream中包含的元素，函数体就是把stream中的元素加入ArrayList对象中。第二个函数被反复调用直到原stream的元素被消费完毕；
//        第三个函数也是接受两个参数，这两个都是ArrayList类型的，函数体就是把第二个ArrayList全部加入到第一个中；
//        但是上面的collect方法调用也有点太复杂了，没关系！我们来看一下collect方法另外一个override的版本，其依赖[Collector](http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html)。
//
//<R, A> R collect(Collector<? super T, A, R> collector);
//        这样清爽多了！Java8还给我们提供了Collector的工具类–[Collectors](http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html)，其中已经定义了一些静态工厂方法，比如：Collectors.toCollection()收集到Collection中, Collectors.toList()收集到List中和Collectors.toSet()收集到Set中。这样的静态方法还有很多，这里就不一一介绍了，大家可以直接去看JavaDoc
//
//

//        List<Integer> nums = Lists.newArrayList(1, 1, null, 2, 3, 4, null, 5, 6, 7, 8, 9, 10);
//        List<Integer> numsWithoutNull =
//                nums.stream()
//                        .filter(num -> num != null).
//                        collect(() ->
//                                        new ArrayList<Integer>(),
//                                (list, item) -> list.add(item),
//                                (list1, list2) -> list1.addAll(list2));
//        numsWithoutNull.forEach(System.out::println);

//        List<Integer> numsWithoutNull = nums.stream().filter(num -> num != null).
//                collect(Collectors.toList());
//        List<Integer> ints = Lists.newArrayList(1,2,3,4,5,6,7,8,9,10);
//        ints.stream().reduce((sum, item) -> sum + item).get();


//        allMatch：是不是Stream中的所有元素都满足给定的匹配条件
//        – anyMatch：Stream中是否存在任何一个元素满足匹配条件
//        – findFirst: 返回Stream中的第一个元素，如果Stream为空，返回空Optional
//        – noneMatch：是不是Stream中的所有元素都不满足给定的匹配条件
//        – max和min：使用给定的比较器（Operator），返回Stream中的最大|最小值
//        List<Integer> ints = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
//        System.out.println(ints.stream().allMatch(item -> item < 100));
//        ints.stream().max((o1, o2) -> o1.compareTo(o2)).ifPresent(System.out::println);


//        final int num = 1;
//        Converter<Integer, String> s = (param) -> System.out.println(String.valueOf(param + num));
//        s.convert(2);  // 输出结果为 3





    }
}