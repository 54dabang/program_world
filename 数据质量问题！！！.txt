1.放到一个大表
2.注意group by去重
3.注意条件互斥 case when
4.注意时间转换
5.注意xml 大小号的转义

-----------------------------------------


本地测试-研发测试-生产

边开发边测试边修正

模拟现实

思维导图

成为逻辑机器，与机器沟通


在软件开发的领域中，有害的编程习惯基本上都是由不良的编码习惯造成的，只有能改变这些不良习惯，工作起来会更轻松更有效率，本文是非正常程序员带来的文章，作者其他文章可文末看点击原文。



总出现错误的变量名和函数拼写

让很多人想不通的是，为什么大家都知道这个习惯对自己没有好处，为什么还是有人让他出现，以至于常常出现错误的变量名和函数名的拼写。而且这些错误的拼写总是隐蔽的很好，也很难被发现。

想要解决这个问题，我们可以在一个比较成熟的开发环境上写代码，又或是用程序员专用的文本编辑器，这些都可以减少拼写错误。也可以用特定的变量名和函数名，这样容易拼写，也容易发现写错的地方。


总不按规定的格式写代码
常用的缩进和格式化能让写出的代码一目了然，有什么错误一看就知道。而且别人看着也方便。

倘若你使用的是不会自动格式化的代码，那你可以考虑用代码美化软件，如Uncrustify，因为他允许用户自定义格式要求，接着它会按你的要求执行任务。


总不按规定的模块编写代码

长函数实现的路径太多，常常测试起来就很麻烦，所以要习惯于一个函数对应一个指令，这样及简短又容易理解和维护。


不要总是依赖IDE


不用多说，大家都知道，IDE能让你的代码写的又好又快。他们能提你想用的很多东西和选择提示。但也会存在一定的风险，若你不能确保自己有足够的细心，那么很容易会出错。

好的工具的确是个不错的帮手，他可以消除拼写错误，还可以提高我们的工作效率，如果你还不够细心，那同样用了这些也还是会出问题。


总写死密码

一些人总是喜欢在程序里写写死帐户名和密码，这样可以方便进入系统，虽然是方便了，但一样也方便了别人，所以这是不对的。
主要原因是硬编码远比你想的脆弱，如果不及时更正你的习惯，这将是个很大的而且不好修复的安全隐患。


没有使用加密保护数据

通常数据在互联网上传输都是需要加密的。不然在传输的过程中很可能被拦截。不要嫌麻烦，如果你不加密，出现了问题会让你更麻烦。如果写安全加密系统比较难，我们也可以使用经过验证过的标准加密库。


不要提前优化代码

善于写代码的程序员在写代码时的确是写的又快又顺畅，而后期的调试和维护则会难些。一定要想好策略，写好代码后再去找真正需要优化的地方以提高性能。


没有考虑好发展趋势

做这个项目的目的是什么？要做多大的规模？用户会是多少？也许有人认为这些好像和我们没什么关联，但是，如果你不好好考虑这些问题，怎么才能在刚开始时开发正确的程序框架。


不是人手越多进度越快

为什么每次要做的项目都比计划中的慢，当进度赶不上的时候，人们总是习惯性的增加人手，但事实上并不是增加了人手后进度就快了，有时反而是不升反降低了。


明知有问题还不变通

也有一些团队在做项目时发现进度远赶不上计划的时间时，就会做出拼命赶进度的情况。这样并不是办法，如果时间上真的比计划中要长很多，那么，说明你在对这个项目上预估的时间是有问题的。这时不要硬着头皮往上冲，应该从新调整时间才对。


---------------

1.如果性能不佳，就在应用层处理，别放在数据库层。
排序和分组就是一个例子。在应用层操作性能提升总是比在数据层操作容易。在这点上，无论是服务器端的MySQL数据库还是移动设备端的sqlite数据库都是如此。让我来给大家解释下：大家会对一些特定的查询应用方法虽然不能减少客户端的响应时间，不过还是可以减缓数据库服务器的压力，这样可以避免数据库成为所有客户端的瓶颈。
2.避免并发运算
有时可能没法避免，那么一定要知道，功能超强，程序当然就越复杂。最好避免直面线程。一定要在更高层次上处理问题。就拿ios系统的例子来说：GCD、分派和队列操作可是我们的好帮手。要明白一点就是，人的大脑是不具备推理暂存的和无限情形这个功能的，这可是个人经历过的惨痛教训，希望大家参考并且有用。
3.单一责任，对象状态尽量越少越好，实用才是硬道理。
4.简洁，组合，而非聚合
5.不些地方尽量不用注释，因为有时会适得其反。
慢慢的随着时间的流逝，你的那此注释可能会变的过时，但如果都不注释也是不对的，只要不是什么小事都拿来注释就好，大家要懂得把握好度，那个可以注释那个不用注释。有些地方我们可能还要写上大篇的注释，因为人的记忆总是有限的，可能过一天后就忘记了。
6.不要臆断
有时在做某个应用时你就会在想，这个应该不会有问题吧，有可能过不了多久你就会生自己的气，反问自己为什么要图省事，折返会让自己付出最多的代价，所以遇到疑问时一定要主动测试、积极验证。
7.遇到疑问时，和你的小伙伴积极讨论和沟通。
9.用户都不傻，他们只是不想浪费时间去了解你所谓的捷径。
10.
有些时候一个开发人员没有被派到维护自己曾参与创建的团队中去，发现问题了又不能参与，可能他们会觉得自己之前的付出都不值了，而过时却发现之前那些人员的维护又出了问题才要自己参与进去，这时一定不要怨天尤人，你要明白这正是你将要成为一个更为睿智的专业程序员的节奏。
12.努力让自己更积极的面对工作，这样我们才能觉得有趣。
13.有时系统的崩溃仍是自己不原看到的，所以一定要做好日常的监控，记好监控日志，避免出现各种异常，保持系统对故障的敏感度和及时警报。

---------------


好代码可以定义为易读、易懂、易调试、易改，最重要的还要少缺陷。显然，要想敲出一手好代码，是要花不少时间，但这在长久来看是有意义的，因为你可以花更少时间及精力去维护和复用你的代码。
事实上，我们可以将好代码等同于可复用的代码，这也是下面提到的重要原则之一。代码可能只是完成了编程工作中短期目标的特定功能，但如果没人（包括你自己）愿意复用你的代码，这代码在某种程度上可以说是不足且有缺陷的。要么太复杂、要么太具体、要么在不同情况下极有可能崩掉，或者其他程序员可能不相信你的代码。
下面无论你的经验水平如何，如果你始终如一地将下面的妙招应用到你的代码中（包括你的实验或者原型），那么一手好代码随手可得。
1、 遵循单一责任原则
函数在程序员的库中是单一最重要的抽象形式。可以被复用的机会越多，你要写的代码就越少，这些代码就越可靠。遵循单一责任原则的小小函数更有可能被重新使用。
2、最小化共享状态
应该将函数之间的隐式共享状态最小化，无论它是文件作用域变量还是对象的成员字段，这有利于显式地将所需的值作为参数。当明确函数实现所需结果时，代码变得容易理解和重用。
对此可以得出一个结论，你应该优先选择静态无状态变量而不是对象的成员变量。
3、本地化副作用
理想的副作用（例如打印到控制台、记录、改变全局状态、文件系统操作等）应该放置在单独的模块中，而不是分散在整个代码中。功能上的副作用往往违反了单一的责任原则。
4、优先选择不可变的对象
如果一个对象的状态在其构造函数中设置一次，并且不再次更改，则调试变得容易得多，因为一旦构造正确就保持有效。这是降低软件项目复杂性的最简单方法之一。
5、多用接口少用类
接受接口的函数（或C++中的模板参数或概念）比在类上操作的函数可重用性更强。
6、对模块应用良好的原则
将软件项目分解成更小的模块（例如库和应用程序），以实现模块化重用。模块的一些关键原则是：
  1. 最小化依赖关系
  2. 每个项目都应该有一个单一明确的功能
  3. 不要重复
你应该努力让你的项目保持小巧和明确。
7.避免继承
在面向对象编程中，继承，特别是虚拟函数在可重用性方面往往是一个死穴。我很少能成功地使用能覆盖类的库。
8.同设计和开发一样进行测试
我并不是测试驱动开发的铁杆拥护者，但在你开始编写测试代码时，编写测试自然遵循了许多指导方针。它也有助于早点将错误暴露出来。避免编写无用的测试，良好的编码意味着更高级的测试（例如，单元测试中的集成测试或功能测试）在显示缺陷方面更有效。
9.优先选择而不是手写标准库
我无法告诉你需要多久才能看到一个 std :: vector 或 std :: string 更好的版本，但它几乎总是浪费时间和精力。除了一个显而易见的事实，那就是你正在把 bug 引入一个新的地方。（见技巧10）其他程序员不太可能重用您的代码，而不是那些被广泛理解、支持和测试的代码。
10.避免写新代码
最重要的一点是，每位程序员应遵循：“The best code is the code that isn’t written”（最好的代码是不用被复写的代码）。你的代码越多，缺陷就越多，找到并修复 bug 就越困难。
在编写一行代码之前先问问自己，有没有一个工具，函数或库已经做了你所需要的功能？你真的需要自己去实现这个功能，而不是调用另一个已经存在的功能吗？
总结
编程就好比是一种艺术形式或者一项运动，你只有通过不断地练习，不断地向他人学习，才能不断地提高代码的质量，这些都将有利于你成为更加高效的程序员。
-------

说起项目，每个程序员都应该搭建过自己的项目，而我也搭建过数十个企业级或互联网级项目；在做企业级项目时也抽象了一套通过的开发脚手架ES方便开发，也做过一些通用的代码生成工具来生成通用项目架子或一些CRUD的代码。做这些平台或项目的时候或多或少给我一些启示和原则，而这些启示和原则一直指导着我内心方向，时刻指导我不偏离航线。

启示录
  ● 心中有原则
  ● 代码规范化
  ● 代码审查
  ● 代码重构
  ● 代码注释
  ● 代码逻辑抽象
  ● 工具类
  ● 项目闭环
  ● 持续改进
  ● 自动化
心中有原则
我认为这是搭建和维护项目的灵魂，失去了灵魂，项目虽然能运行，但是未来是没有方向的。来了需求就接，最后就是修修补补。其实我个人认为心中有原则就是有未来预见性，能根据现有需求预见到未来的需求发展。

比如我做过的一个项目是需要依赖数十个系统，那么之前的做法是让所有我依赖的系统在变更时调用我的同步接口把数据同步过来，此处存在这么几个问题：假设IP或域名变了，需要通知所有依赖方；假设我们出问题了，各个依赖方需要自己进行重试；假设数据出问题了，需要通知依赖方再同步一下数据；这种方式产生了严重的耦合。因此在设计新架构时我们要完全摒弃这种方法，改用异步通知+拉取依赖数据的方式，如通过MQ通知我们数据变更了，然后通过依赖方提供的接口拉取数据；这种方式的好处：和依赖方松耦合；假设数据有问题再调用下依赖方接口拉取下数据修复即可。因此这个项目的原则就是异步通知+拉取数据。而如果依赖方不提供这种接口我们就无法满足他们的需求。还有一种特例就是有些依赖方的数据可以一天全量同步一次，那么可以使用定时任务每天跑一次；即定时任务+拉取数据。也就是说最糟糕的情况就是使用定时任务+拉取数据机制。

比如我们接到一个需求说需要在你们页面上加一个数据来展示，此时要我们在展示页面时调用他们的接口拿到数据然后展示，此处存在的问题是：我们如果强依赖他们，那么他们的抖动将影响我们页面的体验，虽然可以降级，但是我们也不能容忍一点点抖动；因此我们提供的方案还是异步通知+拉取数据，将数据存储到我们自己这边；或者前端异步加载。

心中有原则，即必须有一个或几个中心原则指导我们的架构不偏离航线，否则项目将朝着腐朽的方向发展，越做越烂，最后没有几个人能维护这个项目。也不能因为图一时之省事，而为未来埋坑。

代码规范化
在写代码时也要有一些原则或规范化的东西来指导。比如我们的项目也分了什么DAO、Service、Controller；而每个人可能叫的名字/开发时思路不一样，那么我们必须统一起来，如：
1、没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类，因为我项目90%以上情况不需要接口这个东西，为了接口而接口只能使类的数量暴增；
2、所有类名必须见名知意，不能表达含义的全部重构；
3、配置文件的规范化，其实就是分类，按照功能分类配置；
4、比如spring bean的名字可以带上后缀， **Service、**Dao、**RpcService、**HttpService、**DataSource，见到名字后缀就知道这个功能是什么实现的。

不同公司的规范化可能不一样，遵循自己公司的一套规范化让代码朝着好的方向发展。

代码审查
代码审查对于一些新人我个人觉得是有必要的，因为新人来了不了解我们的原则、不熟悉我们的代码规范；此时应该通过代码审查机制来纠正或着带领着他们朝着我们一个共同的方向发展。通过代码审查可以纠正一些错误的或者不好的实现，找出一种当前最优的方案；还可以让新人意识到一些他觉得无所谓的问题。

代码重构
发现不好的或者坏掉的代码必须重构，因为如果觉得这段代码有问题，只要这个项目活着，未来的某一天肯定会出问题。一个没事或以后改吧可能导致一个重大的线上事故。因此发现不好的代码应该找时间立即重构。重构的目标也是架构原则指导的，不符合原则的就应该重构掉。

代码注释
很多人可能不屑于写注释，觉得代码就是注释；那我觉得可能是他没见过变态的业务需求，在我们项目中总是存在一些非常变态或着说是魔法代码，这些代码只有当时写的人理解，如果没有注释，你是不了解他那么做的意图的，会觉得很不可思议，但是实际上那就是业务需求。还有一些是我们依赖别人的接口，而这个接口也是非常不可接受的，但是已经有非常多的部门依赖不可能改的，此时也只能默默接受。对于这些变态的需求或者不可理解的需求写注释吧。

代码逻辑抽象
抽象是非常重要的一个过程，把项目中一些共性、经常用到的功能做抽象，抽象成公共代码或基础组件，这样对于这些功能就可以反复使用，这个过程是持续的，发现到共性就考虑重构抽象。这种方式可以提升我们的开发效率，简化业务逻辑实现。比如我们做的消息处理系统，只需要简单配置下就可以工作了。

工具类
在项目开发过程中，要带领团队成员使用常见的工具类，如apache commons、google guava等。使用这些工具类可以使得代码bug更少（最常见的如空指针异常）、代码更短、更易懂。

项目闭环
我们在做项目时发现有人把一个大项目分拆为多个子系统，然后这些子系统作为独立项目，然后当新人来的时候总摸不着头脑。因此我的做法是使用如Maven构建一个大项目，然后拆成各种子模块，整个项目都在一起的。

持续改进
技术每天都在发生变化，因此我们要持续学习，了解目前对于项目来说最优的解决方案，然后适当的应用到项目中，进行项目的持续改进，有时候就是需要革自己命，持续发展；但是一定要有好的回滚策略，任何改进不能牺牲稳定性或增加事故率为前提，这个风险要有很好的把控。

自动化
对于一些运维或者业务相关的功能我们需要自动化完成；如果我们经常处理一些问题，那么可以考虑为这些问题构建一个自动化工具，减少我们的重复劳动。


我个人认为要搭建一个好的项目，就是要有好的价值观，不打破自己设立的原则，自觉自律朝着好的方向发展，不偷懒；任何人破坏我的代码我都要想办法纠正过来。




宝贝 任何的代码都是建立在对业务的了解上 以前读别人代码的时候也骂过 后来了解业务以后 才发现自己才是弱爆了 相信你的团队 相信同事 他们不是SB


养成良好的代码编写习惯是很重要的，业务越复杂越不能写在一个方法里，应该提炼出若干个小方法。
31 楼 天亮了说晚安 2016-07-22
windlike 写道
zhuaiqilove11 写道
没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类，因为我项目90%以上情况不需要接口这个东西，为了接口而接口只能使类的数量暴增；
虽然我觉得这样很省事 有时候很乐意这样，但抽象接口很有必要啊。实现类里代码量大，很多私有方法，而接口里就很清晰明了，利于别人阅读，还有抽象出接口方便mock测试。
开涛 哥 我也是京东的 正在努力的跟着你学习。

有些人真的以为有了接口才算得上高大上，为了接口而接口，无语。


确实是，没有必要为了接口而接口，以前还跟同事激烈的讨论过哈。
30 楼 haozaige11213 2016-03-16
的确为了接口而创建接口真是扯淡 ， 我们项目一个DAO接口  实现类  一个service接口  实现类 ，我擦， 到最后成品发布 这接口也没体现任何价值 。 还有人在action  web直接操作上数据库，我就一个小小程序员 ，我说不了他 ，我只想说恶心
29 楼 xiaoliuf4565 2016-01-15
这些原则其实每个teamleader都清楚明白，可当需求变化太快，赶工期的时候，就顾不上这些原则了，为了尽快交付，偷工减料，最后整个项目百病缠身，无药可医，平时养成良好的开发规范真的太重要了，其次，单元测试真的不能少，少了要人命
28 楼 tracyking1986 2015-10-11
JDK7运行不起来，也不报错，请问怎么解决呢
27 楼 jinnianshilongnian 2015-09-14
fuhuijun 写道
代码重构 很是让人头痛，手下的人非常抵触，他们觉得相当于重新把功能做一遍，既然现在能稳定运行，为何要重构。。。
涛ge有没有遇到这种情况？

哈哈，这个还真的看团队文化。
26 楼 开奔驰遛宝马 2015-09-02
dongjianglake 写道
Plugin execution not covered by lifecycle configuration: org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1:native2ascii (execution: default, phase: generate-resources)

ES用Maven3导入有这个错误，有解决办法吗？

同问 删了不知道影不影响 请问你运行起来了吗？
25 楼 fuhuijun 2015-09-02
代码重构 很是让人头痛，手下的人非常抵触，他们觉得相当于重新把功能做一遍，既然现在能稳定运行，为何要重构。。。
涛ge有没有遇到这种情况？
24 楼 开奔驰遛宝马 2015-08-28

 还是不能运行啊这个es脚手架，既然分享了，就不能教教如何用吗？
23 楼 shenjianhua1984 2015-08-27
开奔驰遛宝马 写道
涛ge，能配个详细点的安装图文说明吗？弄到半路就不动了


碰到相同的情况，不知道怎么解决
22 楼 开奔驰遛宝马 2015-08-11
涛ge，能配个详细点的安装图文说明吗？弄到半路就不动了
21 楼 dongjianglake 2015-08-07
Plugin execution not covered by lifecycle configuration: org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1:native2ascii (execution: default, phase: generate-resources)

ES用Maven3导入有这个错误，有解决办法吗？
20 楼 dongjianglake 2015-08-07



19 楼 jinnianshilongnian 2015-08-06
michaelyang 写道
1、没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类
关于这点 我不太认可，必要的层次接口或抽象类 我个人觉得还是需要，尤其是当团队开发时，必要的接口和抽象类、能减少层次之间的耦合度.也利于后期的迭代开发

不能一棒子打死，还是看实际场景。 我就是不爽那种上来就抽象的实现。 对外暴露的服务也是走抽象，而不是具体；而内部自己用的有时候何必呢。
18 楼 ymm8505 2015-08-06
即将成为京东人

   多向tao哥学习
17 楼 michaelyang 2015-08-06
1、没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类
关于这点 我不太认可，必要的层次接口或抽象类 我个人觉得还是需要，尤其是当团队开发时，必要的接口和抽象类、能减少层次之间的耦合度.也利于后期的迭代开发
16 楼 ldw1228 2015-08-06
好好体会，持续改进
15 楼 longying2008 2015-08-06
关注涛&哥！！！
14 楼 47848484 2015-08-06
尔今尔后 写道
每次看到程序有大于10行以上的代码或者一个方法中有几十行,几百行的代码.我就想问写代码的人,你是在用心写代码吗?


宝贝 任何的代码都是建立在对业务的了解上 以前读别人代码的时候也骂过 后来了解业务以后 才发现自己才是弱爆了 相信你的团队 相信同事 他们不是SB

-----------------

1、信度与效度思维

这部分也许是全文最难理解的部分，但我觉得也最为重要。没有这个思维，决策者很有可能在数据中迷失。


信度与效度的概念最早来源于调查分析，但现在我觉得可以引申到数据分析工作的各方面。

所谓信度，是指一个数据或指标自身的可靠程度，包括准确性和稳定性，取数逻辑是否正确？有没有计算错误？这属于准确性；每次计算的算法是否稳定？口径是否一致？以相同的方法计算不同的对象时，准确性是否有波动？这是稳定性。做到了以上两个方面，就是一个好的数据或指标了？其实还不够，还有一个更重要的因素，就是效度！

所谓效度，是指一个数据或指标的生成，需贴合它所要衡量的事物，即指标的变化能够代表该事物的变化。

只有在信度和效度上都达标，才是一个有价值的数据指标。举个例子：要衡量我身体的肥胖情况，我选择了穿衣的号码作为指标，一方面，相同的衣服尺码对应的实际衣服大小是不同的，会有美版韩版等因素，使得准确性很差；同时，一会儿穿这个牌子的衣服，一会儿穿那个牌子的衣服，使得该衡量方式形成的结果很不稳定；所以，衣服尺码这个指标的信度不够。另一方面，衡量身体肥胖情况用衣服的尺码大小？你一定觉得荒唐，尺码大小并不能反映肥胖情况，是吧？因此效度也不足。体脂率，才是信度和效度都比较达标的肥胖衡量指标。

在我们的现实工作中，许多人会想当然地拿了指标就用，这是非常值得警惕的。你要切骨头却拿了把手术刀，是不是很可悲？信度和效度的本质，其实就是数据质量的问题，这是一切分析的基石，再怎么重视都不过分！

2、平衡思维


说到天平大家都不陌生，平衡的思维相信各位也都能很快理解。简单来说，在数据分析的过程中，我们需要经常去寻找事情间的平衡关系，且平衡关系往往是关乎企业运转的大问题，如市场的供需关系，薪资与效率关系，工作时长与错误率的关系等等。

平衡思维的关键点，在于寻找能展示出平衡状态的指标！也就是如图中红框，我们要去寻找这个准确的量化指标，来观察天平的倾斜程度。怎么找这个指标呢？以我的经验，一般先找双向型的问题，即高也不是低也不是的问题，然后量化为指标，最后计算成某个比率，长期跟踪后，观察它的信度和效度。

3、分类思维


客户分群、产品归类、市场分级、绩效评价...许多事情都需要有分类的思维。主管拍脑袋也可以分类，通过机器学习算法也可以分类，那么许多人就模糊了，到底分类思维怎么应用呢？

关键点在于，分类后的事物，需要在核心指标上能拉开距离！也就是说分类后的结果，必须是显著的。如图，横轴和纵轴往往是你运营当中关注的核心指标（当然不限于二维），而分类后的对象，你能看到他们的分布不是随机的，而是有显著的集群的倾向。

举个例子：假设该图反映了某个消费者分群的结果，横轴代表购买频率，纵轴代表客单价，那么绿色的这群人，就是明显的“人傻钱多”的“剁手金牌客户”。

4、矩阵化思维


矩阵思维是分类思维的发展，它不再局限于用量化指标来进行分类。许多时候，我们没有数据做为支持，只能通过经验做主管的推断时，是可以把某些重要因素组合成矩阵，大致定义出好坏的方向，然后进行分析。大家可以百度经典的管理分析方法“波士顿矩阵”模型。

5、漏斗思维


这种思维方式已经普及：注册转化、购买流程、销售管道、浏览路径等，太多的分析场景中，能找到这种思维的影子。

但我要说，看上去越是普世越是容易理解的模型，它的应用越得谨慎和小心。在漏斗思维当中，我们尤其要注意漏斗的长度。

漏斗从哪里开始到哪里结束？以我的经验，漏斗的环节不该超过5个，且漏斗中各环节的百分比数值，量级不要超过100倍（漏斗第一环节100%开始，到最后一个环节的转化率数值不要低于1%）。若超过了我说的这两个数值标准，建议分为多个漏斗进行观察。当然，这两个是经验数值，仅仅给各位做个参考～

理由是什么呢？超过5个环节，往往会出现多个重点环节，那么在一个漏斗模型中分析多个重要问题容易产生混乱。数值量级差距过大，数值间波动相互关系很难被察觉，容易遗漏信息。比如，漏斗前面环节从60%变到50%，让你感觉是天大的事情，而漏斗最后环节0.1%的变动不能引起你的注意，可往往是漏斗最后这0.1％的变动非常致命。

6、相关思维


我们观察指标，不仅要看单个指标的变化，还需要观察指标间的相互关系！有正相关关系（图中红色实线）和负相关关系（蓝色虚线）。最好能时常计算指标间的相关系数，定期观察变化。

相关思维的应用太广了，我提往往是被大家忽略的一点。现在的很多企业管理层，面对的问题并不是没有数据，而是数据太多，却不知道怎么用。相关思维的其中一个应用，就是能够帮助我们找到最重要的数据，排除掉过多杂乱数据的干扰！

如何执行呢？你可以计算能收集到的多个指标间的相互关系，挑出与其他指标相关系数都相对较高的数据指标，分析它的产生逻辑，对应的问题，并评估信度和效度，若都满足标准，这个指标就能定位为核心指标！

建议大家养成一个习惯，经常计算指标间的相关系数，仔细思考相关系数背后的逻辑，有的是显而易见的常识，比如订单数和购买人数，有的或许就能给你带来惊喜！另外，“没有相关关系”，这往往也会成为惊喜的来源哦。

7、远近度思维


现在与许多处在管理层的朋友交流后，发现他们往往手握众多数据和报表，注意力却是非常的跳跃和分散。如何避免呢？一是上文说的通过相关思维，找到最核心的问题和指标；二就是这部分要说的，建立远进度的思维方式。

确定好核心问题后，分析其他业务问题与该核心问题的远近程度，由近及远，把自己的精力有计划地分配上去。比如：近期你地核心任务就是提高客服人员的服务质量，那么客服人员的话术、客户评价通道、客服系统的相应速度等就是靠的最近的子问题，需要重点关注，而客户的问询习惯、客户的购买周期等就是相对远的问题，暂时先放一放。当然，本人经历有限，例子举得不恰当的地方还望读者们海涵。

8、逻辑树思维

如图的树状逻辑相信大家已经见过许多回了。一般说明逻辑树的分叉时，都会提到“分解”和“汇总”的概念。这里把它变一变，使其更贴近数据分析，称为“下钻”和“上卷”。

所谓下钻，就是在分析指标的变化时，按一定的维度不断的分解。比如，按地区维度，从大区到省份，从省份到城市，从省市到区。所谓上卷就是反过来。随着维度的下钻和上卷，数据会不断细分和汇总，在这个过程中，我们往往能找到问题的根源。

下钻和上卷并不是局限于一个维度的，往往是多维组合的节点，进行分叉。逻辑树引申到算法领域就是决策树。有个关键便是何时做出决策（判断）。当进行分叉时，我们往往会选择差别最大的一个维度进行拆分，若差别不够大，则这个枝桠就不在细分。能够产生显著差别的节点会被保留，并继续细分，直到分不出差别为止。经过这个过程，我们就能找出影响指标变化的因素。

举个简单的例子：我们发现全国客户数量下降了，我们从地区和客户年龄层级两个维度先进行观察，发现各个年龄段的客户都下降，而地区间有的下降有的升高，那我们就按地区来拆分第一个逻辑树节点，拆分到大区后，发现各省间的差别是显著的，那就继续拆分到城市，最终发现是浙江省杭州市大量客户且涵盖各个年龄段，被竞争对手的一波推广活动转化走了。就此通过三个层级的逻辑树找到了原因。

9、时间序列思维

很多问题，我们找不到横向对比的方法和对象，那么，和历史上的状况比，就将变得非常重要。其实很多时候，我更愿意用时间维度的对比来分析问题，毕竟发展地看问题，也是“红色方法论”中的重要一环。这种方式容易排除掉一些外在的干扰，尤其适合创新型的分析对象，比如一个新行业的公司，或者一款全新的产品。

时间序列的思维有三个关键点：一是距今越近的时间点，越要重视（图中的深浅度，越近期发生的事，越有可能再次发生）；二是要做同比（图中的尖头指示，指标往往存在某些周期性，需要在周期中的同一阶段进行对比，才有意义）；三是异常值出现时，需要重视（比如出现了历史最低值或历史最高值，建议在时间序列作图时，添加平均值线和平均值加减一倍或两倍标准差线，便于观察异常值）。

时间序列思维有一个子概念不得不提一下，就是“生命周期”的概念。用户、产品、人事等无不有生命周期存在。本人最近也正在将关注的重心移向这块，直觉上，生命周期衡量清楚，就能很方便地确定一些“阀值”问题，使产品和运营的节奏更明确。

10、队列分析思维

随着数据运算能力的提高，队列分析的方式逐渐展露头脚。英文名称为cohort analysis，说实话我不知道怎么表述这个概念，我的理解就是**按一定的规则，在时间颗粒度上将观察对象切片，组成一个观察样本，然后观察这个样本的某些指标随着时间的演进而产生的变化**。目前使用得最多的场景就是留存分析。

举个经常用的例子：假设5.17我们举办了一次促销活动，那么将这一天来的新用户作为一个观察样本，观察他们在5.18、5.19...之后每天的活跃情况。

队列分析中，指标其实就是时间序列，不同的是衡量样本。队列分析中的衡量样本是在时间颗粒上变化的，而时间序列的样本则相对固定。

11、循环／闭环思维


循环／闭环的概念可以引申到很多场景中，比如业务流程的闭环、用户生命周期闭环、产品功能使用闭环、市场推广策略闭环等等。许多时候你会觉得这是一个不落地的概念，因为提的人很多，干出事情来的例子很少。

但我觉得这种思考方式是非常必要的。业务流程的闭环是管理者比较容易定义出来的，列出公司所有业务环节，梳理出业务流程，然后定义各个环节之间相互影响的指标，跟踪这些指标的变化，能从全局上把握公司的运行状况。

比如，一家软件公司的典型业务流：推广行为（市场部）➡流量进入主站（市场＋产研）➡注册流程（产研）➡试用体验（产研＋销售）➡进入采购流程（销售部）➡交易并部署（售后＋产研）➡使用、续约、推荐（售后＋市场）➡推广行为，一个闭环下来，各个衔接环节的指标，就值得关注了：广告点击率➡注册流程进入率➡注册转化率➡试用率➡销售管道各环节转化率➡付款率➡推荐率／续约率...这里会涉及漏斗思维，如前文所述，千万不要用一个漏斗来衡量一个循环。

有了循环思维，你能比较快的建立有逻辑关系的指标体系。

12、测试／对比思维


AB test,大家肯定不陌生了。那么怎么细化一下这个概念？一是在条件允许的情况下，决策前尽量做对比测试；二是测试时，一定要注意参照组的选择，建议任何实验中，都要留有不进行任何变化的一组样本，作为最基本的参照。

现在数据获取越来越方便，在保证数据质量的前提下，希望大家多做实验，多去发现规律。

13、指数化思维

衡量一个问题的多个因素分别量化后，组合成一个综合指数（降维），来持续追踪的方式。

把这个放在最后讨论，目的就是强调它的重要性。前文已经说过，许多管理者面临的问题是“数据太多，可用的太少”，这就需要“降维”了，即要把

多个指标压缩为单个指标。

指数化的好处非常明显，一是减少了指标，使得管理者精力更为集中；二是指数化的指标往往都提高了数据的信度和效度；三是指数能长期使用且便于理解。

指数的设计是门大学问，这里简单提三个关键点：一是要遵循独立和穷尽的原则；二是要注意各指标的单位，尽量用标准化来消除单位的影响；三是权重和需要等于1。

独立穷尽原则，即你所定位的问题，在搜集衡量该问题的多个指标时，各个指标间尽量相互独立，同时能衡量该问题的指标尽量穷尽（收集全）。举个例子：当初设计某公司销售部门的指标体系时，目的是衡量销售部的绩效，确定了核心指标是销售额后，我们将绩效拆分为订单数、客单价、线索转化率、成单周期、续约率5个相互独立的指标，且这5个指标涵盖了销售绩效的各个方面（穷尽）。我们设计的销售绩效综合指数＝0.4＊订单数＋0.2＊客单价＋0.2＊线索转化率＋0.1＊成单周期＋0.1＊续约率，各指标都采用max-min方法进行标准化。

通过这个例子，相信大家应该就能理解指数化思维了。

拿什么拯救你我的航班？
今天早上，相信大部分人都注意到了一起UA强迫乘客下机的事件，知乎上已经有很多用户发表了看法 → 如何评价美联航（United Airline）强迫亚裔乘客下…查看全文
穷游锦囊9 天前编辑精选
发表于 对世界上瘾
题图
靠谱配方丨超仙超美的樱花果冻
这个是某天晚上冒出来的脑洞，当时正在跟同事讨论最近要上什么果冻布丁类的方子，然后我们突然想到：既然有樱花果冻（水信玄饼）、有气球布丁，那为…查看全文
熊吃蛋糕吗2 天前编辑精选
发表于 烘焙是生活的一道光
题图
押井守在《辐射4》里玩了数百个小时，他认为电影已经远远落后于游戏
“这是一个只有弱鸡村民和坏得不得了的恶徒and伪善者的美好世界。我不接任务也尽量不做新武器，这样就很好。”编辑丨或闪（知乎 ID@孔闪）押井守最…查看全文
触乐1 天前编辑精选
发表于 触乐

选择语言

操作系统.doc
想象程序是一个人 用心去和程序沟通
用音乐集中精神
分解每一步
知识太多 有的一句话概括就行了
总结 简洁  高效
抛出杂念 多写项目 多研究 底层 新的东西
有使命感 想想计算机界的前辈
用自然语言描述出来 理解后变成自己的语言
与程序沟通 编程是一场竞赛 破釜沉舟
做属于自己aiso公司的项目
学习方法
	听小说+抄写
官网+脚本/代码
所有的可能
画画的内功
文件结构
思路流程
编程是一个循序渐进的过程
边写边测试
从设计者的角度
官网 源码 案例 视频  百度
与现实工程对比
把握数据的流向与结构
信念 想象  梦 音乐辅助
节奏 流水
模版-循环改进
官网-百度的学习模式
尽量模拟企业开发环境
代码 脚本化
专注  忘我
格式规范 可替换
所有可能
变化
看官方源码 示例学习
专注于一个目标
程序 你只要了解它  是有生命的   用心 真诚跟它沟通
编程是快乐的
不断地做项目 更新简历 提升自己的核心竞争力
找到乐趣 兴奋点
制作模版
从简单到复杂
尽量考虑周全 在跑
画图

学习一门技术 关键要掌握它的
本质和作用
架构
开发流程
应用场景


站在程序的设计者角度 为什么这么设计

框架的二次开发 最能锻炼技术
就当自己是框架的设计者
一般的开源框架 并不能满足我们的需求
需要在其基础上 进行二次开发



编程的三大难点：
1、程序设计
2、综合
3、排错




程序思维

面向过程

基于对象

面向对象

面向切面

面向服务

面向接口

编程思想= 数据结构+算法

面向用例
面向操作
shell
cash


学框架
从目录结构
和架构图开始学习


把能做的先做了

讲故事

生活模拟

人与人沟通


产品经理
协调技术与市场

协调产品设计

互联网产品经理\

程序思维
以实际看得见的文件作为思维的依据
写程序一定要有自信






抱着玩的心态
讲故事
写程序靠的是想象力
搞技术 最怕半吊子
我没必要存在下去

离职原因：
在这儿可能我永远就只能拿1W
但是在外面不一定 可能拿到很多 2W 3W 4W

自我评价：
缺点：
懦弱 胆小
优柔寡断
爱面子 撒谎
太在意别人的看法
活得很累
开心一点 自由一点


写代码 就像开宇宙飞船一样 一切尽在控制当中

变与不变
分解
形象思维 设计

学程序的乐趣在于 将现实中的事儿 用程序帮你解决
程序是有生命的，有自己的逻辑 有自己的结构 有自己的判断；
//如同音乐的旋律一样

在程序退出时删除
//


编程 想象力



步骤：
需求 UML 原型设计 html js 界面 Action Manager Dao 数据库
先做后台代码 最后做前台页面输入验证
不要轻易修改之前的代码

断点 debug  控制台  数据库
程序是有顺序的

调试：
权限 debug 输出 控制台 源码

图 代码 项目

编程思想
	累加
		原理
	流程
	各种可能性
	一步一步来
	挑bug 极限法
	用图像来思考
	动作分析
	抽象
	大局与细节
	保持想象力
方法论
	分清变和不变
	先脉络后细节
	和现实世界联系起来
	万物皆对象
要善于适应需求的变化 良好的可扩展性 可维护性
模拟人与人之间的关系
简单
知道你在哪儿 将要去哪里 目标在哪里
条理 逻辑清晰
思考
前端 示例-排除法
容器
一切都是对象 都是代码
模型
目标
项目
简单 有效 直接是最好的方法
技术问题 逻辑（方法论）+哲学
数据结构是框架,算法是思想,程序是产品.
先找试验点 而后进行推广

一定要明确自己的思路以及可能造成的后果 一点都不能含糊
程序调试 自己造数据 别用别人的
每一步都要谨慎 放松 有逻辑性
未雨绸缪 胜过 发错找错
写程序就像自己造了一台机器人 觉得可以做任何事情


写程序 要保持轻松的心情 那么紧张 干甚？

你不是在写程序 而是和一个精灵在交流
和自己的想象力交流

拟物化解读

一步一步测试！！！！！！！！！！！！！！！！！！
修改前 记得备份！！！！！！！！！！！！！！！！！！！

绘画
记忆  用故事串联

收藏代码


2015-12-04

计算机的程序是由一系列的机器指令组成的，而指令就是要计算机执行某种操作的命令。
　　程序=算法+数据结构+程序设计方法+语言工具和环境
　　从计算机组成的层次结构来说，计算机的指令分：
　　微指令：是微程序级的命令，它属于硬件。
　　宏指令：是由若干条机器指令组成的软件指令，它属于软件。
　　机器指令：介于微指令和宏指令之间，通常简称为指令，每一条指令可以完成一个独立的算术运算或逻辑运算操作。

　　计算机程序就是指 电脑可以识别运行的指令集合。
计算机程序其实是一种代码而已！这种代码只不过是命名为一种语言（计算机语言），C语言是计算机语言的一种。学编程说白了就是跟学习英语的性质一样！首先你必须理解每个函数的意义。然后才可能熟练的运用........

获取输入，产生输出。




本质：转化为机器语言就是0跟1
如何运行：就是CPU读这些0跟1，处理，然后输出0跟1
联系：硬件是载体，程序是主体，你可以这么理解，硬件是为了实现程序而存在的，两个是相互依存的关系，缺一不可。打个比方，你现在要出门，硬件是衣服，程序是你这个人（光着身体的），衣服是为人而设计的，你想要出去，单有衣服不行，或者你光着出去也不行，穿着衣服出去才是最得当的。当然也有不同的程序共用同一个硬件，去实现不同的功能，就好比一件衣服穿在不同人身上，效果也就不同，一个道理！


电脑的本质是是数字运算，最基本的构成就是高电平和低电平，即1和0。不同的组合有不同的含义，不要想得太复杂，你可以把电脑想像成一个人，而各种1和0的组合则想像成走路、吃饭、睡觉、转弯等各种动作。而程序的本质就是预设好的各种1和0的组合，让硬件按程序工作。程序就是计算机系统的灵魂，而且必须依附在硬件上才能存在。






















------------------------------------------------
逻辑思维：

第一：常规思维VS逆向思维



 逆向思维的方式，将该数据代入DB进行验证是否存在，根据返回结果count>0与否进行判断。

第二：关于排序的问题

  排序字段的+-1，然后各自更新Update()，再重新做查询，即：重载页面。

第三:分配权限

 根据权限字段，将原有权限清空，再将所选择的新权限update()。
  一般选择权限使用checkbox选中。

第四：先删除后新增的思想

对已有值的字段通常我们采用update()来实现更新，
但有时，所需字段为空，所有选择insert（），
综合这两种情况，无论有无值，先执行删除，在新增。


  假设法	　　假设法就是对于给定的问题，先做一个或多个假设，然后根据已知条件来分析，如果与题目所给的条件矛盾，就说明假设错误，然后再用其它的假设。

排除法

	　　排除法：已知在有限个答案中，只有一个是正确的，对于一个答案，不知道它是否正确，但是知道这个答案之外的其它答案都是错误的，所以推断这个答案是正确的。

	　　著名侦探福尔摩斯说过：当排除了所有其它的可能性，还剩一个时，不管有多么的不可能，那都是真相。

反证法

	　　反证法是间接证明法一类，是从反面的角度的证明方法，即：肯定题设而否定结论，从而得出矛盾。具体地讲，反证法就是从反论题入手，把命题结论的否定当作条件，使之得到与条件相矛盾，肯定了命题的结论，从而使命题获得了证明。

	　　常见步骤：

	　　第一步：假设命题结论不成立，即假设结论的反面成立。

	　　第二步：从这个命题出发，经过推理证明得出矛盾。

	　　第三步：由矛盾判断假设不成立，从而肯定命题的结论正确。

等级和阶段

	　　等级：事物的发展过程分为多个等级，具备一定的条件，才能进入相应的等级。

	　　阶段：事物的发展过程分为多个阶段，具备一定的条件，才能进入相应的阶段。

	　　等级和阶段的作用：

	　　(1)区分作用。一些事物可以按照所处的等级或阶段来进行区分。

	　　(2)描述事物变化、发展的过程。例如：我们常说一个事物发展到什么阶段了，或者一个事物发展到什么等级了。

筛选思维

	　　筛选：通过淘汰的方式对事物进行的挑选。

	　　对于多层筛选，需要为每层都设置通过的条件，符合条件的事物可以通过，不符合条件的事物被淘汰掉，那些符合条件的事物再进入到下一级别筛选，从而实现一层一层的筛选。
#FormatImgID_0#

限定思维

	　　限定是为了缩小范围。语言中的定语就是为了限定主语和宾语，从而缩小主语和宾语的范围。

	　　(1)用形容词限定主语：

	　　例如：猫&rarr; 黑色的猫。黑色的这样的限定，就缩小了指定的猫的范围。

	　　(2)用名词所有格限定主语：

	　　例如：猫&rarr; 小明的猫。小明的这样的限定，就缩小了指定的猫的范围。

	　　(3)用数词限定主语：

	　　例如：两只猫。两只是数量上的限定。

计算法

	　　定性决定事物的性质，而定量是决定事物的数量，很多时候要用计算法来解决事物的定性和定量问题。

	　　(1)计算法解决关于定性的问题：

	　　例如：计算质子数来决定化学元素。

	　　例如：计算分数判断考试及格还是不及格。

	　　(2)计算法解决关于定量的问题：

	　　例如：在商店买了几件商品，一共花了多少钱。

	　　表格法

	　　表格上的一个值，是由某一个行值和某一个列值所确定的一个值。

	　　计算机的SQL数据库的数据就是以表格的形式展现的，随着计算机的发展，很多信息以表格的形式来组织。

	　　时间与空间

	　　时间和空间是物质运动的存在形式，空间是物质运动的广延性、伸张性，时间是物质运动的持续性、顺序性。

	　　点线面体

	　　点组成线，线组成面，面组成体。

	　　数学上，一条直线是由无数个点组成的。

	　　一根直线是一维的，一根曲线则是二维的。

	　　一个平面是二维的，一个曲面则是三维的。

	　　体是三维的。

	　　作图法

	　　作图法可以描述有些时空关系的问题。

	　　例如：基于一维坐标轴的绘图、基于二维坐标轴的绘图、基于三维坐标轴的绘图、基于极坐标的绘图、矩阵绘图、流程图绘图等。

	　　集合

	　　子集：对于两个非空集合A与B，如果集合A的任何一个元素都是集合B的元素，称集合A是集合B的子集。

	　　交集：一般地，给了两个集合A和B，由既属于集合A又属于集合B的所有元素组成的集合，叫做A与B的交集。

	　　并集：一般地，对于两个给定的集合A和B，把所有属于集合A或属于集合B的元素所组成的集合叫做A与B的并集。

	　　补集：一般地,设S是一个集合,A是S的一个子集,由S中所有不属于A的元素组成的集合,叫做子集A在S中的补集。

	　　建模

	　　对事物建立模型，就是按照需要，留下重要部分，去掉次要部分，从而简化事物、突出重点。

	　　聚集形式

	　　第一种：按功能聚集。功能相同或相似的事物聚集在一起，或者功能互补的事物聚集在一起。

	　　第二种：按性质聚集。性质相同或相似的事物聚集在一起(例如：在水中，很多疏水的物质趋于聚集)，或者性质相反的事物聚集在一起(例如：一个磁铁的南极和另一个磁铁的北极，相互吸引。)

	　　第三种：按传输关系聚集。前一个事物的输出是后一个事物的输入，为了方便传输而聚集。

	　　第四种：按照时间关系而聚集。

	　　第五种：随机聚集。

	　上位效应

	　　一个事物的选择受上一个事物的控制，既以上一个事物的选择为前提。
#FormatImgID_1#

	　　(1)肯定上位：上一个事物选择否定，才轮到下一个事物选择肯定或否定，如果上一个事物选择肯定，下一个事物就没有决定的机会。

	　　(2)否定上位：上一个事物选择肯定，才轮到下一个事物选择肯定或否定，如果上一个事物选择否定，下一个事物就没有决定的机会。

	　　例如：遗传学中的显性上位和隐性上位就是这个原理。

	　　定性与定量

	　　定性决定事物的性质，定量决定事物的数量、程度。

	　　例如：植物开红花或白花是定性，植物的高低则是定量。

	　　例如：黑鼠和白鼠的皮毛颜色是定性，而鼠的体重是定量。

	　　增、减、换

	　　(1)增是事物的增加，分为重复增加和不重复增加。

	　　例如：有的DNA插入了重复的序列，形成了重复的DNA片段。有的DNA受到异位DNA的插入，形成了增加但不重复的DNA。

	　　(2)减是事物的减少。

	　　例如：有的DNA片段缺失了。

	　　(3)换：就是替换，就是没有增加，也没有减少。

	　　例如：基因的点突变，就是碱基发生了变化。

	　　与增、减、换相对应的是增、删、改。增、减、换可以是自然发生的，也可以是人为发生的，而增、删、改通常是人为发生的。

	　转化与代换

	　　(1)转化：

	　　事物的转化，按照性质，分为两种情况：

	　　第一种：事物由一个状态转化为另一个状态。

	　　第二种：一个事物转化为另一个事物。

	　　事物的转化，按照方向，分为两种情况：

	　　第一种：单向转化。例如：纸在燃烧时，转化为灰，但是灰不能转化成纸。

	　　第二种：双向转化。例如：很多化学反应是可逆的。

	　　(2)代换

	　　代换和转化不同，代换是用另一个事物替换原来的事物。最常见的代换是等价代换。

	　　继承与补充

	　　(1)继承：

	　　继承分为两种：

	　　第一种：扬弃继承：新事物继承旧事物中好的方面，抛弃旧事物中不好的方面。

	　　第二种：权限继承：新事物只继承旧事物中新事物有权继承的方面。

	　　(2)补充：

	　　继承后，有两种情况：

	　　第一种：新事物对旧事物补充新的内容。

	　　第二种：新事物不补充新的内容，就是只保持继承下来的内容。

	　　补充分为两种：

	　　第一种：补充好的方面，从而继续发展事物。例如：在前人创造的成果的基础上，继续创新、发展、完善。

	　　第二种：补充坏的方面，从而阻碍事物的后续发展。例如：三国时期，蜀国的刘禅继承刘备的大业，却补充了坏的方面，以至于蜀国最终灭亡。

　    短板原理

	　　短板原理又叫木桶原理，就是一个木桶的盛水量取决于围成水桶的最短的那个木板，从而用来说明：对于有些事物，短处起到决定性作用，而长处却不起决定性作用。

	　　语言逻辑

	　　第一，句子(事件)关系：

	　　1.因果关系。

	　　意义：原因产生结果。

	　　关键词：因为、所以、因此。

	　　2.前提条件关系。

	　　意义：实现事件所需要具备的条件。

	　　关键词：只要、就可以、才能。

	　　3.目的关系。

	　　意义：做事都有目的。

	　　关键词：为了、使。

	　　4.顺序关系(承接关系)。

	　　意义：事件发生有先后的顺序。

	　　关键词：然后、之后。

	　　5.并列关系。

	　　意义：几个事件可以同时发生。

	　　关键词：同时。

	　　6.选择关系。

	　　意义：按照目的进行选择。

	　　关键词：还是、不是...就是、宁可...也不。

	　　7.递进关系。

	　　意义：一步步的加强或增加性质。

	　　关键词：不仅...而且、不但...还。

	　　8.转折关系。

	　　意义：先肯定，然后部分否定。

	　　关键词：但是、可是、却、然而、虽然...但是。

	　　9.假设关系。

	　　意义：假想的事件。

	　　关键词：如果、假如、要是、如果...那么。

	　　第二，充分条件、必要条件、充要条件和逻辑与、逻辑或、逻辑非

	　　充分条件：A可以推导出B，A就是B的充分条件。

	　　例如：因为A，所以B。

	　　例如：A，才能B。

	　　必要条件：B可以推导出A，但是A不能推导出B，A就是B的必要条件。

	　　例如：因为B，所以A。

	　　例如：B，必然A。

	　　充要条件：A可以推导出B，B也可以推导出A，A就是B的充要条件。

	　　例如：因为A，所以B，并且因为B所以A。

	　　例如：A才能B，并且B，必然A。

	　　逻辑与：多个条件都必须具备才行。

	　　逻辑或：多个条件只要具备其中任何一个就行。

	　　逻辑非：任何一个条件都不具备就行。

	　　1.A是B的充要条件，B多个充要条件之间是逻辑与的关系，都必须满足。

	　　逆推：事件B发生了，意味着事件B的所有充要条件都发生了。

	　　例如：

	　　充要条件：有钱才能旅游，旅游必须有钱。

	　　充要条件：不下雨才能旅游，旅游必须不下雨。

	　　如果旅游，必然有钱并且不下雨。(注意：是逻辑与的关系)

	　　2.A是B的充分条件，而不是必要条件和充要条件，那么B的多个充分条件之间是逻辑或的关系。

	　　例如：

	　　充分条件：周末才能旅游，但是旅游不一定是周末，也可以是放假的节日。

	　　周末或者放假的节日才能旅游。(注意：是逻辑或的关系)
思维方式有很多,在这浅谈一二：
发散思维法——它是根据已有的某一点信息,然后运用已知的知识、经验,通过推测、想象,沿着不同的方向去思考,重组记忆中的信息和眼前的信息,产生新的信息.它可分流畅性、变通性、独创性三个层次.
聚合思维法——又称求同思维.是指从不同来源、不同材料、不同方向探求一个正确答案的思维过程和方法.
目标思维法——确立目标后,一步一步去实现其目标的思维方法.其思维过程具有指向性、层次性.
逆向思维法——它是目标思维的对应面,从目标点反推出条件、原因的思维方法.它也是一种有效的创新方法.

移植思维法——是指把某一领域的科学技术成果运用到其他领域的一种创造性思维方法,仿生学是典型的事例.
联想思维法——相似联想、接近联想、对比联想、因果联想.

形象思维法——通过形象来进行思维的方法.它具有的形象性、感情性,是区别于抽象思维的重要标志.
演绎思维法——它是从普遍到特殊的思维方法,具体形式有三段论、联言推理、假言推理、选言推理等.
归纳思维法——它是根据一般寓于特殊之中的原理而进行推理的一种思维形式.


人的思维模式有两种，一种是资源导向式，另外一种是目标导向式。
资源导向式思维模式从自己手头现有的资源出发，按照自己能力和资源的规定，正向推进，稳打稳扎，步步为营。眼睛只盯住自己的篮子，篮子里面的才是菜，篮子外面的都是别人的，君子爱财，取之有道。
目标导向式思维，做任何事情都从目标出发，根据目标的要求，规划实现目标的路径，明了实现目标的条件，并在实际工作中努力去发现，借助和创造实现目标的条件，按照路径一步步推进最终实现目标。这是一种反向思维方式，是一种倒退法，倒推资源配置，倒推时间分配，链接战略战术，链接方法手段。天下的菜，只要能够为我所用，就都是菜，何必拘泥于是篮子里的还是篮子外面的。
依思维的属性，可分为抽象思维、形象思维、直觉思维等


大道至简，关于思维的方法与技能，古今中外的智者多有阐述，而我自己实践中最收益的几种也不过是老生常谈。不过考虑到这个问题特别重要，我还是简单重申一下。

首先我会区分三大类思维场景，然后在每一类下做出阐述。

1. 现象观察：最关键的是抽象思维的训练，即寻找事物背后的深层结构。

大多数面向消费者的产品，都至少有骨、肉、皮三层，但一般只以皮来魅惑受众，而我对骨更感兴趣。抽象也有不同层次，而我尽量寻求最深层也对各种案例解释性最强的结构，如幂函数、分形、抛物线即是，当然到不了这个层面也不会强求，但会尽量追求这个目标：好的抽象是无法被反驳的。

2. 创造新事物：最关键的是复合思维的训练。

单一技能或知识体系没有构造事物的能力，同理，灵光一现的灵感也只是万里长征第一步，因为构造新事物需要有意识地把不同结构、元素、形态、表达方式等聚合在一起，形成要素的结构化堆叠，并且在这一过程中，大多数情况下，底层结构的东西需要被掩盖。

3. 问题解决：最关键的是问题重定义能力的训练。

绝大多数的问题被错误的表述，因为如果提问者知道问题的正确表述方式，那么也许他就已经能解决这个问题，至少他已经找准了解决的方向。形象点说，大多数的问题提出就像，一个人在迷宫里走进一个死胡同，然后对这段死胡同做了一番描述，而问题重定义的目标则是还原整座迷宫。

然后强调一下，所谓训练，就是指你不仅知道这些方法，不仅是把他们作为一种知识来看待，更可贵的是把这种方法作为一种无时无刻不去实践的习惯，在日常生活学习工作中常常习练之才有意义。

最后补充两个观点：

a. 很多人很看重批判性思维，甚至把批判性思维当作思维能力的全部，是有失偏颇了。批判性思维的训练可以帮助你更好地辨别坏东西，但对你积累好东西则用处不大，例如在观察现象时，寻找深层结构可以让你经常有所得，而批判性思维则只是让你关注在一个个漏洞上（任何东西都有漏洞）。

b. 思维能力与知识不是相互独立，而是相辅相成的。单纯讲求思维训练没有意义，思维训练与高价值知识的学习齐头并进才是正道。所谓高价值知识指的是复用率高、适用性广、寿命长的深度知识。

其他像实操性比较强的视觉化思考、混沌直觉法就不展开讲了。

   思维方法的优劣是学习过程中收效大小的关键之一。
那么，在学习过程中有哪些较好的思维方法呢？一般说来，有以下六种：
    （1） 相似法。现实世界中，从宇宙星系到原子内部运动都存在着种种相似之处。例如，植物界普遍存在构造与功能相似的叶绿素；动物界普遍存在构造与功能相似的血红素。而叶绿素与血红素之间又有相似之处，即都是叶啉络合物。叶绿素是叶啉结合了镁元素，而血红素是叶啉结合了铁元素。这种相似的根源来源于植物的共同祖先——核前生物体。请看，因为相似关系竟将表面看来毫无关联的不同事物连成一个完整的封闭性系统了。又如，人类科技发展史和社会发展史很相似。许多民族都不约而同地经过了石器时代、陶器时代、铜器时代、铁器时代，同时这些民族的社会也经过原始公社、奴隶社会、封建社会、资本主义社会，几乎完全同步前进。
    再如，科学理论方面也存在着相似内容。物理学、化学、生物学、天文学、遗传学、声学等学科，因内部构成都起源于量子，于是产生量子学的各种不同分支：量子物理学、量子化学、量子生物学、射电天文学、量子遗传工程学、量子声学等等。
但是，相似不等于相同。相似是客观事物存在的相同和变异的矛盾的统一。因此，我们在学习过程中，既可以通过相似法中的相同部分看到事物前后之间的承袭关系，又可以通过变异部分看到事物前后之间的差异及发展关系。
    （2）相反法。事物之间不仅存在着相似现象，而且还存在着相反现象。有大必有小；有强必有弱；有虚必有实；有吸收必有排泄；有吸引必有排斥；有聚合必有分离；有守恒必有不守恒等等。在学习过程中，许多问题都可以从反而去剖析、反证、推理、理解、概括、设想、加深、巩固和扩展对下面知识领域的认识与把握。
    （3）破析法。任何一门科学知识都有它的逻辑性、系统性，往往给初学者带来很大的思想压力。这么厚一大本书，怎么读呀？或者，这么多公式、定律、规律、原理，怎么记得住呀？这时，我们就应该运用破析法去对付它们。
例如，学习外语，首先找出它与汉语的一般共同点与不同点，然后再找出它在语音、语法、词汇等各个大部分上的共同点与不同点。再逐步寻找出每一种具体的语音方法、语法现象、构词方式等细节方面的共同点与不同点。目前流行的一些日语速成教材，普遍应用了破析法来编写，所以才能收到速成的良好效果。
    （4）溯源法。任何事物者有其产生和发展的根源。它的本质与规律，只有通过追溯到本源上去，才能真正掌握和船长理解。因此，溯源法有很重大的实践意义。有人认为这种方法似乎是很浪费时间，不值得花这么多时间弄清它的来龙去脉。众所周知，“不求甚解”是学习最大的敌人之一。
在创造性思维中，溯源法往往是新的发明创造的动力。魏格纳因为发现非洲西海岸和美洲东海岸的轮廓彼此吻合得十分巧妙，追本溯源而创立了“大陆飘移学说”。
    （5）宏微对比法。许多事物在宏观上几乎完全一样，但由于微观上的点点差异，往往是性质完全不同的两码事。
    例如，学习外语时，因为一个字母不同，或者完全相同，但读音不同，声调不同，其词义完全不同之类的事例是很多的。无论英语、法语、德语、俄语、日语、西班牙语、阿拉伯语等，都有这种情况存在。因此，在学习时，就要时刻注意将它们进行宏观与微观的对比，才能牢固地掌握其词义及形态特征。
在创造性思维过程中，宏微对比往往是发现新的科研专题征的最好契机。贝克勒尔因为注意到了放在硫酸钾铀矿石上面的照相底片有了微观变样，而发现了天然放射性和天然放射线。贝尔则因为注意到了电报接收机上偶然听见的微弱声音而发明了电话。天文学家的每一次发现，几乎都是通过宏微对比的途径走向成功的。
    （6）扩展、缩微法。扩展是将已学过的知识作基础，向纵横两个方法延伸，以加深与巩固原有知识，并创造新的知识。匈牙利女翻译家卡莫·洛姆布就是用这个方法在二十五年中学会使用十六种外语的。其具体实施方法就是扩展法的具体化——类推法。所谓由此及彼，触类旁通，就是利用事物的共同性质或特征，扩展到其他事物扣去，进一步掌握新的知识。
    微缩是将已学过的宏观知识作显微验证。其具体实施方法是还原法。还原法的实质是把认识引导到由抽象到具体。一条定律、规律，一种原理、原则，一个公式、模式、要真正深刻理解和掌握，就必须将它作显微验证，举一反三，就像数学习题、化学实验、物理观察一样，反复进行，认真实践。


	前言 学“怎样做”，更要学“怎样想”
第一章 聪明看透世界要学会的思维方式
逻辑思维：精确把握事物的本质
形象思维：最常用的认知思维工具
质疑思维：尽信书不如无书
移植思维：用联想将创意跨界
发散思维：让自己来场“头脑风暴”
逆向思维：不妨反过来想想
平面思维：由点及面的思维导图
第二章 高效率做事要学会的思维方式
帕瓦罗蒂思维：你只能选一把椅子坐
动态思维：唯一不变的就是变化
哥伦布思维：换个角度看待平常事
辩证思维：360°去看问题
深入思维：穷根究底你会了解更多
富兰克林思维：习惯决定人的一生
灵感思维：期盼每一个激荡火花
借力思维：借人之力成己之事
变通思维：条条大路通罗马
联想思维：世界在联想中变宽广
杜利奥思维：让激情来得再猛烈些吧！
古特雷思维：不断寻找新的“顶点”
王羲之思维：清醒着才能搞定困难
阿甘思维：今天是唯一的现金
第三章 圆通人际关系要学会的思维方式
糊涂思维：现在吃亏是为了长远
钓鱼思维：放长线钓得贵人来
U形思维：退一步海阔天空
仁爱思维：最宝贵的财富是人心
施恩思维：不尴尬地帮助别人
蔺相如思维：路留一步，味让三分
卢维斯思维：低调做人，到哪里都没有错
求己思维：从别人的错误反省自己
曾子思维：言必信，行必果
孟母思维：近朱者赤，近墨者黑
罗斯福思维：感谢折磨你的人
柯立芝思维：给点忠言逆耳加点糖
赫鲁晓夫思维：身临其境才能理解别人
华盛顿思维：多个敌人不如多个朋友
爱迪生思维：艰难困苦是成功的预兆
肯德基思维：有志不在年高
第四章 白手起家成富人要学会的思维方式
弗罗伦斯思维：目标必须“看得见
超前思维：早走一步奠基优势
马太思维：一上来就占据有利地形
妥协思维：成功商人都诞生于妥协之后
高斯思维：初出牛犊不怕虎
史泰龙思维：成功源于坚持
博弈思维：长达一生的策略游戏
共赢思维：让每一方都满意而归
欧弗斯托思维：欲想服人先讨欢心
拉图尔思维：一个名字成就畅销品
登门槛思维：一步步实现既定目标
250思维：每个顾客都是人脉网
第五章 管人做领导要学会的思维方式
丘吉尔思维：这辈子最崇拜我自己
富兰克林思维：时间就是生产力
沈从文思维：先尊重才能被尊重
马斯洛思维：帮助他人也是帮助你自己
艾森豪威尔思维：比诸葛亮更聪明的管理技能
里根思维：担当起属于自己的职责
间接思维：先舍，才能后得
福克兰思维：避开讨厌的“不确定性”
破窗思维：最早清除“坏萌芽”
换位思维：将心比心再做事
布勃卡思维：留点余地给明天
奥格尔维思维：敢于与牛人合作
蓝斯登思维：让每个下属都快乐
第六章 自我心理调剂要学会的思维方式
高尔基思维：志当存高远
阳光思维：为心情装一个“雨刷器”
理性思维：管理自己的情绪
开放思维：打破妨碍你幸福的篱笆墙
减法思维：剪去不属于自己的幸福
斯坦利思维：信念的力量能贯穿一生
罗森塔尔思维：信自己就是成功了一半
甘地思维：放弃却是一种进步

人常见的思维盲区有哪些？
从电视上看采访雷明，他提到人有一些常见的思维盲区。比如：人只相信自己愿意相信的事。还有其他的例子吗？
3 条评论  分享
按投票排序
按时间排序
23 个回答

赞同
1435

张亮，耐心是美德
蔡振光、知乎用户、YEE MAN TSAI 等人赞同
关于这个问题，最好的回答者是巴菲特的搭档查理·芒格。他曾经将经常导致人类犯错的心理盲区总结为一篇长文。我在几年前看到英文后，请人翻译出来，发在杂志上。转发于此：

有兴趣读英文的请下载： http://www.rbcpa.com/Mungerspeech_june_95.pdf

人类误判心理
作者：查理·芒格（伯克夏·哈撒韦公司董事会副主席，沃伦·巴菲特的搭档）
本文是作者1995年在哈佛法学院的演讲

尽管我对人类误判这个主题很感兴趣——上帝知道，我在误判方面已经小有创造。我想，原因之一是我试图解决一下这个我从哈佛法学院毕业时没有解决的问题。

我意识到人类的非理性已有既定模式，但这种非理性如此极端，我毫无任何理论可以解释和解决，不过我看到了它如何极端，也看到它具有一定模式。我刚开始创建我自己的心理学体系，小部分靠随性阅读，大部分则来自于个人经历，我运用这个模式帮助自己安度此生。后来，我偶然读到《Influence》一书，作者是一位名叫鲍勃·恰尔蒂尼（Bob Cialdini）的心理学家，他年纪轻轻就在一个有2000人教师队伍的学校里脱颖而出，获得终身教席。这本书现在已经卖出30多万本，确实不同凡响。这是一本针对普通读者的理论书，它填补了我粗糙体系中的很多漏洞。在这些被它填补的漏洞中，我想我已经建立起了一套自己的体系，该系统是一个很好用的工具，我愿与你们分享。

我来到这儿是因为行为经济学。经济学如何不变作行为？如果经济学不是行为，它究竟是什么？我认为，很清楚的一点就是，所有真实必须相容于其他真实。如果有这种不相容情况，那就必须加以解决。心理学中若有任何东西是成立的，经济学就必须承认。反之亦然。所以我认为，从事经济学和心理学两者之间跨学科研究的人们，到这儿来完全正确。我想，过去很多年我犯下了很多错误。接下来，我将尽可能多地利用我的时间讲讲下面这个单子：

人类误判的24个标准成因（24 Standard Causes of Human Misjudgment）


1. 低估心理学家称之为“强化”或经济学家称之为“激励”的威力。

你可以说这个东西“众人皆知”，但我也认为在与我同龄的人群中，我这一生都位于最能理解“激励”威力的前5%之列。每一年，我都会惊讶地发现，我对此的认知都在不断增加。

联邦快递的例子是我最欣赏的有关“激励”效果的案例之一。该公司的内部系统有效运作的核心是：每晚，所有的包裹都必须从同一个中央位置快速运送出去，而且，如果整个运送过程不够迅速的话，系统也就出问题了。但是在正常运转之前，联邦快递度过了一段糟糕的时期，他们试图进行道德规劝，尝试了世上一切手段。最后，一些人想出了妙招：他们按小时给夜班工人计酬。如果按照不同的轮班情况支付报酬的话，系统会运行得更加良好。你看，这个办法生效了。

在施乐复印机的早期发展时期，乔·威尔森（Joe Wilson）辞去政府公职回到施乐，因为他无法明白为什么更新、更好的机器，销售状况却是如此糟糕，甚至卖不过他们那些功能更差的老式机器。当然，当威尔森到达施乐公司后发现，原来业务员销售老款机器的佣金更为丰厚。

在哈佛， B·F·斯金纳（B.F. Skinner）是一个真正将“强化”视为一个强大工具的人。不过，正如你所知，斯金纳在很多地方都丧失了名誉。然而，纵观哈佛大学实验科学的历史，斯金纳是少数几个顶尖人物之一。他的实验很有创造性，实验结果是“反直觉”的，但这些结论都很重要。搞坏斯金纳名声的是一种我称之为“大锤综合症”（man-with-a-hammer syndrome）的东西：对于一个拿着锤子的人来说，所有的问题都看起来像一个钉子。而斯金纳是学术史上的一个极端。一些聪明人也会患上这种综合症。稍后我们会探讨一下为什么人们会患上这种综合症。

2. 我的第二个因素是简单心理否定。

第一次给我极大触动的事情，是我家一个朋友，她那有着超级健将体格、超好学习成绩的儿子，从北大西洋的一艘航空母舰上驾机起飞后，就再也没有回来过。他的母亲，一位心智健全的女子，从不相信他已经死了。当然，如果你打开电视机，就会发现，那些罪行显而易见的犯罪分子的母亲们，也从来都认为自己的儿子是无辜的。这就是心理否定。有时，真相太残酷了，让人难以承受。所以，你就扭曲它，将之变得可以承受。我们在某种程度上都会这么做。这是一种造成可怕问题的常见心理误判。

3. 由激励导致的偏见，既存在于自己和其所信赖的顾问的脑海中，它创造了经济学家所谓的“代理成本”（agency costs）

关于这方面，我早期的认识来源于一名医生，他经常提着装了一篮子的正常人胆囊，带到位于内布拉斯加州林肯市一家顶级医院的病理学实验室里。在以质量控制闻名的社区医院里，他这么干了五年之后便被开除了。其中一个参与做出开除决定的老医生，也是我家的一位朋友，我问他道：“你说说，他是否认为这是他利用其才华的一种方式”——这个家伙的确医术高超，“每年通过致残、杀害一些人，以及欺诈，来过上阔绰的生活呢？”他回答道：“当然不是，查理。他认为胆囊是医疗祸害之源。如果你真的爱你的病人，就得以最快的速度把这个器官从体内取出。”

这是一个极端的例子，但说服力会较弱。“偏见”存在于任何一个专业领域和任何一个人身上，并且会导致非常可怕的行为。我已经70岁了，但还从来没有见过什么东西距客观真理只有一步之遥。要想见识激励的威力、以及理性但却可怕的行为的力量，如下例子可证：在国防部对在成本外再追加合同费用的做法已轻车熟路后，我们的反应就是在联邦法律中认定此种行为就是犯罪，而且是重罪。

顺便说一句，政府是对的，但这个世界——包括很多法律公司和其他地方——运转的很多方式之一，便是在成本体系之外又增加额外费用。而人的本性，我称之为“激励导致的偏见”，极大地促成了这种做法的泛滥。

人类的思维就是这种方式，这一事实极大地证明了，发明了收银机的人正是我们这个文明中最有卓有成效的圣徒——正是收银机让人难以实施不道德的行为难以发生，每台收银机都是一个伟大的道德工具。而且帕特森（Patterson）自己也清楚这点。他有一个小商店，人们从他那儿偷东西，害他总是赚不到钱。后来，有人卖给他两个收银机，小店立刻就赢利了。当然，他关了商店，开始从事收银机的买卖……

4. 由错误导致的心理倾向所具备的超级力量：偏见来自于人们对前后一致和坚守承诺的倾向，包括对避免或迅速解决认知不和谐的倾向，以及对所有结论——尤其是对已公开表达或者来之不易的结论——自我确认的倾向。

人类的思想跟人类的卵子很相像。卵子有一个“关闭”机制。当一个精子进入后，它就“关门”了，其余的精子就进不来了。人类的思想普遍有这类特征。并不是只有普通人才有这种倾向，物理学院的院长也会有这种倾向。根据马克斯·普朗克（Max Planck，著名物理学家）的说法，真正的创新、重要的新物理学理论从来没有真正被旧理论的捍卫者们所接受。而一个新的捍卫者则相对开放，较少会因为已有的结论而封闭自己的大脑。如果普朗克所描述的人群有这种前后一致和坚守承诺的倾向，使得它们死死抓住固有结论，哪怕是已经出现了证明其不成立的证据，你就能想象你我都是其中一分子的这个人群将会有怎样的行为。

当然，如果你公开了你的结论，就等于你把该结论重重打入自己的大脑。有很多学生冲我们大声喊叫，但他们不是在说服我们，而是在强化他们自己正在的新思想，因为他们大声喊出的正是他们打入自己脑中的。我认为正是教育机构创造了一种氛围，使得这种情况大行其道……从根本上来说，他们是不负责任的机构。在年轻的时候，不要被你所喊出的东西禁锢住大脑，这一点很重要。


5. 来自于“巴甫洛夫联想”（Pavlovian association）的偏见，曲解跨越了相关性，成为决策的的依据。


我从来没有为此上过心理学或是经济学的课程，不过我倒是在中学生物课上学过巴甫洛夫（巴甫洛夫，1849-1936，苏联生理学家，曾获1904年诺贝尔生理学-医学奖）。他们教了些什么你也知道，比如狗一听见铃声就开始流唾液什么的。那又如何？没有人（哪怕用最小的努力）把它与广阔的世界联系在一起。

事实是，在我们所有人的日常生活中，“巴甫洛夫联想”是一个巨大的、强有力的心理力量。的确，在经济学中，如果没有所谓的“次级强化”（secondary reinforcement）所扮演的角色，我们就不可能拿到钱。“次级强化”其实是一个可以在实验室中论证的纯心理现象。

我认为四分之三的商业广告都在运用巴甫洛夫理论。联想、纯粹的联想是如何起作用的，可以想想可口可乐公司，他们想把公司与一切令人愉悦的景象联系起来：奥运会中的英雄、优美的音乐……凡你想得起的。他们不想与总统们的葬礼相联系。当你看到一个可口可乐广告……联系就真正起效了。

所有这些心理倾向大部分或者全部是在下意识的状态下完成的，这让它们显得很“阴险”。现在，你又得了“花剌子模信使综合症”（Persian messenger syndrome）。中亚古国花剌子模的君王，会把带来坏消息的信使处死。你觉得这种情况已经绝迹了吗？那你应该看看CBS的前主席和CEO比尔·佩利（Bill Paley）过去20年的生活。他不听任何一个他不想听的消息。人们知道，如果报信人带给比尔·佩利的是他不想听到的消息，这个信使就要倒霉了。这意味着领导者们陷入了非现实的茧，这是一家巨型的公司，上帝啊，他确实在过去20年中做出了一些愚不可及的决策。

现在，“花剌子模信使综合症”仍是生机勃勃。我认为，没有人愿意把坏消息带给执行官们。因此最好的办法是像花剌子模信使那样，离开并躲藏起来， 而不是把战败的消息带回家。

说到经济学，在我长长的一生当中，一次又一次看到人们身上发生的一个非常有趣的现象。你们有两个产品，假设它们都是复杂的、技术性的产品。现在你就会想，根据经济学原理，如果A产品的售价是X元，Y产品的售价低于X元，那么，Y产品的销路将比售价高于X元时要好。事实上并非如此。在很多情况下，提高产品价格后所获得的市场份额，要大于把价格降到竞争对手以下时获得的市场份额。但事实上，经济学界直到最近才发现这个再明显不过的道理。

6. 从互换倾向中产生的偏见。包括一个人会按照其他人对他的期望来行动的倾向。

在这方面，查尔蒂尼（Cialdini）做得相当不错。查尔蒂尼称之为“顺从参与者”的那类人，很容易就成为一个容易上当受骗的人。 无论如何，互换倾向是一个非常、非常强有力的现象。查尔蒂尼通过一个实验向展示它的力量：他跑到一个校园里，请人们带少年犯去动物园。因为是在校里，平均每六个人中就有一个答应了他的请求。在他积累了一些数据之后。在同一个校园，他又询问其他人：“喂，你愿意在一周里牺牲两个下午陪一个少年犯到什么地方转转吗？”结果，100%的受访者都拒绝了他。在他问了第一个问题后，他退了一小步，问道：“你愿意抽出一个中午陪少年犯去动物园吗？”至少有一半人同意了。采用了这种策略后，他的成功率是以前的三倍。

现在，如果人类的思想在下意识状态下以那种方式被操纵，而你自己并不知道，我经常说的一句话是：“你就像是只有一只腿而去参加踢屁股比赛的人。”我的意思是，你真是把大把的时间花在了你负担不起的外部世界里。在这个所谓的角色理论中，别人对你的期待是怎样的，你就趋向于以怎样的方式行动，如果再想想社会的组织形式，就会明白，这就是互换。

一个叫琴巴多（Zimbardo）的心理学家曾在斯坦福做了一个试验，他把参与实验者分为两组，一组扮演警察，一组扮演囚犯。两组人都以人们期待的方式把自己的角色付诸行动。五天后，琴巴多不得不停止实验，因为看守们成了虐待狂,而囚犯们变得非常压抑。而在刚开始,实验者都是普通而友好的大学生。这项试验变成了所谓的情境恶魔的经典教程，即使一个好人被放入到糟糕的环境，也可能变成野兽。我的意思是……这很可怕。但是，琴巴多被严重曲解了。不仅仅是互换倾向和角色理论导致了那个实验结果，还有前后连贯和承诺的倾向也起了作用。每一个人，不论他扮演的是警察还是囚犯，表演本身已经打入了脑际。

无论你在哪里，这种前后连贯和承诺的倾向都在影响你。换言之，你的想法可能会改变你的做法。不过，更为重要的可能是，你的做法最终将会改变你的想法。你可以说，每个人都知道这个。我想要告诉你的是，我本人没有尽可能早、尽可能多地了解这个道理。

7. 高夫曼（Henry Kaufman）曾经睿智地谈到过这个：由社会证据（Social poof，即他人的结论，尤其是在天生的不确定性和重压条件之下产生的结论）的过度影响所产生的偏见。

关于这一点，心理学家们常用的一个案例是基蒂·珍诺维丝小姐（Kitty Genovese）的例子。1964年，她被歹徒当街刺杀身亡。当时有50个或者60、70个人，我也不知道究竟有多少人亲眼看到她被歹徒追逐长达半个小时的过程，但是没有一位目击者出手相助，甚至也没有人打电话报警。一种解释是，每个人都看到其他人毫无行动，所以自然而然地产生了这样的社会证据：什么都不做才是正确的做法。依我的判断，用这个理由解释珍诺维丝的例子还不够，它仅是一部分原因。微观经济的想法和收益/损失比率也在其中扮演了它们的角色。我反复地想过，在现实中，心理观念和经济观念互相影响。对这两者都不了解的人简直就是个该死的笨蛋。

一些大商人们也被卷入了这些社会证据的大浪中。还记得几年前吗？有一个石油公司收购了一个化肥公司，随后，每一个大石油公司都跑去买了一个化肥公司。实际上，这些石油公司根本没有更多的理由去买化肥公司，但是他们根本不知道该去做什么。如果埃克森石油公司（Exxon）这么做了，美孚石油公司（Mobil）就有足够的理由这么做。反之亦然。我想现在它们都这么做了，这完全是一场灾难。

如果你想想关于我讲过的教义，也就是强化的力量——你做了某事，后来市场上扬了，你得到了报酬、奖励和喝彩。如果你在市场上打赌，市场就与你相伴。这儿也有社会证据。我的意思是市场上的价格是社会证据的最终表现形式，折射了其他人的想法。你为什么要期望共同市场水平一直是有效的，哪怕是在1973-74市场整体处于低谷，亦或在1972年或是什么年头50家大公司都处于它们的全盛时期？如果这些心理上的观念都是正确的，你将会期待一些非理性的浪潮，它们带来了整体水平，因此他们与理智是不协调的。



8. 让这些经济学家爱上有效市场理论的是优雅的数学。


毕竟，数学是他们已经学习了的。对于一个拿锤头的人来说，每个一问题都非常像是一个钉子。选择性的真理有一点凌乱，他们已经忘记了伟大的经济学家凯恩斯，我记得他曾说过：“粗糙的正确胜于精确的错误。”

9. 来源于感情、感觉和认识的对比导致的抽曲的偏见

查尔蒂尼在他的课堂上做了一个伟大的实验：他拿了三桶水，一桶热水，一桶冷水，一桶常温水。他让一个学生把左手放入热水中，右手放入冷水中，然后再把两只手同时放入常温的水中。当然，一只手感觉很热，另一只感觉很冷。这是因为人的感觉器官在强烈的对比之下被过度影响了。没有绝对温标，只有相对温度，而且还有量子效应（quantum effect）在其中。

查尔蒂尼举了房地产经纪人的例子。如果一个乡下人到城里来找你买房，你首先要做的就是带他去两套你见过的最贵的房子，然后，再带他去看一些中等昂贵的房子，最后你就能搞定他了。这套办法非常有效，这也是销售员这么做的原因，它总能起作用。

生活中的意外也能对你做同样的事情，它能毁了你的生活。在我那个年代，妇女在结婚前必须一直呆在房子里，我见过一些非常想结婚的女人一手造成了糟糕的婚姻，因为这些女人结婚前的居住条件很差。我还见过一些非常糟糕的再婚，就是为了提高哪怕一点点她们的居住条件（头婚给她们带来的居住条件恶劣）。你们在笑，你会认为你不会做这样的事，但我要告诉你，你会的。

我有一个朋友，靠继承的财产为生。他有一次对我说的话很让我受用。他说：“查利，如果你把一只青蛙放进滚烫的开水中，它会立刻跳出来。但是如果你把它放在温水中，然后给水慢慢加热，最终，它将会被开水煮死。”我不知道青蛙会不会真的如他所说的那般。但是我知道的很多商人的确是如此的。这还是对比现象（contrast phenomenon）。但他们都是些位高权重的大人物。我的意思是，他们不是蠢蛋。当变化一点点靠近你是，你很可能无法查觉。所以，如果你要成为一个具有良好判断力的人，你必须对于这些因为对比在你脑中所产生的扭曲有所反应。



10. 权威人物的过度影响所造成的偏见


我想，关于米尔格伦实验（Milgrim experiment）的心理学论文大概有1600篇。在这个试验中，有一个扮演权威的人，他告诉被实验对象的人他们必须对完全无辜的人持续施予电击。令人惊讶的是，即使被实验者开始变得紧张与动摇，当他们被命令施予最大电击的时候，有超过三分之二的人还是会照做。米尔格伦想通过这个实验展示希特勒是如何成功的，这个实验的确是抓住了这个世界的想象力。从米尔格伦实验的观点来看，纳粹的犯罪活动和希特勒的成功便不难理解。部分原因是政治正确和权威的过度影响力。人类天生具有服从权威的倾向，即使这服从是错误的。

你也许会喜欢下面这个例子：有两个飞机驾驶员，一正一副，正驾驶员是一个权威人物。他们没有在飞机里，而是在模拟状态下完成了这个实验。副驾驶员在模拟状态下被训练了很长一段时间，他知道他的职责就是防止坠机。实验过程中，那个正驾驶员做了一些连傻瓜都能看出来足以导致坠机的操作。但副驾驶员只是安静地坐在那儿，因为正驾驶是权威角色。25%的情况下，飞机都会坠毁。我的意思是，这是一个强有力的心理倾向。它不像一些人认为的那么强大，我们一会儿再谈这个。

11.来自于“剥夺超级反应综合症”（deprival super-reaction syndrome）的偏见。包括由当下的或潜在的匮乏造成的偏见，包括可能发生的对几乎已经拥有或从未曾拥有的东西的去除。


我有一只很可爱的小狗，一只“无害”的小狗。唯一让它咬人的方法就是你从它嘴里抢东西。如果你在工会组织中的劳工谈判中试图做出让步，你就会知道，我们每人都会有小狗的那种反应。

我有一个邻居，这位老前辈的房子周围有一片小岛，他的隔壁邻居在那小岛上种了一株小小的松树，大约有三英尺高。以前，那位老前辈能以180度的视角看到他房前的港口，有了这株小树，他的视角变成了179又3/4度。从此，两人便像Hatfields家族和McCoys家族一样，结下世仇，这种仇怨仍在继续。

我的意思是，人们对那些微不足道的“减少”真够疯狂的。如果你对此有所动作，你就又陷入了互换倾向。因为你们不仅互换友爱，你们还会互换仇恨，并且所有的事情都会升级。这如此巨大的疯狂都源于人们下意识地把自己失去的东西、或者几乎得到又没得到的东西看得太重。

在这方面，新可乐（New Coke）是一个极端的商业案例。可口可乐是世界上价值最高的品牌。我们是它的大股东。我想我们理解这个品牌。可口可乐有很多聪明的工程师、律师、心理学家和广告主管等等。在过去的100年中，他们花了很多时间让人们相信商标有着很多无形的价值。人们会把这个商标与某种口味联系在一起。但他们不会对人说“这个口味改良了”，因为你不能改良一种口味。口味是事关体验的事。我的意思是你可以改良一种去污剂或是什么东西，但我认为你不能把某种口味做什么大的改变。所以，他们得了这种巨大的“剥夺超级反应综合症”。

百事可乐在几星期内推出了装在百事瓶内的老可乐（old Coke in a Pepsi bottle），结果造成了惨败。极端的愚蠢！顺便说一下，郭祖耶塔（Goizuetta，可乐当时的CEO）和齐奥（Keough，可乐历史上一位颇有影响的前总裁和公司董事）都是聪明而有趣的人，但正是聪明人做出了这些可怕的、愚蠢的错误。你怎么能够不明白“剥夺超级反应综合症”？但是人们对得和失总不能做出均衡的反应。



12. 源于羡慕/嫉妒的偏见

那些抚养兄弟姐妹或是试图经营法律公司、投资银行甚至一家工厂会对羡慕一词有所了解。我曾听巴菲特不止一次说过：“不是贪婪，而是嫉妒推动着世界前进。”

你又去一次去浏览心理学调查课程，打开目录，你会发现一本1000页的书，它是空白的。关于这方面，学术界有一些盲点，但它是一个拥有强大力量的东西。它在很大程度上都是在潜意识中运作。每一个不理解它的人都呈现出一些他们不应该有的缺点。

13. 源于化学倾向的偏见

我们不用非得讨论这个话题。我们都见过得太多了。不过有趣的是，如果有必要的话，它如何总是导致道德崩溃，而且总是引来人们对它的大力否定。在先前我们谈到的飞行员的例子中，它起到了恶化作用，扭曲现实的倾向，因此，它还是可以忍受的。

14. 来源“错误的赌博强制”（mis-gambling compulsion）的偏见

关于这方面，你可以在标准的心理学调查课程中找到斯金纳做出的对其唯一的解释。当然，他为他的鸽子和老鼠创造了一个可变的强化比率。他发现，这将比任何其他强制模式都能更好地影响行为。他说：“哈，我已经解释了为什么赌博在文明社会中如此有力、让人上瘾。”我认为，在在相当大的程度上，他说的是真实的。但是斯金纳似乎认为这是唯一的解释，但事实是，那些现代机器和技术的遗赠者知道很多斯金纳不知道的事。

如果你去玩老虎机，你会得到栅栏、栅栏、胡桃木。它一次又一次地发生。所有这些你都近距离脱靶了，这就是“超级剥夺反应综合合症”（deprival super-reaction syndrome）。上帝啊，发明了这款机器的人懂得人类心理学吗？对于高智商人群来说，他们在你做出决策的地方有扑克器（poker machines）。可以说，你能跟扑克器玩“二十一点”。这个很有趣， 我们已经做到了，用电脑来破坏文明。

无论如何，“错误的赌博强制”是一个非常非常强大和重要的东西。看看我们的国家正在发生的事吧：每个印第安人都有一块自留在，每一个河镇，再看看那些被股票经纪人和其他什么人毁了的人们。如果你去查阅标准的心理学教科书，关于这方面的介绍，你几乎什么都找不到，也许会有一句谈到斯金纳的老鼠（Skinner's rats）的话例外。这对那个主题并不是一个充分的介绍。




15. 源于喜欢的扭曲的偏见。包括特别喜欢自己、喜欢自己的种类、自己的主意和结构，还有当被自己喜欢的人误导时，变得极为敏感的倾向。不喜欢的扭曲，偏见即源自那里。喜爱的扭曲的互换和不能恰当地向你不喜欢的人学习的倾向。




如果你看看哈佛法学院某些区域里发生的战争，你能发现，非常聪明的人也陷入了这个几乎是病态的行为。并且这些都是非常强有力、非常基础、下意识的病态倾向，或者至少一部分是下意识的。

现在让我们回到斯金纳，再回顾一下“拿锤综合症”（man-with-a-hammer syndrome ）。为什么“拿锤综合症”一直存在？如果你停止考虑此事，这就是激励导致的偏见。他的专业名誉和他的所知密切相关。他喜欢他自己，他喜欢他自己的想法，他把这些想法向其他人表达，这是一致性和承诺倾向。我的意思是，四个或五个基本的心理倾向组合在一起，创造了这个“拿锤综合症”。

一旦你意识到你不能真正购买自己的思想——你能买一小部分，但很大一部分你在世界上买不到——你在生活中已经学到了非常有用的一课。萧伯纳的小说《医生的窘境》（The Doctor's Dilemma）中有一个角色说：“说到底，每一种专业都是针对外行的共谋。”不过它说得并不非常正确，与其说它是共谋，倒不说它是一种下意识的心理倾向更为贴切。

他还告诉你什么对他是有益的。他并不承认他比那个从人体里取出正常胆囊的医生犯下的过错更多。他认为他自己的办法能治疗癌症。他认为他正在对抗的恶魔是最大、最为重要的恶魔。事实上，与你们面对的恶魔相比，他们可能非常微不足道。因此，你在这世上从你的付费顾问那里得到的建议充满了可怕的偏见。对你来说真是悲哀！

有两种解决方式：你可以雇佣你的顾问并提供一个windage factor, 就像当年我做一个来复枪手时做的那样。或者你可以学习你顾问的买卖的基本元素。顺便说一下，你不用学太多，因为你只要学一点，你就能让他解释为什么他是对的。

基本上，它的效果非常糟糕。在我漫长的生活中，我从没见过哪一个管理顾问的报告不是以下面这样的段落结尾的：“这种情况下，真正需要的是更多的管理咨询”每一次都是这样结尾。我总是翻到最后一页。当然，伯克夏公司没有雇佣这些顾问。有时，我有一些非营利机构，在那里，一些傻瓜会聘请顾问。（笑声）

16. 来自于人类头脑中非数学性质的偏见

可以问问可口可乐公司，该公司把可用性（availability）提升为一个长期的信仰。如果有用性能改变行为，你将会喝非常多的可乐（如果可乐总是能得到的话）。我的意思是可用性确实改变行为和认知。尽管如此，虽然我认识到了这一点，但从我个人来讲，我不喜欢它。除非它是做为一个更大的子系统的一部分。不仅仅是缺乏有效性才扭曲你的判断。这个单子上的所有一切都扭曲了判断。我想训练自己在精神层面上对这个单子进行浏览，而不是直接扑向有用性上去。这就是为什么我要用我的方式陈述它。

在某种意义上，这些心理学倾向让事物变得难以获取。因为如果你迅速扑向一个事物，接下来因为你扑向了它，连贯性和承诺倾向把你关了禁闭。额外的鲜活创造了不可获取性。

我认为我们应该讨论一下约翰·古特弗洛恩特（John Gutfreund）。这是一个非常有趣有人类实例。至少在整整一代人的时间里，每一个正统的专业学校都会讲授这个实例。古特弗洛恩特有一个很受信任的职员，但有一次这个职员被意外地发现（不是坦白）向政府说谎，并且做假账，这相当于伪造罪。这个人立即说：“我以前没来没这么干过。我今后再也不这么做了。这是绝无仅有的一次。”当然，很明显，他是在试图帮助政府还有他自己。因为他认为政策在通过了一项他反对的法律时保持了足够的沉默。最终，如果政府不准备对所罗门证券工程的债券交易员以足够多的关注，它能成为一个什么样的政府？

无论如何，这个家伙是那个小圈子中的一员。有很多心理学力量在起做作用。你认识这个家伙的老婆，而他正站在你面前，你就会产生同情心。他也会向寻求你的帮助。这其中就有很多心理倾向在发生效用。还有，别忘了这个事实：他是帮你赚了大钱的团队中的一份子。 无论如何，古特弗洛恩特没有把他撤职，当然，那个家伙此前这么干过，他今后肯定还会这么做。现在看起来你仿佛想让他再干一次似的。也许只有上帝才知道你像什么，但这并不好。那个简单的决定毁了古特弗洛恩特，非常容易就毁了他。

See's Candy 公司（我们的附属机构）有一个关于小老妇人的孤立例子，她把手伸进了公司的钱柜。她说什么？“我以前从来没有这么干过，我今后永远也不会再这么做了。这将会毁了我的生活。请帮帮我。”你认识她的孩子和朋友，她已经30岁左右了，站在糖果店柜台后面，脚踝肿胀。当你是一个老妇人的时候，这并不是一种光鲜的生活。你富有，有权势，她站在那里说到：“我以前从来没有这么干过，我今后永远也不会再这么做了。”她以前没有那么做的可能性有多大？如果你准备一年抓获10起盗用公款案件，有多少是第一次犯案？ 还有那些以前做过今后还想再做的人，他们又将会说些什么？在See's Candy公司的历史上，他们总是说：“我以前从来没有这么干过，我今后永远也不会再这么做了。”我们撤了他们的职。不开除他们将是非常有害的，因为这种可怕的行为会蔓延。

记住……这是什么？Serpico? 我的意思是你让那个员工……你已经拿到了社会证据，你染上了激励导致的偏见，你已经有了很多将导致可怕行为蔓延的心理因素……你所在的地方会腐烂，文明会腐烂。这不是正确的举动。我因为某人带情妇去外国长期旅行而解雇他，当我知道他有妻子和孩子时，我会付给他遣散费。我介意的不是通奸，而是盗用、侵吞。

17. 来源于额外鲜活的证据带来的过度影响的偏见

今天我在这里做这个小小的演讲，我至少损失了3000万美元。因为我曾经买了300股某种股票，那个家伙把我叫回来说：“我还有1500股以上的股票。”我说：“你帮我保留15分钟，我再想想。”这个公司的CEO——在我的一生中我见过许多鲜活的怪异之事，但是这个人算是创了世界纪录。我谈的是关于CEO——但我误判了它。事实是，情况其实十分安全。他马上就要死了。我拒绝买下额外的1500股。结果，它现在花费了我3000万美元。这就大城市的生活。股票很容易买到。因此，很容易误判那些鲜活的证据。Gutfreund 便是如此，他直视着那个男人的眼睛，原谅了这位同事。

18. 由信息带来的精神错乱没有排列在头脑和理论架构中，它创造了健全的普遍性以回应关于“为什么”的问题。同样，由信息导致的错误影响表面上（并没有真正地）回答“为什么”的问题。同样，由于没有适当地解释“为什么”而导致失去应得的影响


我们都知道一些已经失败的人，他们再次尝试并记住教训……就是不起作用。大脑就是不按那种方式工作。你必须在理论架构的基本上排列事实，来回答关于“为什么”的问题。如果你不那么做，你就没法应对这世界。

现在我们来谈谈福耶斯坦（Feuerstein），当古特弗洛恩特犯下大错时，他是所罗门证券的法务官，福耶斯坦知道得要更多一些。他对古特弗洛恩特说：“你必须把它当做一件有关道德和谨慎的商业判断的事件向上汇报。”他说：“这可能不是违法的。可能没有法律义务去这么做，不过你必须把它做为一项谨慎的行为与主要客户的适当交易。”他在至少二到三个不同的场合跟古特弗洛恩特说过上面的话。最后，他不再说了。当然，劝说失败了。当古特弗洛恩特下台时，福耶斯坦也跟他一起下台了。这把福耶斯坦相当大一部分的生活都给毁了。

福耶斯坦是《哈佛法律评论》（Harvard Law Review）的编委之一，但他犯下了一个基本的心理错误。你想劝服某人，你就必须真正地告诉他们为什么。我们在第一课中学到了什么？激励真的那么重要吗？鲜活的证据真的起作用吗？他应该告诉古特弗洛恩特：“你可能会毁了你的生活，让你的家族蒙羞，并丧失你的金钱。”那样说会起到作用。因此福耶斯坦这个聪明、久经世故的律师，在初级心理学上是不及格的。但是你不要那样做。那做起来很难，你知道，要记住的是“为什么”很重要。



20. 由压力导致的精神变化，小的和大的，暂时的和永远的。

我最喜欢的例子是伟大的巴甫洛夫。他把一些狗养在笼子里，这些狗在经过训练后行为都发生了变化。有一次列宁格勒发了大水，水一直上涨，而有一只狗仍在笼中。这只狗遭受到了非常巨大的压力。洪水退去后，巴甫洛夫注意到他们被训练出的个性发生了完全的逆转。作为一个伟大的科学家，巴甫洛夫的余生都用于让狗精神失常，他学到了很多我认为非常有趣的东西。

我从没见过一个对巴甫洛夫的晚期工作有所了解的佛洛伊德学派分析师，我也没见过哪一位律师能够理解巴甫洛夫在这些狗身上的发现与规划、抵消规划和崇拜仪式等等有何关联。我的意思是，在高层面上，对基本心理学的无知是相当显著的。

22. “表态综合症”（say-something syndrome）的发展和组织混乱

关于这方面，我最喜欢的东西是蜜蜂。一只蜜蜂飞出去，找到花蜜后再飞回来。它用跳舞的方式告诉其他蜜蜂花蜜的地点，然后集体出发去采蜜。一些聪明的科学家，比如斯金纳决定做一个实验。他把花蜜远远地垂直放在蜂巢上面。在自然的状态下，没有花蜜是像那样垂直在上的。现在，可怜的蜜蜂没有足够的遗传程序让它来处理如何与其他蜜蜂交流的难题。你也许会想，这只蜜蜂会飞回蜂巢，然后悄悄藏在一个角落里。但是它没有。它飞进蜂巢，“语无伦次”地跳起舞来。我的一生都在跟像这只蜜蜂一样的人打交道。（笑声）这是人类组织中非常重要的一部分，因此，噪音、交换和所有这些我称之为患上“表态综合症”的人不会真正影响到决策。
编辑于 2012-07-13  60 条评论

赞同
123

味精姐姐，我搞UI简称GUI
彭小懒、王小猪、球悦 等人赞同
人类思维的10大常见误区 Top 10 Common Faults In Human Thought
发现译言有人翻译了，但是实在太烂，又找到新浪博客有人发了译文，不错，整理到这里给大家看看 Top 10 Common Faults In Human Thought_aflame_新浪博客

人类常见的十种思考谬误

《天才的13个思维工具》—读书笔记（1）2007年06月06日 星期三 00:09第一章              对思考的重新思考

发现的过程完全是感觉的，数学只有在与其他人交流的时候才是必要的。数学是我们用来表达我们对于自然界的理解的一种形式，但它不是我们理解的内容。在我所解决的一些问题里，必须在作数学之前使用作图这种方法。

创造性思维首先是感觉。我们的感觉，我们的直觉，并不是理性思维的绊脚石，相反，它是理性思维的根源和基础。所有学科的创造性思维和表达都产生于直觉和感情。

诗人首先是一个永远不会忘记特定的感觉印象的人，他经历过，并能一次又一次重新感觉它，就像全新的一样。完全回到了过去，以至于完全丧失了对于现在时间和地点的感觉。

“作者不流泪，读者就不流泪；作者不感到惊讶，读者就不感到惊讶。”

开始的时候，那种冲动，视角和感觉是无法言表的，但最后它必须变成词汇。

科学家需要一种具有艺术创造性的想象力。科学家与艺术家有着亲缘关系，因为他们的洞见始于同样的感觉和直觉王国。最差劲的科学家是没有成为艺术家的科学家；最差劲的艺术家是没有成为科学家的艺术家。

学生必须学习注意自己在骨子里是怎么想的，并学会发展和利用它。

第二章 想象力教育

学术知识与现实经验之间的分离还是一直毒害着我们的教育。哈佛大学一个心理学家在一次关于创造力的研讨会上说道：“在麻省理工这样的著名学府里，学生们对微积分的掌握让老师感到满意，他们解答了期末考试中的问题。但在开始物理学课程时，他们却不知道如何把微积分应用于解决物理问题。”当所学的技能不能转移时，那么所学的东西肯定很有问题。事实上，许多大学教授都意识到了这个问题，他们的学生有解开爱因斯坦描述相对论公式的能力，但只有少数的几个能将这些公式应用于实际。只有少数几个可以像爱因斯坦等那样伟大的思想家自由的在自己的数学理解和实际理解之间切换。很多学生只把数学当成一种交流的语言学习，却没有同时学会数学所要传递的东西，尽管他们很聪明，他们的教育却只完成了一半。

在幻想中生活而不是在现实中生活的问题并不只限于科学，人文科学的词汇教育也相似的失败了。它教会了学生交流和分析，却没有教会他们直接的感觉，观察，移情和了解现实的方法。

吴尔夫，在她父亲拒绝送她上大学时，她可能害怕过，但是她后来意识到她自己自学的价值是难以估量的。从很小的时候，她就听父亲给她将莎士比亚和一些历史的经典。她把时间用在自然博物馆。她和姊妹们模仿母亲讲故事而编造自己的故事。她殷勤的为一家报纸写稿。在这一切里，她的学习是一种躯体的经历，就像爱因斯坦一样。她培养了完全记忆自己感觉的能力。她具有对自己所阅读的书中的人物感同身受的能力，能很容易进入到他们的世界里，而忘记了自己的存在。她不尽学会了什么是“文学”而且还学会了怎么“做文学”。小说是被创造出来的，他们不仅仅被用于阅读。看一部小说或一尊塑像，或听一段音乐，这就只感觉到了幻想，只有当我们理解了艺术怎样来源于生活以及她与生活的关系后，我们才能够经历现实。我们越是把艺术对象和产生这些对象的经历分离开，我们就越把艺术切割到了一个独立的领域，而与其他事情毫不相干。“我不理解人们是怎么了，他们并不通过理解学习，而通过死记硬背或其他方式学习，他们的知识是这么脆弱！”约翰是个聪明的学生，对自己的学科知识很了解，但当我们直入主题时，他却不理解自己的学科——怎样在实践中用他们来创造新的东西，实际上，他的知识脆弱而无用，这是教育失败的结果，而他却常常被披上了学术成功的外衣。

幻想和想象让我们知道现实世界可以是什么样子的，知识和经验限制了可能性，把两者结合起来就产生了理解。没有了幻想，就不可能更清楚的把握现实，反之亦然。

唯一的失败是不努力去做。

第三章 观察

所有的知识都始于观察。我们必须具有精确的观察世界的能力，只有如此才能辨认不同的行为模式，抽象出法则，类比事物的性质，创作出新的行为模式和有成就的革新。观察决不同于看看，尽管有史以来人们都看伪装的动物，但没有人意识到其中存在着一个一般概念。

被动地看和主动的观察的区别继续在现代的艺术家的手中产生了惊人的效果。去思考我们所看到的，用时间和耐心去看。

一遍又一遍的看的所需要的耐心是每一个伟大的艺术家的一个特征。毕加索以艺术的抽象而著称，在他还是孩子的时候他第一次学会了真实的画出他所认真观察的东西。他父亲要求他一次又一次的画鸽子爪子，然后挑出毛病，又继续画。直到最后，“他允许我画任何我所喜欢的东西，那时我可以画人的脸型和一些很大的图形，通常没有模特，因为仅仅通过画鸽爪子，我已经学会了怎样掌握线条甚至是裸体的秘诀”在学会了观察一样东西后，他掌握了观察和描述所有事物的关键。

艺术家们都知道，手工的技巧紧紧的依赖于观察的力量，事实上，很多艺术家都相信，手所画不出来的，就是眼睛所看不到的。“如果你不能在一个人从五楼掉到地面的时间内画出他的素描，那你就永远不能画出里程碑式的作品”凡高的目标是“作画的方式就像写下东西那样容易，······可以随心所欲再现自己在大的比例或小的比例上的所看到的东西”

写作也需要敏锐的观察，卡明斯说自己是“太阳底下一切事物的老谋深算的观察者。”

作曲家舒曼对音乐学生说：“努力区别音质和音调，钟表，布谷鸟，开窗----试着发现他们的音质”他认为耳朵对声音的敏感不仅可以通过音乐训练来培养，还可以通过听日常生活的声音来培养。另一个作曲家对民乐演奏家进行研究发现：“进行观察的人可以在一个星期内从他们那里得到够用一生的音乐灵感”与此类似，演员和导演认为“注意任何非同寻常的，与日常生活不同的行为，这能够训练感觉记忆和肌肉记忆，唯一能激发演员灵感的就是不断的，敏锐的观察生活中的每一天。

最为敏锐的观察者使用所有种类的感觉信息，最为伟大的发现常来自于能够“平凡中见伟大”的人们，即在平常的东西里发现特别令人惊讶的，特别有意义的美。并不是只有科学家才能从平凡中见到伟大，很多现代艺术家也集中精力对日常生活的价值进行思考。斯特拉文斯基说道“真正的创造者，有能力一直在自己周围最为平常的东西上发现最值得注意的地方”一舞蹈家说到，即使是最笨拙的动作也有去发现和利用的美的地方。她还让我们认识到，所有的动作都有美的地方，每一件事都有意义，而这种意义并不是显而易见的。

第四章 形象思维

斯坦梅茨发电机、变压器和其他使广泛用电成为可能的发明家。在通用电器知道他贡献的同事们把它称为“最高法院”，在他们看来，没有他解决不了的问题。斯坦梅茨具有极其卓越的图形想象的能力-——他能看到并不真正在自己眼前的东西。发明家拉克洛夫把它的成功归于视觉想象，他说“我经常在早上5点醒来，然后思考这个发明，然后在自己的大脑里把它想象成三维的，想象成一种被构建的东西，然后我用这个形象来实践，然后在起床吃早饭的时候，我经常走到椅子旁边，用绳子和封蜡做一个模型，它立即就能工作，因为我已经在大脑里完成了大多数的试验”

实际上，想象能够使所有职业的人受益。试着想象一个三角形，很少有人能睁着眼睛眼球不动就想到三角形，并把三角形叠加到他们所看到的任何物体上，然而这其中还有一些人，可以让这个三角形变化颜色，角度，大小和透视角度，还可以让它旋转，跳跃，从其它图形中穿越过去。斯坦梅茨显然就是这一种人。而且它的想象远比三角形复杂的多。

在广泛的意义上讲，想象是所有领域的思考工具，一诺贝尔奖得主说他每天开始的时候都要用大脑想象，想自己的房间，自己的家人，然后是街区，最后是全世界。这时他躺在床上，闭着眼睛。另一化学家说：“想象性的，开放性的，图画性的是我生命里非常重要的部分，我像疯了一样作白日梦，我可以想象到所有化学结构。另一个画家写到，我认为我已经能以拍照的样子看到东西，这是多么有趣。作家说，图形本身就是诗歌的最高境界和它的生命。许多小说家都意识到自己是“先看到”故事，然后才写出故事。而写作只是一个记录的过程。

艺术家，工程师，都存在一个共同的问题，就是怎样把事实和思想怎样从一个大脑转移到另一个大脑里，这样的精神怎样实现？通常都是通过形象。

莫扎特写到：“整部音乐，虽然很长，都在我的大脑里完成了，所以我可以像看一幅美丽的图画或雕塑一样一眼就看到我的音乐。”贝多芬则说：“在把曲子写下之前，我会随身带着他们很长时间，我改变很多东西，抛弃很多东西，一遍又一遍尝试，直到我满意为止，最后就像一尊雕像一样呈现在我的眼前，我就把它写下来。”这解释了为什么贝多芬在耳聋后还能写出伟大的音乐作品，因为他能在它的大脑里听到。“世界上最完美的乐器，就是作曲家的大脑，能够随意听到任意多个旋律，每一个可以想象到的音质和美丽的细微差别。

用声音进行思考，也解释了作曲家“无声的联系”，他们想象演奏自己的音乐。“我在飞机场的时候，我听到了自己即将演奏的曲子，而且我在练习每一个音符，每一个乐句，每一个和弦”与钢琴演奏和唱出来相比，我更多的是在头脑里研究音乐，许多作曲家一样都在听到音乐的同时在心灵的眼睛里看到了乐谱。相反，在他们看到乐谱时，却在头脑里听到了音乐。事实上，这里没有什么奇迹，音乐家培养听觉和视觉能力转换的方式与全世界儿童把声音同字母联系起来的方式非常相似——就是通过每天的练习。学习阅读是一般的听觉想象的很好的模型，因为几乎所有的人都在大脑里“听到”自己的声音在说出纸上的词汇。作家们也是这样，即使是在默读，我也能听到自己的声音，

第五章 抽象

物理学家沃森纳·海森堡把抽象定义为：“一种可能性，只用一种观点思考一个物体或一组物体，而不管物体的其他所有特征，抽象的本质是抽出一个与其它特征对比来看是特别重要的特征。”抽象可能并不代表整体的事物，而只代表它的一个或几个不容易看到的特征。不要单是看——要思考，找出在明显的特征之后所隐藏的让人惊奇的特征。用你的头脑去看，而不是用你的眼睛。

奇怪的是尽管所有的抽象都是简化，但最好的抽象都能提供新的、多重的含义和见解。能用简单来表达不明显的特征和暗含的关系。最简单的抽象往往是最难感觉到的，最难发现的，同时它们也能提供最为重要的洞见。比如数学就是一个除了抽象别无它物的领域。数学物理学家保罗·迪拉克认为：“数学特别适合被用来处理任何种类的抽象概念。在这个领域中，它的力量是没有极限的。”

语言中也有许多抽象，很多词，比如爱，真理，荣誉，责任都表达了很复杂的概念。文学的抽象比这还要深刻。“艺术的高级过程就是简化的过程，······事实上，那几乎是所有艺术的过程，找出我们可以忽略的传统和细节，但是仍然要保留整体的精神。”

身体的语言也是抽象的。那种本质的直接性充满了我们生活的每一个方面。

毕加索不断重复的说自己学会简单的直接的作画是多么的困难，而看到和表达复杂的现实却容易的多。实际上，抽象对于每个领域的人来说都是很困难的。

知道什么是抽象和抽象的重要性，这只是问题的一半，另一半就是怎样在复杂的表述中找到隐藏的简单的答案。很多人都犯的一个错误就是忽略了现实。“对于任何艺术家来说，观察自然风景都是首位重要的事，感觉首先要被经历，理解，然后进行净化，从而达到目的”毕加索说道：“为了达到抽象，总是有必要从真正的现实开始，在此之后，你可以去掉所有现实的痕迹，这时你已经留下了关于实物思考的不可磨灭的痕迹，是它让艺术家开始工作，激发了他的灵感，搅动了他的感情。”

我们还可以看到，对于一个事物可以有很多个不同的抽象，每一个抽象都可以阐述所隐藏的真理。我们甚至可以说，现实就是所有抽象的总合，并且，通过这些抽象，我们可以更好的理解现实。

抽象是一个不断深化，不断抽象的去粗存精的过程。

当词汇的描述变得越来越抽象时，，它常常会成为诗歌，很多科学家都意识到技术上的单词和概念有着诗歌的简洁的纯粹性。

所以抽象是从现实起步的过程，用一些工具去除多余的东西，得出关键的，也常常是让人惊奇的本质特征。

《天才的13个思维工具》—读书笔记（2）2007年06月06日 星期三 00:10第六章 识别模式（规律）

在很多信息放在一起的时候，我们所得到的是一个整体或是一个中间的空洞，这两个都有价值。“正确的定义你的问题，就是把这个问题解决了一大半。”知道自己所不了解的东西，知道自己不知道的模式，这些都和自己所知道的东西一样有价值。“正是无知的山峰促进了科学的进步”

玩七巧板游戏可以锻炼识别模式的能力。猜谜语也可以让我们认识到新的模式。

第七章 形成模式（略）第八章 类比

类比是指本来不相似的事物在功能上的相似。

我们怎样意识到音乐的共振会适用于原子，而原子的共振适用于医学？答案可以在类比中找到。思想不见得相同就可以发生共振，就像琴弦的共振和原子中电子的共振。有人认为共振的琴弦具有“让其他琴弦振动的特征，而且一个思想也是以同样的方式召唤出第二个思想，然后两个思想一起招唤出第三个，然后再这样继续下去。”这种思想连续下去没有限制。类比能阐明无法接近的世界。

我观察，我感觉，我思考，我想象，我把无数的各种各样的印象，经历和概念联系起来······凯伦不会听却学会了说，不能看却学会了写字和打字，能够通过盲文学会了6种语言。提出了许多强有力的观点，跨越了视觉，听觉的世界与又聋又盲的人的界限。我们意识到，并不是我们的感觉在限制我们或是解放我们，而是我们通过与已知进行类比来阐明未知的能力。学习本身就依赖于类比。

这个过程的关键是，类比不同于相似。类比承认两个或更多的不同事物之间的内在联系。而且所呈现出的他们的关系常是一个理解，一个还没有理解。

文学里常用比喻，就是一种类比。

艺术家的多样的兴趣是他们的类比的一个经常来源。

第九章 身体思考

用身体思考依赖于我们的肌肉运动，身体位置，平衡和触摸的感觉。当你不许思考，就能及羽毛球的时候，实际上你已经喜欢上这样运动了。他们已经存到了你的肌肉里。

可以在大脑里想象出身体紧张或触摸或运动的感觉，但我们大多人已经忽略了这样的感觉，因为我们很早就受到训练用词汇来描述和转化他们。“我们的身体，四肢是有智力的”

音乐是来自于本体感觉的思考。如果不感觉到演奏音乐所要求的动作，那么也就无法理解音乐。小泽征尔是波士顿交响乐团的指挥，有人描述“他用全部的身体进行指挥，他用舞蹈跳出音乐的形状”弹钢琴是一种完全的身体运动。它要用到你全部的身体。网球拍，画笔，大提琴变成了我们的延伸，实际是我们的假肢，我们用它来控制世界。他们是“额外的骨头和血肉”人们会把身体感觉投射到每一种需要熟练使用的工具上面。“你必须忘掉一切杂念，把大脑清空，而是锄耕机变成你的胳膊的延伸”

“每一个都自动的储存在我的大脑里的某个地方，通过练习回忆和再现，我比以前要清晰十倍。”“我听到的，我会忘记，我看到的，我会记住。我做过的，我会理解。”这是中国的名言。做事并且记住做事的感觉与学习用身体思考是不可分割的。所以，不要简单地坐在那里。到处走走，你就可能发现你正在解决只有你身体才知道答案的问题。

第十章 同情理解

小说家，演员都有“进入另一个人皮肤下面的非凡体验”巴赫认为“一个音乐家如果不能感动自己，他就不能感动别人，你必须感觉到自己想在观众中引起的所有的感觉”音乐家就是能表演很多风格，很多角色的演员。

作家，演员等的一个重要方法就是不但从外部客观地理解他人，而且从内部主观地进行理解。佛教禅宗的全部哲学都无法脱离一个思想，即一个人必须与其静思的物体和二为一，必须忘掉自我的感觉才能就像事物不具有他性一样理解事物的他性。

猎人的最为古老，保留的最好的打猎方法之一就是把自己以前猎到的动物的皮毛穿在自己的身上，以混入到自己的猎物中，为了做好这一点，他们必须学会像动物一样思考和行动。到现在这种猎物可以是细胞生物，物理过程，生物过程。

怎样才能学会同情理解呢？记住莎士比亚的名言“玩耍就是了”注意观察研究其他人的的行为和事物。还可以假设，假设他的世界就是你的世界，他的感觉就是你的感觉。文学也是一个途径。在同情理解方面，整个世界就是一个想象的舞台。

第十一章  空间思维

像台球这种简单的运动从二维空间拿到三维空间后，他可能变得非常神秘，以至于最好的数学家才能玩得了。空间思维包括从二维移动到三维。转换维数，例如把三维的物体投射到二维平面上，是文艺复兴时期最伟大的成就之一。投射的方法直接来自于透视法的发明。尽管透视法很神奇，但它只是一种简单的映射，实际上可以通过透视素描的一种变形方法叫做“改变形状”把任何物体或者任何维度的物体映射到任何其他物体上。映射，透视和失真变形都有着良好的数学基础，但这还只是开始，例如还有分数维度的难度，我们常用整数来考虑维度，那就还有分数的。还有比例的变化，把一个建筑模型放大成真实的东西，这就要计算材料的强度和弹性，落下的体育馆屋顶就是风险。飞机的模型变成真的需要考虑材料所承受的压力等许多情况。同样，缩小也会遇到种种问题，因为微观世界我们并不熟悉。

第十二章 模型

现代战争常会用蓝方和红方来制作模型战场。所有的模型都是对一些因素的抽象，这些因素被认为是结构和功能的关键决定因素。他们能体现抽象和类比，也能体现维度的变化。这模型可以缩小，可以放大，可以是物理的，数学的，现实的或不现实，这一切都取决于他的使用目的。一旦模型制作完成，还要对它进行试验和玩耍来确定模型的好坏。关于模型的最重要的是模型能给制作模型的人对物体和思想的完全控制。就像毕加索所说“给一个物体制作模型就是占有了这个物体。”“我更喜欢可以控制的小的模型，这样你就像上帝一样。”

我们想要理解周围的世界，那我们就要创造有用的和多重的模型，在鼓励和训练之下，这个任务可以像玩耍一样简单和自然。

第十三章 游戏

有着各种各样的游戏，棒球，射击，滑冰，台球，投硬币，扑克牌，象棋，跳棋，······

游戏仅是为了取乐，为了没有责任的做事的快感，在游戏中，不存在着成功或失败，不存在金钱的利益，也没有必须达到的目标。游戏打破了严肃活动的规则并建立了自己的规则。游戏也是有用的，我们要设法取胜，我们要遵守规则，所以我们要积极思考。谜语游戏，词语游戏，玩具都会培养有用的知识。他让我们没有压力的进行学习，没有恐惧的进行探索。

第十四章 转换

仔细看一看任何创造性的努力，你就发现，思想和洞见一定是使用了很多思考工具才被转化为一种或几种可以表达的语言的。例如我们背诵一些拗口的东西，我们也可以转化为我们所容易表达的东西，“缬异亮苯甲色苏赖”来记忆8种氨基酸。实际上，转换思维已经打破了学科之间的界限。转化越是出人意料，就越有可能产生让人惊讶的洞见。

第十五章 整合

转换的思维无法避免的后果就是整合的理解。不管人们是不是有意识的对感觉进行融合，思考就是依赖于对感觉和知识的联系和关联。

第十六章 整合教育

1，在获取各个具体学科的知识外，我们必须学会普遍的创造过程。教育的目的应该是理解，而不仅仅是知道，它的着眼点应该是主动的学习和创造的过程，而不是对事实的被动获取。主动的理解要求有被动的知识，后者是前者的基础。

2，应学会创造过程所必需的知觉的和想像的技巧。

3，必须实施多学科教育，艺术和科学是同样重要的。

4，用具有创造性的语言来描述整合我们的课程。

5，应该强调具体学科之间的跨学科部分。

6，学会使用已经成功跨越了学科界限的人们的经验，以他们作为我们的榜样。最好的学习方法是观察别人，学习他们的技术，见解和过程。要创造性地模仿和创新。

“看到过自然的壮观的人，一定会成为一个喜欢诗人或博物学者”

战略思维能力是领导干部应具备的基本素质之一.我们所说的战略思维能力,指的是自觉认识事物发展的客观规律,确立战略观念,进行战略思考和研究,在工作中能够高瞻远瞩,对带全局性的计划和策略,对决定全局和长远的重大事情,进行正确筹划和实施.面对新世纪国内外形势的深刻变化,要经受住长期执政、改革开放和发展社会主义市场经济的考验,领导干部特别是年轻干部必须努力提高自身素质,提高战略思维能力,这在今天比以往任何时候都更加具有重要性和紧迫性.如何提高自身的战略思维能力?一要努力学习和掌握马克思主义的世界观和方法论.战略思维能力本质上是一种理论思维能力,需要深厚的理论功底.领导干部特别是年轻领导干部必须高度重视和不断加强唯物辩证法和历史唯物论的学习和研究,以期提高自己理论思维的素养和水平.二要自觉加强党性修养.战略思维主要管的是方向性、宏观性的问题和长远性、发展目标性的大事,因此不能不讲政治.讲政治才能够看清目标、顾全大局,正确处理局部和全局的关系,妥善解决眼前利益和长远利益的矛盾,维护国家和民族的根本利益和整体利益,排除各种诱惑和干扰,在战略选择面前作出正确的决断.三要努力扩大知识面.战略思维作为较高层次的综合性思维形式,要求领导干部具有比较广博的科学文化知识结构.我们的年轻干部不但应当具有胜任工作的专业知识,还应当尽可能多地拥有一些哲学、历史、政治、经济、文学、科技、法律等方面的学识.四要善于总结实践经验.实践可以使我们获得丰富的阅历,因而见多识广,眼界开阔.战略思维能力不是人天生具有的,它离不开向实践学习.领导干部特别是年轻领导干部应当注重实践,善于在实践中锻炼,在实践中总结经验.只有从丰富的实践经验中汲取营养,不断从感性认识上升到理性认识,才能把握客观事物的规律,从而获得高超的战略思维能力. 辩证思维也称矛盾思维,是指按照辩证逻辑的规律,即唯物辩证法的规律进行的思维活动.是一种以概念本性为研究对象的逻辑理论思维形式. 最主要的特征是,事物普遍联系的观点、发展变化的观点和对立统一的观点. 辩证思维的作用： 1、 统帅作用.辩证思维是高级思维活动.它根据唯物辩证法来认识客观事物,能够反映事物的本来面目,揭露事物内部的深层次矛盾.它从哲学的高度为我们提供世界观和方法论,所以,它在更高层次上对其它思维方式有指导和统帅作用. 2、 突破作用.在活动中经常遇到困难,不是发现不了主要问题,就是因提供不出解决问题的有效方案而导致“僵局”,往往在此时,辩证思维就成了我们打破僵局的有力武器.3、 提升作用.人类对事物的认识总有一个由浅入深,有感性认识到理性认识的过程,上升为理论,这就需要辩证思维帮助我们全面总结思维成果,提升成果的认识价值.系统思维是一种逻辑抽象能力,也可以称为整体观、全局观. 系统思维,简单来说就是对事情全面思考,不只就事论事.是把想要达到的结果、实现该结果的过程、过程优化以及对未来的影响等一系列问题作为一个整体系统进行研究.系统思维,是在考虑解决某一问题时,不是把它当作一个孤立、分割的问题来处理,而是当作一个有机关联的系统来处理.掌握系统思维方法,是当代天才最需要的基本功之一.宋代符详年间,皇宫中发生火灾,要进行皇宫修复工程.当时需要解决"取土"、"外地材料的运送"、"被烧坏皇宫的瓦砾处理"等三大问题. 主管该工程的是大臣丁谓.他便在皇宫前的大街上挖沟取土,免去到很远的地方取土；很快,路就挖成了大沟,又让汴河决口,将水引进壕沟.于是各地运来的竹木都被编成筏子,连同船运来 各种材料,都通过这条水路运进来.皇宫修复后,他又让大家将拆下来的碎砖瓦连同火烧过的灰,都填进沟里,重新修成大路.经过这一处理,不仅节约了大量时间,还节省了上亿的经费.丁谓智修皇宫,就是充分把握要素之间的相生关系,使系统往有序和互相促进的方向发展,同时又把握了系统要素的相克性质,促使其向反面演化,最终达到最理想的效果.创新思维就是指发散性思维,这种思维方式,遇到问题时,能从多角度、多侧面、多层次、多结构去思考,去寻找答案.既不受现有知识的限制,也不受传统方法的束缚,思维路线是开放性、扩散性的.它解决问题的方法不是单一的,而是在多种方案、多种途径中去探索,去选择.创造性思维具有广阔性,深刻性、独特性、批判性、敏捷性和灵活性等特点.创新思维,最大的特点是相异性、差异性.同样一个问题,不同的人他有不同的思维,不同的人他有不同的思维,同样一件事,不同的人他有不同思维的.我们举一个案例,两个推销人员到一个岛屿上去推销鞋.一个推销员到了岛屿上之后,气得不得了,就发现这个岛屿上每个人都是赤脚.我们重庆话叫做打光脚板,赤着脚没有穿鞋的.他气馁了,没有穿鞋的,推销鞋怎么行,这个岛屿上是没有穿鞋的习惯的.马上发电报回去,打手机回去,鞋不要运来了,这个岛上没有销路的,每个人都不穿鞋的,这是第一个推销员.第二个推销员来了,高兴得几乎昏过去了,不得了,这个岛屿上的鞋的销售市场太大了,每一个人都不穿鞋啊,要是一个人穿一双鞋,不得了.那要销出多少双鞋出去,马上打电报,空运鞋来,赶快空运鞋.同样一个问题,你看,不同的思维得出的结论是不同的.如何在部队建设的实践中提高创新思维能力?首先,必须具有强烈的事业心和责任感.具有高度使命感的人,才会有强烈的忧患意识,才能“先天下之忧而忧”,战胜自我,不断寻求新的突破.不可想象,一个对自己所从事的工作毫无责任心的人,会积极主动地开动思维机器,创造性地解决遇到的问题；其次,必须用人类的文明成果武装自己的头脑.任何创造都是对知识的综合运用.创造性思维作为一种思维创新活动,必然要以知识的占有作为前提条件.没有丰富的知识作基础,思维就不可能产生联想,不可能利用知识的相似点、交叉点、结合点引发思维转向,不可能由一条思维路线转移到另一条思维路线,实现思维创新；第三,必须坚持思维的相对独立性.当前,阻碍部队现代化建设实现跨越式发展的原因很多,缺乏创新思维是一个重要因素.从实际情况来看,一些单位的工作和建设之所以难有大的突破,发展步伐不快,一个重要原因也是因为思维方式陈旧,缺乏创造性思维.比如,有的人一遇到问题,就去翻本本,本本上没有说,前人没有做,就不敢想,不敢做.有的受传统观念的影响,思维陷入定势,常常是固守常规,遇事总是习惯用固定的思维方式去分析事物和寻求解决问题的方法和途径.还有的过于盲从,不善于独立思考,人云亦云,抱残守缺.新形势、新任务要求我们必须解放思想,与时俱进,冲破因循守旧、抱残守缺的思想观念,牢固树立创造性的思维观,运用突破传统思维定势的新方法去研究新情况,解决新问题.以思维创新带动理论、制度和体制的创新,开创改革的新局面,开辟发展的新境界.思维的相对独立性是创造性思维的必备前提.爱因斯坦说过,应当把发展独立思考和独立判断的一般能力放在首位.

Home > 创造之路 > 思维致胜：掌握思维方法的九个基本原则
思维致胜：掌握思维方法的九个基本原则

2010-01-15 | 发布： 左岸 | 分类：创造之路 | 标签：创造+原则+思维+方法 | 阅读: 16,812 VIEWS


来自:人月神话的BLOG
原文:思维致胜：掌握思维方法的九个基本原则-(原文古老虾)

读书可以让人变得智慧，书是某一领域深有研究人士的体会，读一本好书，正如站在巨人的肩膀前进一样，好书是更高的起点，不用重复发明轮子。本人除 却关注经济、管理、历史、国学、E化主题外，新近系列化研究佛教、心理、修炼和成长主题，我把她叫做灵修。其中很重要的一部分内容就是思维模式，前期我就 习惯、思维方式等主题也发表了评论，现就思维方法主题编写读书评论，以飨读者。

一、思维的前提

自然世界和人类世界是极其复杂的，在极其复杂的背后，隐藏着简单的一面，这就是与现象对应的本质。通过本质来了解现象，是思维的前提。一个人思想必然以自身为思考起点。因此，世界上不同的人，必然会有不同的意见。一个观点对于我们来说是正确的，但是，对于其他的人未必尽然。宇宙的物质世界是客观存在的，我们考虑的时空是常规的。时间是不可逆的，我们生活在当下，在现在，而不能生活在过去和未来。(思维过程应该体现时间学和空间性，空间性又需要体现整体和局部。)

思维的内部涵义由平衡法则、人本法则和智慧法则来说明，借由三个法则，可以理清思想究竟是什么的某种结论。归纳地讲，思维就是围绕着平衡的指向、通过计算 力的“智”和感悟力的“慧”来探究人与自然、人与社会及人与自身精神世界规律和秘密的思想活动，他是我们所有判断和行为依据的根源所在。

二、思维的总指向：平衡的法则

人生是不同目标的平衡过程。人生表面上看是看谁能够获得更高的目标，实际上是看靠近目标的过程当中，谁的平衡做得好，这一过程总要经受看得见和看不见的平 衡因素的影响，厘清各种因素的存在状态和作用方式，这就是平衡的法则。平衡是相对的，是前进中的平衡，变化中的平衡，动态的平衡。平衡是不平衡的特例，不 平衡也是平衡的特例。平衡有阶段性，分旧平衡和新平衡，我们要善于发现旧平衡里面的积极因素，克服消极因素，推进平衡的发展。平衡也有大小区分，同一系统 内，小平衡要受大平衡的影响和制约，比如小局服从大局。大平衡总是指引小平衡的生存和发展方向，所以，做事眼光要放远。

不平衡是平衡的需要，平衡是不平衡的趋势。遇事要根据事情的不同性质注意判断和预设不同的平衡点。注意保持和远离平衡与不平衡的限度。注意分阶段保持平衡。注意小平衡要服从大平衡。注意平衡与不平衡之间的辩证关系。(静态没有绝对的平衡，平衡是动态的，而动态平衡则是系统思维之基础。)

三、思维的总内容：人本的法则

人在社会上生存，都离不开三件事情，即找准定位、理清关系、反省提升。人是人的思维活动的起点和终点。一件事情让你做选择，首先是根据实情性质不同，决定自己是选择还是不选择或者让出选择权。

人的思维内容包括人与物质世界、人与人及人与精神世界关系三方面，即天人关系、社会关系和本我关系。记着自己该得到的，也不要忘记人家该得到的。人与自然之间应多用趋势，少用提醒。多用与少用，要看人打破人与自然平衡以后要多长时间是否有办法建立新的平衡。

人与人之间关系处理一是要认识当时当地的正确位置，也就是说对自己的定位要很清楚，二是定位清楚后调整各种各样的距离。定位和距离要根据不同条件变化而调整，距离的远近只是一种表现，根本在于沟通与理解。如果没有沟通和理解，任何何距离都是假的。

人与本我关系主要集中两个方面，一方面是合理调整自己的欲望，另外一方面是审美趣味的提升。学习是进步的阶梯，是知识和人脉的双重阶梯。学习也是社会发展的要求，自身眼界开阔的需要。

四、思维的总方式：智慧法则

思维的最基本形式是“智“、”慧”，世界上很多事情很难用一种方式去衡量，有些可以通过量化，有些必须通过感觉，感觉到什么程度，那就是智慧。生活的价值很难用一把尺度去衡量，每个人对生命和生活的意义的理解都是不一样的。对每一件事情的具体计算不能代替对生命的感悟！

思维方式都是基于计算和感悟两个维度作为根本的思想方式。计算就是可以根据已知条件，推算出想要得出的结论，是一种对事物的精确把握能力。感悟就是抛开精 确尺度而依靠综合的感悟能力来获得某种结论。感悟是带整体性的、不确定的和超脱感的；计算是带局部性的、精确性的和可控性的，如中国古人说的那样，做人就 要“外圆内方”，外圆是感悟，内方是计算。感悟和计算在任何时候都是并存，感悟往往大于计算，感悟和计算具有不同的运用手法。感悟主要是扩大视角，是宽，是容，是合，主要指向大的方面，由大入小，把面得范畴照顾到，减少摩擦、减少损耗，把正向的方向搞清楚，以利于不败之地。计算主要是集中视角，是窄，是细，是分，在感悟的统筹下，把细部关系算清楚。要细就要细到相当的程度才算数，算不细，没有算到实处，算了也是白算，反而会坏事。(思维只有两种方式，一种是偏经验和主观的感性思维；一种是偏数据和客观的理性逻辑思维。感性思维更多要依赖于情商，而理性思维更多依赖于智商。)

出了问题，要果断、及时地处理，不然损失会更大。看似吃了亏，其实有更大的利益原则，对别人有高度负责的态度，总是会得到回报。对问题的得与失要有清醒的 分析，眼光要放远一些。人与人之间常常因为一些彼此无法释怀的坚持，而造成永远的伤害。因此，我们必须要从自己做起，开始宽容地看待他人，帮别人开启一扇 窗，也就是让自己看到更完整的天空。

五、思维的总高度：超越法则

我们每个人做事情都有自己原来的心理底线，尤其是涉世不深的年轻人，要常常记得打破自己的感觉底线，因为这个底线实际上没有到底。

超越就是超越相对层次，唯有了解他，才能超越他，唯有超越他，才能了解他。要想超越先要不超越，首先要了解事情所涉及的不同层次弄清楚，把某一层弄清楚 了，才能跳到更高的层次。要想超越必须先养成不同层次看问题的习惯。超越的相对层次的真正含义是能够在各种层次中主动、自由的出入和变化。

面对一件事情，首先要进入事物的相对层次中去，而不要贸然肯定或者否定事物的相对面。声音喊得响的人，也许有本事，也许没本事，但是没有本事的人居多。真正有本事的人会有适当的方法展示自己。(超越法则的体现就是知识和技能通过思维能力的提升转化为方法论和智慧。)

六、思维的总维度：时空法则

任何事情都要时间的保证和空间的容纳。时间的消长和空间的收缩往往互为因果关系。时间即阶段性把握，空间即分布性把握。时间要求我们正确认识所处阶段的特 点，做恰当的事情，如人生发展所处初级阶段，就要做初级阶段的事情，高级阶段，就要做高级阶段的事情。空间要求我们弄清楚事情的自身范围，要划一个参照 系。

时间和空间可以在多个层面交叉和转换。根据需要不同和条件不同，我们有些时候是拿时间换空间，有些时候是拿空间换时间。如果有必要，首先可以选择拿空间换时间。同时想干好很多事情，往往干不好，人的精力和时间生命是有限的。

七、思维的总尺度：紧张度法则

我们平时在乎什么，不在乎什么，都是指一个关注度，进而表现紧张度。我们对任何事情都有一个紧张度的基本格局，而她最终影响思维的基本尺度。一个人的态度 不同，格局也就不同。除却少数特别迫不得已的事情，多数情况下，紧张程度是由自己造成的。在感觉紧张与难于排解的时候，也许我们已经失去自我的主导权。

紧张度是事物相关因素之间的关联程度、重视程度、影响程度等松和紧的问题。对事物基本关系因素紧张度的根本判断，决定思考和行为的根本战略，也是一切判断 的前提和基础。影响紧张度判断有主观和客观两方面，主观来讲，调节紧张度和学识修养等有关。客观来讲，要看外部情况而定，如经济形势等。

紧张和放松可以同时存在，紧张的时候可以想到放松，放松的时候可以想到紧张。对于紧张度的把握要尽可能地变被动为主动。光说是不管用的，得有办法，多学习，多掌握情况，多思考，多增加能力。

八、思维的总变化：矛盾法则

事物变化的基本矛盾的思考是我们思维的基础之一。就如河水和河堤可以看做一对矛盾，相安无事和冲突都是一种局面。矛盾法则是事物变化的总规律，就如古人说 的阴阳互变趋中。矛盾或阴阳都是以事物的一分为二观念为基础的，一分为二是世界的基本特征，凡是一切变化都是以此为基础。一分为二，合二为一，是万事万物 属性和运动的根本特征。

任何事情无论大小性质不同，总能找到它的对立面。要有变化角度看问题的习惯。要分清楚一面和对立面哪一个是更主要的，根据平衡法则判断它的运动趋向。矛盾有主要、次要矛盾，还有一个系统内的矛盾主要方面和次要方面，主次矛盾会相互转换。矛盾方面的统一是基本的，但永远有差别，对立是暂时的，但永不消失。统一是趋势，对立同样也是趋势，要视条件不同而已。(系统思维= 平衡法则 + 矛盾法则)

不管对谁，都不一定要把心里话说得那么透底，每个人的立场和出发点都有不一样的时候。判断别人是否对你真好，最好不要凭表现现象下结论，要看实在的东西， 自己要有对真实程度认识的主观意识。好事会变成坏事，坏事也会变成好事，任何事情都具有两面性，能够清楚认识到转化条件，那就是高手。

九、思维的总态度：实践法则

实践是检验真理的唯一标准。思维需要一个落地的过程，这就是实践法则。眼见不一定为实，耳听不一定为虚，心想也不一定为成。做得结果，唯一一个就是看是否管用。要做到实事求是，需要通过对比的方法来完成。

“任何历史都是当代史”，任何事物都有现代进行时的当代属性，强调要考虑事情的特殊性，要把当时、当地、当事的特殊条件看清楚，特殊是相对联系而言的。

看待事物的角度可以无穷多个，哪怕同一件事情，不同的人，在不同层面，不同角度，对事实的描述不一样，由此得出的看法、判断也不太一样。因此，对事实的说明，一定要从最基本，最少分歧的层面和角度比较较好。

从实践意义上讲，我们必须有随时随地准备对付新发生的事情的意识。前一刻和后一刻的事情都会有所不同，时刻注意这一点，不要僵化。现实中首先需要弄清楚解 决实际问题的目的，没有目的，实践就没有意义。针对问题做深刻的调查研究，关键要细致，如果不细致，等于没有做调查研究。

现实中，即使是再十拿九稳的事情也会有变数，要有充足的准备，把意外当做必然。高学历不等于一切，工作能力=做事+做人。实事求是是一个人成熟的标志！知识打基本，实践出能力，实践过程是人的能力最终形成的不二法门。

十、思维的总过程：循环法则

宇宙最基本的循环是从有序到无序，从可测到不可测的循环。事物总是在有序和无序，可测和不可测之间摇摆。思考问题的时候，有些事可控的，总也有不可控的。

循环的基本涵义是淡化结果，重视过程。读书是为了获得一种学习能力和拓展能力。人的一辈子完全可能做比现在做的多得多，也更精彩得多的事情。人的潜能很大，人生的圈子可以滑得更大，生命的精彩不止一种或两种。

总结：高妙的思想方法来自于深刻的哲学修养，深刻的哲学修养来自于独立自由的人格精神。所以，凡事都要立定脚跟，要有独立自由的思想精神。

第一看位置，前后与左右，根据何而来，要往去哪里。时间和空间，就是两条线，目的和对象，分明是界限。
第二看动机，矛盾是根源。一分都为二，要好也热闹。才有不平事，立刻起波浪。前因和后果，解决靠实践。
第三看尺度，平衡是关键。快慢有节奏，松紧不能断。条件会变化，他变我也变，流水不争先，和谐是真言。
第四看层面，角度千千万。里看外也看，眼光要常换。登高能望远，秋毫也能见。一层又一层，进出都自在。
第五看途径，办法有很多。大处来着眼，小处要细算。发散与聚合，顺逆都能得。巧未必胜拙，胸中有定见。天地有奥妙，万物皆循环。



如何才能真正的提高自己，成为一名出色的架构师？
想成为一个出色的架构师，但是学得知识不是很系统。
目前属于自学，设计模式，算法导论，编译原理，UML2.0等都在看。
自学可想而知，肯定不够系统，不够全面，也不科学。

身边也没什么人可以在这方面教导我，工作已经3年了，每次换工作都是呆在小公司，技术这块的基本自己来抗，很多东西都自己摸索的。去年开始到现在完成了算是从头到尾自己全权负责的项目（PHP-MYSQL-PYTHON，PHP的MVC框架自己写的），做下来发现自己有很多的不足。

除了看书，自学，看看MIT的公开课，还有什么办法可以让自己有很大的提升空间？
2 条评论  分享
按投票排序
按时间排序
24 个回答

赞同
158

deviJi，喜欢探险，喜欢计算机界的一切新技术
Lei Mou、知乎用户、WindLife 等人赞同
架构师是一个充满挑战的职业，知识面的宽窄往往决定着一个架构师的架构能力，所以在这一点上我比较赞成你的学习方式，就是要阅读大量的技术书籍，但我希望你不要仅限于软件相关的书籍，经常泡技术论坛，一方面可以结交朋友，一方面可以增加自己的知识面。
公司的大小往往决定了所做的项目规模，一般的大项目不太可能直接总包给小公司去做，但这并不妨碍小公司可以分包到大项目的一部分。在做小项目的同时也可以积累丰富的经验，我自己就是一个这样的例子。
我在小公司混迹了5年多，其中也偶尔有1两个大公司，比如大唐电信，但是基本上都是小公司，从基层的程序要到公司的开发总监都做过，甚至自己还设计过包括LED显示屏，密码键盘在内的收费系统，自己联系厂家OEM，当然这些今天已经广泛应用了，当时我们的客户用上之后还是非常震撼的。
知识面的宽广对于一名出色的架构师来说是必不可少的技能，也许很多人对架构的理解还停留在设计模式，重构，SOA等等的软件层面，然而这仅仅是非常基本的东西，架构师的脑子里不光需要知道让软件如何高效的运行，还需要知道如何去结合网络，存储，甚至一些文件系统的特性，比如GFS，NFS，XFS，NTFS等等，而且架构师还需要知道一些编程语言的特性，C，C++，Java，PHP，Python，Lisp，JS等等，现在是一个混合编程的时代，只了解一种语言，即使再精通也会使你在架构系统的时候受到很大的局限性。
再有一点，架构师需要对数据库技术有深刻的认识，因为现今是一个信息时代，大量的信息都是需要存储并检索的，数据库设计的不好，将会严重影响系统的性能，而这一点往往会被我们的设计人员忽略，他们只知道遵守那些范式而不会结合数据的特性去设计数据库。
看你的编程情况，你好像做PHP开发比较多，PHP比较适合B/S结构的应用开发，这会限制一个架构师的思路，我建议你再学习一门适合做C/S开发的语言，拓宽自己的视野。
从一个程序员到架构师是一个很大的变化，架构师需要从大的方面考虑，而不只是考虑这个模块该用哪种设计模式去开发。不能急于求成，也许是我自己变化的比较慢，我用了10年的时间，这10年里，我使用超过一年的编程语言包括了delphi，C++，Java，python，使用的数据库包括了oracle，infomix，sybase，sqlserver，mysql，javadb，sqlite等等，使用过大型机，小型机，服务器。unix，linux，windows都至少做过两年以上的开发，这些使用和开发的经历会大大增强一个人在做架构师这个职业时的技术素养。
总之，想要成为架构师，需要有耐心，不断学习，拓宽自己的视野，不仅仅局限于自己眼前的项目，关注开源技术，关注热门技术社区的新动向。



知乎用户，IT领域，网名人月神话。微信公众号: hemi…
刘颜彬、陈续缘、zf zhu 等人赞同
06年写的如何循序渐进向dotnet架构师发展，可参考：


微软的DotNet开发绝对是属于那种入门容易提高难的技术。而要能够成为DotNet架构师没有三年或更长时间的编码积累基本上是不可能的。特别是在大 型软件项目中，架构师是项目核心成员，承上启下，因此RUP方法论也认同以架构为核心，体现4+1视图在整个软件开发过程中的重要作用。架构人员既要精通 技术，又要熟悉业务，而且基本对软件生命周期各阶段的相关技术都需要有相关的积累和知识储备，而这些不经过多年的磨练是很难达到这个高度的。

要成为一个合格的架构师首先必须是一个合格或优秀的编码人员，对于开发来讲编码始终都是最重要的一项技能，在编码过程中只要自己善于去思考和分析问题，就 可以多学到很多相关的知识和技术。所以我们在开发过程中一定要注意新知识和新技术的学习，前人经验和成果的学习。编码过程中应该去思考的一些问题有：

1.在编码过程中自己是否做单元测试，是否使用相关工具做单元测试，如果没有的话是什么原因无法把单元测试做起来？
2.自己编码的泄露率情况，编码泄露的BUG的原因分析
3.是否有意识的对代码进行重构，重构过程中是否引入了相关设计模式的思想？
4.是否对C#语言的一些高级特性进行学习，如反射调用，异步处理等。
5.是否对Remoting和WebService两种分布式技术做过研究和对比分析？
6.是否经常研究开源项目和开源代码，如Duwamish，PetShop，NUnit,Enterprise Library，Nant等
7.是否对对象持久化机制和O/R Mapping等相关技术做过相关的研究
8.平时在编码过程中是否注重公用组件和公用类的复用和抽取
9.自己在平时工作和学习中是否经常开发些小工具提高工作效率，巩固学习知识

设计和编码其实是密切而不可分的，对于严格将设计和编码分开的瀑布模型一般也仅仅在大型项目中应用。而及时编码和设计分离，也不是将编码人员不需要思考， 编码活动始终是一项创造性的劳动，如果否定这个观点那就代表编码过程完全不需要人员介入而可以完全自动化。因此在这里谈设计主要还是指设计人员的系统化思 维能力，设计人员应该比开发人员站高一个层次来分析和思考问题。设计人员最重要的一个技能就是现实->抽象的转换，而这个就需要谈到方法论的问题 了，技术人员需要积累面对对象分析和设计或结构化分析知识的积累，需要有较强的数据库分析和设计能力。一个设计能否成为很好的架构师关键就在这种积累的深 度和广度上面了。

因此在设计过程中应该考虑的问题有：
1.你现在分析和设计能力能否胜任大中型的应用系统还是只是独立功能分析和设计？
2.设计过程中是否有意识的考虑到组件的复用和相关接口设计准则。是否能够很自然的将分析模式，设计模式的相关内容应用到自己的设计过程中。
3.是否对XP，RUP，面向对象，结构化等方法论都有过较系统化的学习和思考。
4.是否真正理解系统功能需求和非功能需求对系统设计的不同的指导作用。
5.对自己设计的功能是否会根据后期的变更来反思自己的设计为何不能很好的适应变更？
6.是否在设计过程中经常自己开发些原型来对自己的设计思路进行验证？
7.是否专注技术的同时开始专业业务流程的分析，关注业务建模？

如果我们在设计和开发过程中经常关注这些知识和技能的话，成为一个合格的架构师是早晚的事情。平时能够胜任工作开发用到的知识和技能是微不足道的，如果自 己不是有意识的去学习这些知识的话，那技能是很难得到进一步提高的。我参加过两次微软的架构师培训，在北京的微软架构峰会上也有机会专门参加了 P&P Workshop的学习，培训老师是微软总部SmartClient Architecture and Design Guide一书的作者Edward A.Jezieski，让我感受最深是老外深刻的技术底蕴，对程序开发的执著。

对于DotNet架构经常用到的知识和技能储备有
1.RUP方法论，4+1视图。用例驱动业务建模->分析模型->设计模型
2.用例模式->分析模式->设计模式
3.常用的分布式技术
4.对安全，异常，日志，性能等非功能性需求的关注
5.对应用系统整体业务的关注

相关的一些参考书籍(微软网站和电驴都可以下载到)

微软网站提供的参考书籍
Enterprise Solution Patterns Using Microsoft .NET
.NET Data AccessArchitecture Guide
Application Architecture for .NET:Designing Applications and Services
Caching Architecture Guide for .NET Framework Applications
Designing Application-Managed Authorization
Smart Client Architecture and Design Guide

其它架构方面的参考书籍
Software Architecture In Practice
Pattern-Oriented Software Architecture
The Art Of Software Architecture
Beyond Software Architecture

模式方面的书籍
Analysis Patterns
Design Patterns - Elements of Reusable Object-Oriented Software
Applying UML and Patterns
Design Patterns Explained
发布于 2012-01-16  3 条评论

赞同
23

陈甫鸼，生长于闽，求学入秦，漂泊适燕，实秦人也。
Lei Mou、知乎用户、红浪枫林 等人赞同
从楼主题目里描述的背景出发，我的建议是这样的：
对计算机这种工程学科，自学不一定不科学，但是要保持大量的实践。
为一个成型的产品Troubleshooting是进入架构领域的好办法。有一点必须强调：它不一定得是优秀的成熟产品。对善于总结的人来说，烂产品提供的反面教材从某种角度上看更加珍贵。
无论Troubleshooting经验如何丰富，最终我们必须要得到自己设计的机会。这是从经验积累落实到架构能力的唯一方法。如果条件许可，参与开源产品其实是个很好的机会（当然有的公司明令员工除非特许否则禁止参与开源项目，比如微软）。
具体用什么技术前面很多朋友都有精彩论述，我一做驱动的，就不多啰嗦了。

还有一点必须指出的是，尽管我也认同架构的重要性，但从楼主自己说的自学内容（目前属于自学，设计模式，算法导论，编译原理，UML2.0等都在看）来看，我感觉楼主还没搞明白架构师究竟是什么。如今业界人人都在讲架构，但所谓架构师细分起来实际上有很多种，即便只是算软件行业经常要打交道的（也就是说芯片架构师不算），我见过的情况就包括如下：
网站基础设施设计师。比如一个能承受百万级访问量的网站该如何配置服务器等。这种架构师关注的是如何配置异地服务器，如何分流请求，如果做负载均衡、备份和同步等等。
IT基础设施设计师。这种架构师和网站基础设施的架构师有一定交集，除此之外经常还需要考虑跟硬件有关的话题，比如机房空调温度，UPS，带宽升级等等。
软件设施设计师。这种架构师经常要负责对软件系统使用的部件做选择，比如安全系统上使用的是Kerbero还是SSH，图形系统选择本地UI还是跨平台库，网络协议或文件格式使用公开的标准还是自己设计等等。此类人往往还关心许多诸如性能、兼容性等方面的话题。
框架狂热综合症患者。此类“架构师”最喜欢的就是在一个项目里搞个所谓的类库，里面写上一堆抽象类和接口，然后到处宣称其类库设计极其便于扩展云云并强迫同事负责实现其具体功能。另外，此类人的一个显著特征是对各种新框架或语言特性异乎寻常地热衷，却从不屑于实现一个真正具有能用功能的部件。
楼主希望自己成为架构师，这本身很好。但作为善意的提醒，我想楼主现在更需要搞清楚的是自己究竟希望成为哪一种架构师（我猜测更可能是第一种），然后才能针对性地去学习。无论如何，前三类架构师的共同特征是他们都具备对各种实际功能代码或硬件优缺点的知识，并且懂得如何根据项目需求（而非个人喜好）选择合理的技术完成任务。甚至有时候一个顶尖的架构师必须同时理解三个不同的方向——换言之，架构师的知识广度必须超过普通程序员。而至于第四种“架构师”， 可能大家已经注意到我说到此类人时用了引号，因为恕我直言，在我看来他们只由两类人组成：只会招摇撞骗的骗子，或是半桶水却不自知的可怜虫。

当然了，要做第四种显然最容易，哈哈。
编辑于 2012-01-18  2 条评论

赞同
6

李遥，A Programmer
范宝波、知乎用户、天猪(刘勇) 等人赞同
一句话概括的话，就是得犯过足够多、足够深刻的错误才行

稍微具体而言的话，架构设计一般有两个层次
设计性能不敏感、或是低计算量的应用：这是个初级层级，在这个层次上的普遍思路是分解问题，然后通过组合各种“solver”来解决。架构师可以随便翩翩起舞，使用各种“框架”、“类库”，借鉴各种“模式”，发明各种“概念”（这些全部都是solver）。由于计算量低，所以最后总能“条条大路通罗马”
性能极端敏感，计算密集的应用：这时候初级层次的很多经验反而起反作用了。因为组合“solver”只能解决计算正确性目标，但不能解决性能目标。所以架构师需要能“脑内模拟”业务需要的必要数据流，然后充分利用（exploit）数据流的特性来尽可能地削减计算、避免瓶颈。这时算法功底就尤为重要，很多第三方的“框架”、“库”只有拆解以后“白盒利用”的意义。性能设计要优先于“代码的封装性”、“可读性”、“可测试性”、“可管理性”以及“团队可分工/协作性”（基本上软件工程里的原则都要让位于性能设计）
编辑于 2013-05-17  添加评论

赞同
10

李德逸，关注移动互联网和企业应用
范宝波、RC CAI、白乔 等人赞同
要想成为一名架构师，你需要具备几点素质，并且保持平衡。
1、技术能力，有一个方面很深入，然后又要有广度。这点很重要，因为架构师所面临的都是各种别人遇不到或待解决的场景。深度保证你能在某个方面是专家并能举一反三的去保证你对其他技术方面理解和见解，广度保证你的视野。切勿技术崇拜，Java\.Net\C++ ，MS\IBM 都是在不同的方面你要了解的内容和工具。
2、管理能力，通常你要运用一个Team的能力去实现的架构，并保证。很好的计划、组织、沟通是必备的。越高的架构职位，这方面就越重要。我们所说的主架则是技术和管理的最佳结合。
3、高情商，不要期待技术完美的架构。会有很多人、资金、现实情况的因素来决定你的架构，如果是技术唯论，通常你的架构是无效的。你会很郁闷，并且无法实现。架构师的技术上最牛的地方就是综合所有因素让方案按照你的设想去实现，又让所有人满意。这意味着你是一个高情商的人。
4、最后如果作为一名应用架构师的话，首先你要做到业务专家，才能成为应用架构师。
所以呢，通常没有8-10年你很难做到。只要你持续努力，自然水到渠成。
发布于 2012-03-07  1 条评论

赞同
3

汪周洋
mar ncr、fleuria、黄不成器 赞同
首先真正的架构师没有几个，都是一般半桶水给自己脸上贴金，或者一些不入流的公司也要搞这种职位，先老老实实的在一线工作十年在说吧，而且工作内容还要涉及各个领域的，才有资格
发布于 2015-04-08  添加评论

赞同
12

锦瑟，舊歡洳儚
非装业程序猿、gyou ou、知乎用户 等人赞同
让现任架构师来告诉你吧：
首先，你要付出你所有的业余时间，用在阅读大量书籍和钻研最新技术上面，你要去掉你80%的兴趣爱好，因为架构师是一个和世界IT新技术赛跑的疯狂的职业。如果你每天下班后用于研究技术的时间少于2小时，那么你必然无法成为一个优秀的架构师。先有了这个觉悟，至于后面具体学习些什么，学习的顺序，那都是次要的问题，上面各位说的都很全面了。

其次，你现在最需要做的就是找一个女朋友。因为如果你走上架构师这条路，你很可能没有时间找女朋友了。
发布于 2015-03-29  1 条评论

赞同
11

林涛，隐身中
yuji Xu、Wendel Stock、Harry Zhu 等人赞同
技术人员，最大的通病，就是就技术而技术，这个在初级阶段很实用，也高效，但是，想真正做好架构师这个职位，一定要清楚产品，甚至如何运营，一个好的架构，一定是符合当下并可以在一定时间内不用重构的架构（最少为半年，互联网的特点，不可能不重构，twitter之前披露的资料显示他们平均半年重构一次架构）。
关于混合语言的问题。这个问题我觉得要辩证的看，混合不一定好，也不一定不好，关键是要看团队的接受能力，单一语言的特点是整个团队的执行效率高，维护成本低；混合语言的特点是软件整体优，但维护成本和整个团队的执行成本就会很高，架构师也应该有这方面的考虑。
学习，保持好奇心，按着“1000”考虑问题，按着“1024”设计架构，总有一天，会成长起来的
发布于 2012-01-17  4 条评论

赞同
2

觉浅，老程序员
吴清泉、gyou ou 赞同
个人意见：作为一个“架构师”，最重要的两点：
第一，也是最重要的一点是深刻理解业务规则和业务特点。忽略了这一点，做不出好软件。
其次，是技术视野必须要宽，宽度甚至比深度更重要。不是用某种你谙熟的技术去解决业务问题，而是根据业务问题选择合适的技术。
发布于 2012-01-18  1 条评论

赞同
5

刘夏，真的要 “大” 才好吗？
叶新建、CHENG WALLACE、张健飞 等人赞同
1. 心理准备：小公司可以作为实践的最佳平台，大集团可以作为学习的平台。不要灰心。
2. 从小事做起：仅仅从狭隘的软件系统架构来说，全部出自于实践和对每一个细微环节的设计：小的设计组成大的架构，而这些小的设计有很多模式可以帮助你（设计模式）。因此即便你只是编写一个计算器，也最好花精力去分析，设计。
3. 架构不是大而空的：面试的时候很多面试者都认为软件三层架构就是架构了，实际上这很片面。架构实际上是由需求，团队能力，开发周期（资金支持），版权限制等一系列因素叠加影响的，没有万能架构，只有针对一个具体项目的架构，因此应当从以上的诸多方面去分析，我需要什么样子的设计。

举个例子吧（当然，仍是相当笼统）。我有一个小的项目，就是一个基于 Web 的加减乘除计算器。首先这个需求很简单，操作非常有限（10个左右），开发人员可能1-2个，今后可能追加其他操作，但是这些其他操作和现有操作关系不大。5天之内完成上线。
（1）那么我会基于这些因素采用事务脚本的设计（请参见P of EAA）：
（1.1）这种设计的优点就是简洁，开发速度快。容易处理这种数量不多，耦合不强的需求。这正适合我们。
（1.2）其缺点是在需求不断增多的情况下容易产生冗余代码，由于我们对今后的需求和现阶段的功能有所估计（数量有限，耦合不强），认为这个问题对此项目影响不大，于是这样足以。
（2）而对于事物脚本的每一个操作，可以采用命令模式（Command Pattern）进行详细设计。
（3）我的团队开发人员均熟悉 .NET 下的开发，那么我们从语言上选择 C#， Framework 上可以选择 http://ASP.NET MVC。
（4）这个项目的数据存储要求非常有限，我们可以选择用 MySQL 或者 SQLite 作为解决方案。

View(JQuery-UI, JQuery-UI mobile)
---------(JSON)-------
Controller (事务脚本支持->命令模式)
---------(http://ADO.NET Provider)---
Storage(MySQL, SQLite)

这个例子的每一个部分都可以再详细划分，最终形成一个整体的决策。

总之，请不要灰心浮躁，不论多大（多小）的软件，每一个部分都影响着架构设计。设计好软件的每一个部分即可。
发布于 2012-01-15  添加评论

赞同
5

王贤斌，牛逼哄哄——什么都懂
范宝波、李宇、夏梁峰 等人赞同
个人觉得，有些方面的能力是天生的。
如果你想成为一个好的架构师，不是看几本书，读几年书就能成为的。


我觉得好的架构师需要2个根本的，比较天生的能力（相对比较天生，但也是日积月累出来的）。

1、在项目的开发过程中，能很快的感觉到问题会发生在哪个环节。

当然，要做到这点，最主要靠的是经验，其次才是意识，这个能力是必须的。不管什么项目，对于进度影响最大的其实就是当问题突然的出现。我们或许规避不了问题，但我们可以有准备，在前期编码，或下层代码的开发过程中，针对可能出现的问题，做一些预备工作。


2、对于每个项目的责任心。


或许，这个是做任何事情都需要的一种，人身上必须要有的要素。
当问题发生时，第一时间，和同事一起去找问题，而不是推卸自身的责任。当你的同事，在架构内，开发进度缓慢、bug数量增加、经常抱怨时，你是否需要去询问一下问题，分析一下是否是架构导致以上原因。






当然，架构师必须的当然是，写上N年的代码，这个谁都知道，就不必多说了。其他的，以上几位已经讲的很多了。


笨人拙见，祝我们一起奔向自己的未来。


梁涛，模仿是恭维的最危险形式
李遥 赞同
知道什么可为不是要点，要点是知道什么不可为。
发布于 2013-05-17  1 条评论



程东辉，懂rails/知道敏捷方法/爱写程序/三十多岁…
叶新建、欧阳婕、不安 等人赞同
不要太在意【架构师】这个字眼，在技术行业，保持对新技术的探索、求知欲望、积极的去思考，脚踏实地的去做产品（或项目），你会发现，原来所谓的架构师，不过如此
发布于 2012-01-16  添加评论



李智慧，大型网站技术架构http://item.jd.com/11322972.html
1 程序员不会因为写了很多代码就成为架构师，程序员和架构师之间有一道巨大的鸿沟。
2 如何填补这条鸿沟，先占个坑。
====================================
还是讲个故事吧。

故事发生在十年前，故事的主人公就叫老L吧，老L现在名副其实了，但是当时还不老，从一个和计算机毫不沾边的专业跨行到一家做对日软件外包的小公司做程序员已两年。
和所有的外包公司中的低级程序员一样，老L每天的工作就是对照着日文的式样书需求写代码，代码没有什么难度，对照着需求文档和样例代码照葫芦画瓢就可以了。

老L之所以转行做程序员、
一则是因为本专业找工作实在是比较困难，
二则是老L在学校的时候刚好赶上第一波互联网热，后来互联网泡沫破裂了，但是编程改变人生，互联网改变世界的念头却在老L的心中扎下根，念念不忘。
老L那时候的偶像是求伯君，是雷军。
雷军那时候还是个程序员，人们也不叫他雷布斯，雷军笑的时候很腼腆，老L觉得雷军笑的时候象自己，老L觉得雷军很酷，老L觉得自己应该也去做程序员。

为了顺利转行，老L在学校里选修了好几门计算机软件专业课，
但是工作以后，每天都是重复而简单的代码，连最基本的数据结构都很难用到。
日子就这样过了两年，老L已经忘了雷军，忘了编程改变命运，老L觉得程序员就是这个样子，编程就是这样，工作就是这样，忙碌着重复，重复着忙碌。


然而，有些东西，只要曾经惦记过，即使后来自己都遗忘了，命运之神也会在某个不经意的时候去提醒你。
多年以后，老L在一部电影里看到一句台词“念念不忘，必有回响”，
老L一瞬间就想到2005年的那个春天。


匿名用户
赵辉、文遥 赞同
@程东辉 同学说的对。太介意title没有必要，每个公司的jgs其实做的事情从打杂到ceo都有，差异太大，不值得为一个title去纠结甚么。

很多同学已经回答了这个问题，说的都很对，读书，敬业，钻研——从业务的专业性上来讲，这些很对，也很必要，未尝有美食家不沾水火可做主厨的，chef不能缺了executive。
但，我想这个问题也没必要转变成“一个优秀的技术人员（软件工程师）是如何养成的”。——这个问题意思不大，环境啦，机遇啦，跟对人啦，苦读啦，兴趣啦，驱动力啦……blahblah，都是废话啦。
技术不牛谈什么架构师？不牛就先把技术做牛了再说。

～～～对绝大多数技术人员来说，看到这里可以了，去吧去吧，学习去吧，乖。

现在假设真的有技术专家看到这里了，好吧，我们看看什么是CSA，一个通用定义在这里。
Software architect
CSA的工作职责，业务发展决策支持，技术团队的可行性搭建，等等见上面链接
——nononono，这些是CEO（薪水是他给的！）对你的定义，你的工作并不是这样的。
CSA要解决的问题，我随便说说，别太较真的话，大概是这些：复杂性，不确定性，技术差异化价值。

先打个比方：
称职的架构师，像是一个后厨的主厨（executive chef)，负责一个技术团队的分工合作可行性框架搭建（上百桌的单如何出菜），以及团队的技术方案、风格（口味，卫生，采买流程等）技术价值，当然，偶尔还要为贵宾做点专业绝活儿。

复杂性：上面说了，组织起来二三十个厨子分工流水出菜，不仅要了解每个工序，还要了解并行，和关联，而软件行业的行为多样性，变化剧烈方面，比厨师的稳定成熟，可差老远了，技术方案要能产出业务，需要了解并有（技术的和关于技术的）能力去应对这种复杂性。
不确定性：软件（及其技术应用的相关产业）业务，几十年来一直处在快速的变革中，业务的市场前瞻性，技术前瞻性事关成败，有一定视野宽度+深度的专家，能够结合团队的技术条件，才能给业务提供技术侧发展的决策支持。
技术差异化价值：这个不是必选，“能人所之不能”是一部分架构师能够给业务带来竞争力的地方。
在软件和其它领域提供了类似CSA价值的历史人物吧：奥本海默，托马斯杰斐逊，Dave Cutler，至于建筑师什么的就不用举例了。

架构师需要能做到技术团队管理者能做到的一切，只是忙于技术侧的工作，没时间去管理行政事务而已。

匿了是不想跟人因为无聊的问题比拼资历。
发布于 2013-05-16  添加评论


闷骚乔巴，闷骚乔巴

1. 沟通，没有良好的沟通能力，很难去推动和做好事情。
2. 分享，不只是将技能劳劳控制，掌握在自己手里。而是多分享，将知识和经验分享出来，并且调动大家的积极性，共同创造。
3. 专业，技术能力扎实，首先架构师肯定是位优秀的程序员。并且知识面广，懂业务。能够寻找和辨别工具解决业务问题。现在开源工具如此之多，不需要反复的重新造轮子。


饶磊，软件工程师
花大量时间去专研，多关注开源，多上论坛，多结交技术朋友，多参考互联网上一些大公司的技术分享方案
优秀架构师的绝大部分生活就是跟笔记本打交道的，哈哈，笔记本最好形影不离
还有一点就是不要太功利，如果做架构师一心只想赚大钱肯定做不好架构师，哈哈，不过真成为了优秀架构师，money自然会来的



Dylan，伪互联网架构师
看不同的公司，不同的岗位需求。有些公司对架构师分的很细的，听起来有点忽悠人。
例如，大致有“业务架构师”，“技术架构师”这两种。业务架构师，又有“解决方案架构师”，“平台架构师”。而技术架构师，又分为“安全架构师”，“系统架构师”，“前端架构师”，“数据库架构师”，
“软件架构师”......
很多人对架构的理解，还仅仅停留在“设计模式、SOA”这些纯软件架构的概念上。
从一般的互联网企业的架构师来讲，可能不会分的很细。
要想既是“通才”又是“专才”几乎是不可能，所以有些时候往往是停留在了解但不实际参与的层次。
第一是要求软件架构方面的架构和设计能力（偏软件），第二是基础(系统)架构方面（偏运维）的。



陈大明，IT
看了前面所有答复，小结一个：
1. 宽广的知识面（业务知识、相关领域技术知识、风险预判）
2. 管理能力（任务分派、高情商的小组沟通）


程序设计流程：
需求 UML 原型设计 html js 界面 Action Manager Dao 数据库

前端技术选型

虽然jqueryui的样式太难看，但是它还是很好控制的，方法和事件也很丰富。样式难看可以找美工修改这不是大问题。
至于jqueryui没有的那些组件主要是tree、grid、layout、form、menu，前三个都在网上找到了专门的插件，后面两个准备自己实现。
tree推荐使用ztree，中国人自己开发的，网上评价很好，更新也很快。缺点是每次更新，api变化都挺大，一般不敢在项目中升级，否则恐怕要在用到ztree的地方改好多东西。
grid推荐使用jqGrid，大版本号已经升到4，搜索jquery grid、jquery datagrid排名第一，功能丰富，提供普通的datagrid treegrid和分组grid，还有分页条功能。
layout推荐使用jquery.layout。模仿ext的borderlayout实现，但是有很多差异。支持嵌套。样式比较难看，不过修改比较容易。
所有程序员恐怕可以粗略的划分为这五种状态

1.不爱，但是迫于生计
2.无感，反正亦步亦趋
3.热爱，但却身心俱疲
4.狂热，打了鸡血一般
5.欢喜，毕竟乐在其中

系统问题：
数据不一致 数据有错误 数据不符合实际需求 需要筛选


------------------------

弄清整体架构流程
搞清楚步骤流程
保持专注
目标导向
做好记录
小规模测试
节点有故障  executor 尽量少
考虑极端情况

造测试数据
程序的先后顺序

无法debug 就一步步排除

------------

宏观上
1.技术广度方面
至少要精通多门开源技术吧，研究过strutsspring等的源码。
2.项目经验方面
从头到尾跟过几个大项目，头是指需求阶段，包括需求调研。
尾是指上线交付之后，包括维护阶段。
3.架构经验方面
有过分布式系统的架构和开发经验。对于跨系统的结构优化，数据存储的性能指标等有丰富经验。什么缓存啊、数据库的垂直切分什么的，业务的抽象和水平拆分啊，这些应该都轻车熟路吧。
4.行业领域方面
最起码得精通一到两门业务吧，所谓精通，就是比如做金融证券业务的，至少等当半个经融分析师。做电力业务的，至少等当半个电力工程师。
5.个人修为
有自己一些独到的见解，不会人云亦云啦。
微观上
1. 精通面向对象分析与设计(OOA/OOD)、涉及模式(GOF，J2EEDP)以及综合模式。你应该十分了解UML，尤其是class，object，interaction以及statediagrams。
2. 学习JAVA语言的基础知识以及它的核心类库(collections，serialization，streams，networking， multithreading，reflection，event，handling，NIO，localization，以及其他)。
3. 了解JVM，classloaders，classreflect，以及垃圾回收的基本工作机制等。你应该有能力反编译一个类文件并且明白一些基本的汇编指令。
4. 如果你将要写客户端程序，你需要学习WEB的小应用程序(applet)，必需掌握GUI设计的思想和方法，以及桌面程序的SWING，AWT， SWT。你还应该对UI部件的JAVABEAN组件模式有所了解。JAVABEANS也被应用在JSP中以把业务逻辑从表现层中分离出来。
5. 学习java数据库技术，如JDBCAPI并且会使用至少一种persistence/ORM构架，例如Hibernate，JDO， CocoBase，TopLink，InsideLiberator(国产JDO红工厂软件)或者iBatis。
6. 应该了解对象关系的阻抗失配的含义，以及它是如何影响业务对象的与关系型数据库的交互，和它的运行结果，还需要掌握不同的数据库产品运用，比如racle，mysql，mssqlserver。
7. 学习JAVA的沙盒安全模式(classloaders，bytecodeverification，managers，policyandpermissions，codesigning， digitalsignatures，cryptography，certification，Kerberos，以及其他)还有不同的安全/认证 API，例如JAAS(JavaAuthenticationandAuthorizationService)，JCE (JavaCryptographyExtension)，JSSE(JavaSecureSocketExtension)，以及JGSS (JavaGeneralSecurityService)。
8. 熟悉主流的网页框架，例如JSF，Struts，Tapestry，Cocoon，WebWork，以及他们下面的涉及模式，如MVC/MODEL2。
9. 学习Servlets，JSP，以及JSTL(StandardTagLibraries)和可以选择的第三方TagLibraries。
10. 学习如何使用及管理WEB服务器，例如tomcat，resin，Jrun，并且知道如何在其基础上扩展和维护WEB程序。
11. 学习分布式对象以及远程API，例如RMI和RMI/IIOP。
12. 掌握各种流行中间件技术标准和与java结合实现，比如Tuxedo、CROBA，当然也包括javaEE本身。
13. 要学习最少一种的XMLAPI，例如JAXP(JavaAPIforXMLProcessing)，JDOM(JavaforXMLDocumentObjectModel)，DOM4J，或JAXR(JavaAPIforXMLRegistries)。
14. 学习一门轻量级应用程序框架，例如Spring，PicoContainer，Avalon，以及它们的IoC/DI风格(setter，constructor，interfaceinjection)。
15. 学习如何利用JAVAAPI和工具来构建WebService。例如JAX-RPC(JavaAPIforXML/RPC)，SAAJ (SOAPwithAttachmentsAPIforJava)，JAXB(JavaArchitectureforXMLBinding)，JAXM(JavaAPIforXMLMessaging)， JAXR(JavaAPIforXMLRegistries)，或者JWSDP(JavaWebServicesDeveloperPack)。
16. 熟悉不同的J2EE技术，例如JNDI(JavaNamingandDirectoryInterface)，JMS (JavaMessageService)，JTA/JTS(JavaTransactionAPI/JavaTransactionService)，JMX (JavaManagementeXtensions)，以及JavaMail。
17. 学习企业级JavaBeans(EJB)以及它们的不同组件模式：Stateless/StatefulSessionBeans，EntityBeans(包含Bean- ManagedPersistence[BMP]或者Container-ManagedPersistence[CMP]和它的EJB-QL)，或者 Message-DrivenBeans(MDB)。
18. 学习如何管理与配置一个J2EE应用程序服务器，如WebLogic，JBoss等，并且利用它的附加服务，例如簇类，连接池以及分布式处理支援。你还需要了解如何在它上面封装和配置应用程序并且能够监控、调整它的性能。
19. 熟悉对不同有用的API和frame work等来为你服务。例如Log4J(logging/tracing)，Quartz (scheduling)，JGroups(networkgroupcommunication)，JCache(distributedcaching)， Lucene(full-textsearch)，JakartaCommons等等。
20. 熟悉面向方面的程序设计以及面向属性的程序设计(这两个都被很容易混淆的缩写为AOP)，以及他们的主流JAVA规格和执行。例如AspectJ和AspectWerkz。
21. 如果你将要对接或者正和旧的系统或者本地平台，你需要学习JNI (JavaNativeInterface) and JCA (JavaConnectorArchitecture)。
22. 熟悉JINI技术以及与它相关的分布式系统，比如掌握CROBA。
23. JavaCommunityProcess(JCP)以及他的不同JavaSpecificationRequests(JSRs)，例如Portlets(168)，JOLAP(69)，DataMiningAPI(73)，等等。
24. 熟练掌握一种JAVAIDE例如sunOne，netBeans，IntelliJIDEA或者Eclipse。(有些人更喜欢VI或EMACS来编写文件。随便你用什么了：)
25. JAVA(精确的说是有些配置)是冗长的，它需要很多的人工代码(例如EJB)，所以你需要熟悉代码生成工具，例如XDoclet。
26. 熟悉一种单元测试体系(JNunit)，并且学习不同的生成、部署工具(Ant，Maven)。
27.  能够深入了解加熟练操作和配置不同的操作系统，比如GNU/linux，sunsolaris，macOS等，做为跨平台软件的开发者。
28. 熟悉一些在JAVA开发中经常用到的软件工程过程。例如RUP(RationalUnifiedProcess)andAgilemethodologies。
29. 紧跟java发展的步伐，比如现在可以深入的学习javaME，以及各种java新规范，技术的运用，如新起的web富客户端技术。
30. 对opensource有所了解，因为至少java的很多技术直接是靠开源来驱动发展的，如java3D技术。
如果以上的知识你还不认识，还不能够熟悉的掌握，可以来找我。而现在我就有一个平台可以提供给你们学习，你想拿高薪的，想学习的，想就业前景好的，想跟别人竞争能取得优势的，想进阿里面试但担心面试不过的，你都可以来，群号为：654285701
注：加群要求
1、具有1-5工作经验的，面对目前流行的技术不知从何下手，需要突破技术瓶颈的可以加。
2、在公司待久了，过得很安逸，但跳槽时面试碰壁。需要在短时间内进修、跳槽拿高薪的可以加。
3、如果没有工作经验，但基础非常扎实，对java工作机制，常用设计思想，常用java开发框架掌握熟练的，可以加。

-----------










====================

数据仓库如何保证数据质量

1、从技术层面我们需要构建一套高效、健壮的ETL程序去保证数据清洗、转换后数据的正确性和一致性

 举个简单的例子：对日期格式的处理，源系统有2013-30-08 2013\8\30 20130830 2013-08-40 等多种不规范格式要考虑合面，统一清洗转换成一致性数据2013-08-30，同时对错误数据进行剔除

 并且系统提供事后自动检验机制，支持灵活的自定义检验逻辑，数据一旦违反，给予预警！

2、从流程上来说整个ETL是多个任务，按步骤顺序执行的一个过程，后置任务依赖前置任务，定期执行,，整个流程需要自动化，并且哪个环节出现了问题，给予预警，通知相关维护人员及时处理

3、从管理层面上来说，数据仓库是构建在公司各个业务系统之上，它是一面镜子，很多时候它能反映出业务系统的问题，所以需要管理层的支持和约束，比如通过第一条说的事

后自动检验机制反映出业务系统的维护错误，需要相应的业务系统维护人员及时处理

===================

#!/usr/bin/perl

###############################################################################

# 规则检查主要包括以下步骤：

#1.查询出所有的规则组，进行第一次循环

#　 2.查询当前规则组下的所有规则（一般都是针对同一个字段），循环每一个规则，从中提取规则sql

#   3.一组规则的每个规则都会在前一个规则的执行基础之上计算通过率，

#       有效检查记录总数，计算的粒度细分到机构，规则编号

#说明：

#调用形式 ：

#perl ruleCheck-concurrent.pl DQC_BHYWXXB#BHQSRQ_20160601.dir（单个字段）

#perl ruleCheck-concurrent.pl DQC_BHYWXXB#XDHTH-CJRQ_20160601.dir（多个字段）

#执行数据库环境：DB210.5 DPF

# Writer  : zengst

# Version : 2.0

###############################################################################

use strict;#对语法做严格限制，如变量必须先用my声明

use DBI;

use Time::Local;

my $dbh;#与数据库的连接

my $AUTO_HOME = $ENV{"AUTO_HOME"};

#通过ETL的加密方式得到登录信息

my $LOGON_DB2_FILE=$ENV{"LOAD_LOGON_DB2_FILE"};

my $DB2LOGON_FILE = "${AUTO_HOME}/etc/${LOGON_DB2_FILE}";

my $ODBCDriver = "AHNXODS64";

my $LOGONSTR;

my $DB2user;

my $DB2pwd;

my $RUN_DATE;#质量检测日期

my $Topic_Area;#检查的专题

my $Sys_Id;#检查的系统id

my $Map_Id;#规则组id

my $table_Name;#检查的表名

my $Check_Column_Name;#检查的字段名称，一个规则组，检测一个字段

my $PK_Column_Name;#检查的表的主键字段

my $Org_Column_Name;#机构字段名称，注意不是值，因为检查的业务系统的机构字段可能不一致

my $Rule_Name;#规则说明，即检查的是什么

my $checkID;  #检查编号

my $SQLClause;#当前规则检查的sql

my $Rule_Info;#规则信息

my $Rule_Group;#规则组信息

my $whereClause;

my $modifydate;

my $CheckDimension;#规则维度

my $CheckSegmentation;

my $logFile;

my $RuleTable='EASTDQM.Rule';#规则信息表

my $RuleGroupTable='EASTDQM.RuleGroup';#规则组信息表

my $check_Result = 'EASTDQM.Check_Result';#轻度结果汇总表

my $check_detail='EASTDQM.Check_Result_Detail';#检查结果明细表

my $check_detail_sample = 'EASTDQM.check_detail_sample';



#日志文件目录

#一个大于号，表示覆盖原有文件的内容

#两个大于号表示在原有文件内容之后添加

#@日志文件因为并发，可能发生读写冲突，最好加上表名和字段名的区分，即规则组的粒度





# 判断是否有信号文件信息

if ( $#ARGV < 0 ) {

  print "\n";

  print "Usage: ****.pl CONTROL_FILE  \n";

  print "Usage: Use parameters \n";

  print "CONTROL_FILE  --  SYS_JOBNAME_YYYYMMDD.dir \n";

  exit(1);

}



my $job_params = $ARGV[0]; #传入的参数

my $tableName="";#参数中的表名

my $column="";#参数中的字段名

my $TX_DATE=substr($job_params,length($job_params)-12,8);#业务数据日期

my $_date = substr($TX_DATE,0,4)."-".substr($TX_DATE,4,2)."-".substr($TX_DATE,6,2);

#my $TX_DATE="20160621";#数据日期

my $jobName = substr($job_params,4,length($job_params)-17);

sub getTableAndColumn{

if($jobName =~ /#/){

my @job_split = split("#",$jobName);

$tableName = @job_split[0];

#可能有多个列,列之间通过中杠分割

$column = @job_split[1];

if(split("-",$column)){

my @columnArr = split("-",$column);

my $columnLength = $#columnArr;

foreach my $k(0..$columnLength){

if($k eq 0){

$column = @columnArr[$k];

}else{

$column = $column.','.@columnArr[$k];

}

}

}

}

else{

print "The para format is wrong\n";

return 0;

}

}



sub getDB2LogonStr{

#定义文件的句柄

my $LOGONFILEREF;

#打开文件

    open($LOGONFILEREF, "${DB2LOGON_FILE}");

    my $LOGONSTR = <$LOGONFILEREF>;

    close(LOGONFILEREF);

     $LOGONSTR = `${AUTO_HOME}/bin/IceCode.exe "$LOGONSTR"`;

    my ($UserID, $UserPwd) = split(' ',$LOGONSTR);

    chop($UserPwd);

($DB2user,$DB2pwd) = split(',' , $UserPwd);

}



#初始化数据库的连接信息

sub DBconnect{

getDB2LogonStr();

$dbh = DBI->connect("dbi:ODBC:${ODBCDriver}","$DB2user","$DB2pwd",{RaiseError => 1, AutoCommit => 0 })

|| die "Couldn't connect to database: ".DBI->errstr;

print (GetNowTime()." get DB2 connection success! \n ");

return $dbh;

}



#得到规则组信息。因为每一个规则组里面的规则需要进行单独的

#权重评分，一次性搜索全部的规则时处理逻辑会相当复杂

sub getRuleGroupInfo{

#得到所有正在运行的规则组

getTableAndColumn();

my $runFreq  =isRunCondition();

   #根据表名+字段名的粒度筛选规则组，并发时并发度做到一定程度的最大化

my $groupInfoSQL = "select Map_Id,Topic_Area from ${RuleGroupTable} where Status= 1 and freq_flag in($runFreq) and table_name='$tableName' and check_column_name='$column' order by Map_Id";

#my $groupInfoSQL = "select Map_Id,Topic_Area from ${RuleGroupTable} where Status= 1 and freq_flag in('01') and table_name='dacorpinfo' and check_column_name='basicbankname' order by Map_Id";

#my $groupInfoSQL = "select Map_Id,Topic_Area from ${RuleGroupTable} where Status= 1 and table_name not in('CZXX','GRDQCKFHZ','GRHQCKFHZMXJL','GRJCXX','JJKXX','JYLS','NBFHZMXJL') AND MAP_ID NOT IN(SELECT MAP_ID FROM $check_Result group by map_id) order by Map_Id";

my $sth = $dbh->prepare($groupInfoSQL) or return -1;

my $ret = $sth->execute() or return -1;

${Rule_Group} = $sth->fetchall_arrayref();

$sth->finish();

return ${Rule_Group};

}



#得到数据库配置表的信息

sub getRuleInfo{

my ($groupId)=@_;#参数传入规则组Map_id



#一个规则组下有多个规则，rule_prior小的先执行

my $ruleConfigSql =

"select check_id,Topic_Area,r.sys_id,r.table_Name,r.Check_Column_Name,".

"r.PK_Column_Name,r.Org_Column_Name,rule_name,modifydate,r.SQLClause,map_id,WhereClause,CHECKDIMENSION ".

"from ${RuleTable} r".

" where r.status='1' and map_id=$groupId ".

" order by Rule_Prior asc";



my $sth = $dbh->prepare($ruleConfigSql) or return -1;

my $ret = $sth->execute() or return -1;

${Rule_Info} = $sth->fetchall_arrayref();

$sth->finish();

return 0;

}

#执行规则SQL

sub exeRuleSql{



#存储已经排好序的待执行的规则sql

my @exeCheckSql=();





for my $i(0..$#${Rule_Info}){



$checkID=${Rule_Info}->[$i]->[0];  #检查编号

print (GetNowTime()." Begin To Run Rule[$i]:$checkID \n");

$Topic_Area = ${Rule_Info}->[$i]->[1];#Rule_Info是一个二维数组，${Rule_Info}->[$i]表示是第i行

$Sys_Id=${Rule_Info}->[$i]->[2];

$table_Name=${Rule_Info}->[$i]->[3];

$Check_Column_Name=${Rule_Info}->[$i]->[4];

$PK_Column_Name=${Rule_Info}->[$i]->[5];

$Org_Column_Name=${Rule_Info}->[$i]->[6];

$Rule_Name=${Rule_Info}->[$i]->[7];

$modifydate=${Rule_Info}->[$i]->[8];

$SQLClause=${Rule_Info}->[$i]->[9];

$SQLClause =~ s/(\$[\w_]+)/eval $1/ge;

$SQLClause =~ s/(\$\{[^\}]+\})/eval $1/ge;

$Map_Id=${Rule_Info}->[$i]->[10];

$whereClause = ${Rule_Info}->[$i]->[11];

$CheckDimension = ${Rule_Info}->[$i]->[12];



push(@exeCheckSql,$SQLClause);



#为了防止多次执行，需要删除轻度汇总表和和检查明细表

#运行时要删除全部的机构数据



print (GetNowTime() . " **************************Clear The Result Table:**************************\n");

my $DelSql = "Delete From ${check_Result} Where Check_ID = ${checkID} and rundate='${_date}'";

my $sth = $dbh->prepare($DelSql) or return -1;

#返回影响的行数,select也可以影响行数

my $ret = $sth->execute() or return -1;

$sth->finish();

print (GetNowTime() . " **************************Clear The Result Table:Succeed[Rows:$ret] **************************\n");







print (GetNowTime() . " **************************Clear The Detail Table:**************************\n");

my $DelSql = "Delete From ${check_detail} Where Check_ID = ${checkID} and RUNDATE='${_date}'";

$sth = $dbh->prepare($DelSql) or return -1;

#返回影响的行数，也包括select语句

$ret = $sth->execute() or return -1;

$sth->finish();#释放结果集

print (GetNowTime() . " **************************Clear The Detail Table:Succeed[Rows:$ret]**************************\n");





#字符串的相等是eq，第一次执行的规则的记录总数是待检测表的记录总数

if($i==0){



my $fromposi = index($SQLClause,'FROM');

my $fromclause = substr($SQLClause,$fromposi+4);



#主键字段是多列，这里将它拼成一列

my $pkselect = '';

my @PKcon = split(",",$PK_Column_Name);

my $PKlen = $#PKcon;#获得数组的下标，数组为空时，返回-1

if($PKlen eq 0){

$pkselect = $PK_Column_Name;

}else{

foreach my $k(0..$PKlen){

if($k eq 0){

$pkselect = @PKcon[$k];

}else{

$pkselect = $pkselect.'||'.'\'#\''.'||'.(@PKcon[$k]);

}

}

}



#对检查的字段是多列情况的处理,将多列的数据拼接成一列

my $ckselect= '';

my @CKcon = split(",",$Check_Column_Name);

my $CKlen = $#CKcon;

if($CKlen eq 0){

$ckselect = $Check_Column_Name;

}else{

foreach my $k(0..$CKlen){

if($k eq 0){

$ckselect = @CKcon[$k];

}else{

$ckselect = $ckselect.'||'.'\'#\''.'||'.(@CKcon[$k]);

}

}

}



my $now1 = time;

print (GetNowTime() ." ************************** insert into detail begin **************************\n");



#将规则sql的检查结果插入detail表，因为最终需要进行轻度汇总

my $detailinsertSql = "Insert Into ${check_detail}" .

" select ${checkID},'${_date}', ${Map_Id}," .

" '${Topic_Area}','${Sys_Id}','${table_Name}','${Check_Column_Name}','${CheckDimension}','${CheckSegmentation}',".

" ${pkselect},${Org_Column_Name},${ckselect} from ".$fromclause;



my $detailsth = $dbh->prepare($detailinsertSql) or return -1;

$detailsth->execute() or return -1;

$detailsth->finish();

print (GetNowTime() ." ************************** insert into detail end  **************************\n");





print (GetNowTime() ." ************************** insert into sample data begin **************************\n");

#从全量表按照规则、机构和运行日期的维度取得样本数据，插入到样例表

#partition by 可以是多个字段

my $sampInsert = "insert into ${check_detail_sample}".

" select ${checkID},'${_date}',${Map_Id},'${Topic_Area}','${Sys_Id}','${table_Name}','${Check_Column_Name}',".

"'${CheckDimension}','${CheckSegmentation}',pk_column_value,org_id,check_column_value from ".

"(select crt.*,ROW_NUMBER() over( partition by org_id,check_id) as seq from ${check_detail} crt where rundate='${_date}') detailtmp ".

" where detailtmp.seq<6";

my $inssth = $dbh->prepare($sampInsert) or return -1;

$inssth->execute() or return -1;

$inssth->finish();

#将日志信息打印到文件当中

print (GetNowTime() ." ************************** insert into sample data end  **************************\n");





print (GetNowTime() ." ************************** begin insert check_result**************************\n");

#将detail数据进行汇总插入到result表,直接通过sql进行数据的循环插入，方式insert into table select ******

my $InsSql = " Insert Into ${check_Result}".

" select ${checkID},'${_date}', '${Rule_Name}',${Map_Id},'${Topic_Area}','${Sys_Id}','${table_Name}','${Check_Column_Name}','${CheckDimension}','${CheckSegmentation}',".

" mainorg ,effectCount,effectCount-decode(FailCount,null,0,FailCount), decode(FailCount,null,0,FailCount),".

" cast(decode(FailCount,null,0,FailCount) as double)/effectCount,cast((effectCount-decode(FailCount,null,0,FailCount)) as double)/effectCount from ".

"(select count(*) as effectCount, $Org_Column_Name as mainorg from  ${Sys_Id}.${table_Name} group by ${Org_Column_Name}) tmain ".

" left join ".

"(select count(*) as FailCount, org_id,check_id from ${check_detail} detail where detail.rundate = '${_date}'and check_id=${checkID} group by org_id,check_id) tdetail".

" on tmain.mainorg = tdetail.org_id";



my $collsth = $dbh->prepare($InsSql) or return -1;

$collsth->execute() or return -1;

$collsth->finish();

print (GetNowTime() ." ************************** end insert check_result**************************\n");

my $now2 = time;

my $diff = $now2 - $now1;

if($diff > 1800){#大于30分钟

print ("execute time is : $diff second,checkId is :【$checkID】 ! \n");

}



$dbh->commit();

#没有commit时，就不会插入到数据库





}else{



#上一次执行的sql,一个规则组下的第n个规则执行时，检查的有效记录数=全表-前面n-1次检查出的记录数

my $preWhereCluse = '';

my $arrIndex = $#exeCheckSql;



#当前是第i个规则sql，那么需要得到前面i-1个规则sql检测的sql

for(my $j=0;$j<=($arrIndex-1);$j++){



#这里要求规则sql都是有where条件的,截取的都是where之后的内容

#这里要求执行的规则sql只有where子句

my $whereposi = index(@exeCheckSql[$j],'WHERE');

my $whereclause = substr(@exeCheckSql[$j],$whereposi+5);



if($j eq 0){

$preWhereCluse = ' and not('.$whereclause.')';

}else{

$preWhereCluse =  $preWhereCluse.' and not('.$whereclause.')';

}

}



#本次检查在上一次检查的基础上，排除上次规则检查有问题的记录

my $currSqlCluse = $SQLClause.$preWhereCluse;



my $fromposi = index($currSqlCluse,'FROM');

my $fromclause = substr($currSqlCluse,$fromposi+4);



my $pkselect = '';

my @PKcon = split(",",$PK_Column_Name);

my $PKlen = $#PKcon;#获得数组的下标，从0开始，数组为空时，返回-1

if($PKlen eq 0){

$pkselect = $PK_Column_Name;

}else{

foreach my $k(0..$PKlen){

if($k eq 0){

$pkselect = @PKcon[$k];

}else{

$pkselect = $pkselect.'||'.'\'#\''.'||'.(@PKcon[$k]);

}

}

}



my $ckselect= '';

my @CKcon = split(",",$Check_Column_Name);

my $CKlen = $#CKcon;

if($CKlen eq 0){

$ckselect = $Check_Column_Name;

}else{

foreach my $k(0..$CKlen){

if($k eq 0){

$ckselect = @CKcon[$k];

}else{

$ckselect = $ckselect.'||'.'\'#\''.'||'.(@CKcon[$k]);

}

}



}

my $now1 = time;

print (GetNowTime() ." ************************** insert into detail begin **************************\n");

#将规则sql的检查结果插入明细表

my $detailInsertSql = "Insert Into ${check_detail}" .

" select ${checkID},'${_date}', ${Map_Id}," .

" '${Topic_Area}','${Sys_Id}','${table_Name}','${Check_Column_Name}','${CheckDimension}','${CheckSegmentation}',".

" ${pkselect},${Org_Column_Name},${ckselect} from ".$fromclause;



my $detailsth = $dbh->prepare($detailInsertSql) or return -1;

$detailsth->execute() or return -1;

$detailsth->finish();

print (GetNowTime() ." ************************** insert into detail end  **************************\n");





print (GetNowTime() ." ************************** insert into sample data begin **************************\n");

#从临时表按照规则、机构和运行日期的维度取得样本数据，插入明细表

#partition by 可以是多个字段

my $sampInsert = "insert into ${check_detail_sample}".

" select ${checkID},'${_date}',${Map_Id},'${Topic_Area}','${Sys_Id}','${table_Name}','${Check_Column_Name}',".

"'${CheckDimension}','${CheckSegmentation}',pk_column_value,org_id,check_column_value from ".

"(select crt.*,ROW_NUMBER() over( partition by org_id,check_id) as seq from ${check_detail} crt where rundate='${_date}') detailtmp ".

" where detailtmp.seq<6";

my $inssth = $dbh->prepare($sampInsert) or return -1;

$inssth->execute() or return -1;

$inssth->finish();

print (GetNowTime() ." ************************** insert into sample data end  **************************\n");







print (GetNowTime() ." ************************** begin insert check_result**************************\n");

#将detail数据插入到result表,直接通过sql进行数据的循环插入，方式insert into table select ******

my $InsSql = " Insert Into ${check_Result}".

" select ${checkID},'${_date}', '${Rule_Name}',${Map_Id},'${Topic_Area}','${Sys_Id}','${table_Name}','${Check_Column_Name}','${CheckDimension}','${CheckSegmentation}',".

" mainorg ,effectCount,effectCount-decode(FailCount,null,0,FailCount), decode(FailCount,null,0,FailCount),".

" cast(decode(FailCount,null,0,FailCount) as double)/effectCount,cast((effectCount-decode(FailCount,null,0,FailCount)) as double)/effectCount from ".

"(select count(*) as effectCount, $Org_Column_Name as mainorg from  ${Sys_Id}.${table_Name} where 1=1".$preWhereCluse." group by ${Org_Column_Name}) tmain ".

" left join ".

"(select count(*) as FailCount, org_id,check_id from ${check_detail} detail where detail.rundate = '${_date}'and check_id=${checkID} group by org_id,check_id) tdetail".

" on tmain.mainorg = tdetail.org_id";



my $collsth = $dbh->prepare($InsSql) or return -1;

$collsth->execute() or return -1;

$collsth->finish();

print (GetNowTime() ." ************************** end insert check_result**************************\n");

my $now2 = time;

my $diff = $now2 - $now1;

if($diff > 1800){#大于30分钟

print ("execute time is : $diff second,checkId is :【$checkID】 ! \n");

}

$dbh->commit();



}#else block



}#rule_info for block



return 0;

}



sub main{

print "main begin \n";

#得到数据库连接

$dbh = DBconnect();



#初始化规则组信息

print (GetNowTime() . " *********************init ruleGroup info ! ***************************\n");

getRuleGroupInfo();



#如果查询没有数据，返回接收的数组取值后，下标的最大值就是-1

my $ruleGrouplength = $#${Rule_Group}+1;



print (GetNowTime() . " *********************ruleGroup length: $ruleGrouplength ***************************\n");



#判断执行结果

if ($ruleGrouplength = 0 ){

print (GetNowTime() . " *********************No Rule_Group Info !*********************\n");

} else {

print (GetNowTime() . " *********************Get Rule_Group:Succeed !********************* \n");

}



#循环规则组，根据每一个规则组，找到该规则组下的规则（注意规则状态必须是1，即是可运行的）

my $groupTemp = '';

for my $ii(0..$#${Rule_Group}){

$groupTemp = ${Rule_Group}->[$ii]->[0];

print (GetNowTime() . "********************* Begin To Run Rule_Group[$ii+1],groupId:${groupTemp}********************* \n");

#传入了规则组参数Mapid

print (GetNowTime() . " *********************Begin To get Rule Info! ***************************\n");

getRuleInfo($groupTemp);

print (GetNowTime() . " *********************end  To get Rule Info! ***************************\n");

print (GetNowTime() . " *********************Begin To execute Rule check ! ***************************\n");

exeRuleSql();



#将错误明细表的记录导出成txt文件，这里是规则组的粒度

#导出明细后，删除明细数据，防止数据量膨胀



print (GetNowTime() . " *********************end To execute Rule check ! ***************************\n");

}



print (GetNowTime() . " ********************* end  ***************************\n");



return 0;

}



sub GetNowTimeNospechar{

my ($sec, $min, $hour, $day, $mon, $year, $wday, $yday, $isdst) = localtime();

$hour = sprintf("%02d", $hour);

$min  = sprintf("%02d", $min);

$sec  = sprintf("%02d", $sec);

my $stime = GetNowDate().$hour.$min.$sec;

return $stime;

}



sub GetNowTime{

my ($sec, $min, $hour, $day, $mon, $year, $wday, $yday, $isdst) = localtime();

$hour = sprintf("%02d", $hour);

$min  = sprintf("%02d", $min);

$sec  = sprintf("%02d", $sec);

my $stime = GetNowDate()." ".$hour.":".$min.":".$sec;

return $stime;

}



#找到当前的日期，月份要加1，年份是从1900开始算的

sub GetNowDate{

my ($sec, $min, $hour, $day, $mon, $year, $wday, $yday, $isdst) = localtime();

$mon = sprintf("%02d", $mon+1);

$day = sprintf("%02d", $day);

my $stime = ($year+1900)."-".$mon."-".$day;

return $stime;

}

sub GetNowDate8{

my ($sec, $min, $hour, $day, $mon, $year, $wday, $yday, $isdst) = localtime();

$mon = sprintf("%02d", $mon+1);

$day = sprintf("%02d", $day);

my $stime = ($year+1900).$mon.$day;

return $stime;

}



#判断当前日期所属的频率（每天，每星期，每半月，每月，每季度，每年）

sub isRunCondition{



my $FLAG ="'01'";

my $year = substr($TX_DATE,0,4);

my $month = substr($TX_DATE,4,2);

my $day = substr($TX_DATE,6,2);



#判断是否闰年

my $isRunYear;

if(($year%4==0 && $year%100!=0) || $year%400==0){

$isRunYear = 1;

} else {

$isRunYear = 0;

}



   #判断TX_DATE所在周的周末

 my $timenum = Time::Local::timelocal(0, 0, 0, $day, $month-1, $year);

 my @timestr = localtime($timenum);

 my $wday = $timestr[6];

 if ($wday==6){

 $FLAG=$FLAG.",'02'";

 }



  #判断TX_DATE所在月的月末

  my $Month_End;

  if($month eq "01" || $month eq "03" || $month eq "05" || $month eq "07" || $month eq "08" || $month eq "10" || $month eq "12"){

  $Month_End = "31";

  } elsif($month eq "04" || $month eq "06" || $month eq "09" || $month eq "11"){

  $Month_End = "30";

  } elsif($month eq "02" && $isRunYear==1) {

  $Month_End = "29";

  } else {

  $Month_End = "28";

  }



if($Month_End eq $day){

$FLAG=$FLAG.",'03'";

}



#判断TX_DATE所在季的季末

my $Quarter_Month;

my $Quarter_End;

if($month eq "01" or $month eq "02" or $month eq "03") {

$Quarter_Month="03";

}elsif($month eq "04" or $month eq "05" or $month eq "06") {

$Quarter_Month="06";

}elsif($month eq "07" or $month eq "08" or $month eq "09") {

$Quarter_Month="09";

}elsif($month eq "10" or $month eq "11" or $month eq "12") {

$Quarter_Month="12";

}



if($Quarter_Month eq "03" || $Quarter_Month eq "12" ){

$Quarter_End ="31";

} elsif($Quarter_Month eq "09" || $Quarter_Month eq "06" ){

$Quarter_End ="30";

}



if($Quarter_Month.$Quarter_End eq $month.$day){

$FLAG=$FLAG.",'04'";

}



#判断TX_DATE所在半年末

my $Half_Month;

my $Half_End;

if($month eq "01" or $month eq "02" or $month eq "03" or $month eq "04" or $month eq "05" or $month eq "06") {

$Half_Month="06";

}elsif($month eq "07" or $month eq "08" or $month eq "09" or $month eq "10" or $month eq "11" or $month eq "12") {

$Half_Month="12";

}



if($Half_Month eq "12" ){

$Half_End ="31";

} elsif($Half_Month eq "06" ){

$Half_End ="30";

}



if($Half_Month.$Half_End eq $month.$day){

$FLAG=$FLAG.",'05'";

}



#年末

my $Year_End="1231";

if($Year_End eq $month.$day){

$FLAG=$FLAG.",'06'";

}



return $FLAG;

}

#方法调用，程序入口

my $rc = main();#函数的入口

exit($rc);#这里的exit内容可以被ETL接收到

=====================================

地址在这里：https://sourceforge.net/projects/dataquality/?source=typ_redirect

可以看看视频介绍，如果用的话直接下来压缩包，解压就可以用（可以需要安装jdk1.8；注意，MAC下使用.sh脚本启动）

可以方便的看到各列的MIN MAX，各值的统计结果，也可以执行SQL等。
========================================

作者：Vinod Kumar 

翻译：季洋

校对：王雨桐

本文约1600字，建议阅读8分钟。

本文主要讲述关于数据质量和验证检查的实例，以及运用Apache Spark和Scala采用编码来确保数据质量是多么容易。



大数据和机器学习都是和数据打交道。因此，在系统中保持数据的正确性就非常重要。如果数据不准确，不仅仅会降低系统的效率，还会得到一些不恰当的观点。通过数据质量和验证是确保数据正确性的重要步骤之一。随着数据量的不断增加，噪声数据也随之而来，每天都要引入新的方法和检验以确保数据的质量。由于数据量巨大，需要考虑的另一件事是如何确保快速处理这些检查和验证；例如，一个系统采用高分布式的方法来遍历每一条进入系统的数据。本文将讲述关于数据质量和验证检查的一些例子，以及在Apache Spark和Scala的帮助下运用程序来确保数据质量是多么简单。



数据准确性：指的是观测结果和真实值或可接受为真的值之间的接近度。



空值: 包含空值（null）的记录。如： male/female/null


特定值: 某公司的ID号。


模式验证：每一批数据必须遵循相同的列名和数据类型。


同列下的值重复（如记录中重复的email）


唯一性检查: 各记录关于某列值是唯一不重复的，这一点和重复性检查类似。


正确性检查：可以使用正则表达式进行检查。例如，我们可以查找包含@的电子邮件id。


数据的普及性：你的数据有多及时？假定每天都有数据进入，随后要检查数据并打上时间戳。


数据的质量和验证检查的条目可以源源不绝，但是基于Spark和Scala的方法的好处是，用较少的代码，可以利用海量的数据达到更多目的。


有些时候，一个系统可能有某些特定的需求，这与谁需要这些数据以及以什么形式数据有关；同时这些数据使用者会对数据提出假设。


数据的可用性： 使用者可能对数据有特定要求，如：


列1的值不等于列2的值


列3的值应该等于列1的值加上列2的值


列x的值不应该超过x%的时间



然而这些被看作基本的数据验证，还有一些更高级别的检查来确保数据的质量，如：


异常监测：这包括两个主要方面：


比如给定维度，如基于时间的异常。这意味着在任何指定时间范围内（时间片段），记录数不能超过平均值的x%。为了做到这点，运用Spark做法如下：


假定时间片段为1分钟。

首先，需要对时间戳列进行过滤和格式化处理，如此时间戳才能以分钟为单位表示出来。这将产生重复，但是这应该不是问题。

接下来，运用groupBy，

如下： 

sampledataframe.groupBy("timestamp").count()。

算出平均值，同时找出记录数超出均值x%的那些时间片段（如果存在的话）。 



排序



记录应该遵循一定的顺序。例如，在一天内，某个消费者的数据记录应该是从产生兴趣开始，点击，加载页面，加入购物车，最后以购买结束。这些可能只是部分记录，但它们应该遵循一定的顺序。为了检查顺序，运用Spark做法如下：



groupBy("ID") – 以序列号分组

对每一分组运行排序检查



循环依赖：让我用一个例子来解释这点。



如果从列A到列B中取出两列，记录如下：







如果应用程序要得到家庭关系结构，这会形成一个环状依赖关系。



故障趋势



考虑到每天都有数据进入系统。让我们设想它的行为或接触点数据。为了简单起见，我们将每天的数据称为一‘批’。在每一批数据中，如果我们都会得到一组完全相同的故障，则一定存在跨批次的故障趋势。



如果故障是源于相同的一组email_id(邮箱号为一列字段)，则这可能是自动程式行为的征兆。



数据偏倚：这意味着在图形上数据呈现一个连续的偏差。如：



如果向时间戳上加上30分钟，那么所有的记录都会有这30分钟的隐形偏倚。如此一来，如果预测算法想要使用这些数据，这种偏差将影响结果。



如果用来生成这些数据的算法有学习偏差，那么对一组数据会生成更多的默认值，随后用于其他数据。例如基于购买行为，它会预测出错误的购买者性别。

 

自动程式行为: 通常，一个自动程式行为如下：



它使用相同的唯一标识符生成记录。像前文提到的同一组email_id。

它会在任何特定时间生成网络流量。这是基于时间的异常现象。

它生成的记录有固定顺序：跨数据批次的顺序检查。



原文标题：

Data Quality and Validation

原文链接：

https://dzone.com/articles/java-amp-apache-spark-for-data-quality-amp-validat


数据质量稽核工具-datacheck
2017年07月19日 17:38:12 young-ming 阅读数：3802
简介
一个简单的数据质量稽核自动化工具，通过配置稽核sql，自动化发送报警。
实现常见的稽核规则的检查,例：数据的一致性、完整性、及时性检查，指标的历史波动检查、关联检查、指标平衡检查、其他根据实际业务制定的业务规则检查
功能支持
1、支持mysql、greenplum数据源
2、配置sql，自动化执行，如果sql返回结果有数据，自动发送报警
3、不同sql规则可设置优先级
4、可控制并发

项目源码
https://github.com/xmingyang/datacheck

================

-----------------------------------------


本地测试-研发测试-生产

边开发边测试边修正

模拟现实

思维导图

成为逻辑机器，与机器沟通



在软件开发的领域中，有害的编程习惯基本上都是由不良的编码习惯造成的，只有能改变这些不良习惯，工作起来会更轻松更有效率，本文是非正常程序员带来的文章，作者其他文章可文末看点击原文。



总出现错误的变量名和函数拼写

让很多人想不通的是，为什么大家都知道这个习惯对自己没有好处，为什么还是有人让他出现，以至于常常出现错误的变量名和函数名的拼写。而且这些错误的拼写总是隐蔽的很好，也很难被发现。

想要解决这个问题，我们可以在一个比较成熟的开发环境上写代码，又或是用程序员专用的文本编辑器，这些都可以减少拼写错误。也可以用特定的变量名和函数名，这样容易拼写，也容易发现写错的地方。


总不按规定的格式写代码
常用的缩进和格式化能让写出的代码一目了然，有什么错误一看就知道。而且别人看着也方便。

倘若你使用的是不会自动格式化的代码，那你可以考虑用代码美化软件，如Uncrustify，因为他允许用户自定义格式要求，接着它会按你的要求执行任务。


总不按规定的模块编写代码

长函数实现的路径太多，常常测试起来就很麻烦，所以要习惯于一个函数对应一个指令，这样及简短又容易理解和维护。


不要总是依赖IDE




不用多说，大家都知道，IDE能让你的代码写的又好又快。他们能提你想用的很多东西和选择提示。但也会存在一定的风险，若你不能确保自己有足够的细心，那么很容易会出错。

好的工具的确是个不错的帮手，他可以消除拼写错误，还可以提高我们的工作效率，如果你还不够细心，那同样用了这些也还是会出问题。


总写死密码

一些人总是喜欢在程序里写写死帐户名和密码，这样可以方便进入系统，虽然是方便了，但一样也方便了别人，所以这是不对的。
主要原因是硬编码远比你想的脆弱，如果不及时更正你的习惯，这将是个很大的而且不好修复的安全隐患。


没有使用加密保护数据

通常数据在互联网上传输都是需要加密的。不然在传输的过程中很可能被拦截。不要嫌麻烦，如果你不加密，出现了问题会让你更麻烦。如果写安全加密系统比较难，我们也可以使用经过验证过的标准加密库。


不要提前优化代码

善于写代码的程序员在写代码时的确是写的又快又顺畅，而后期的调试和维护则会难些。一定要想好策略，写好代码后再去找真正需要优化的地方以提高性能。


没有考虑好发展趋势

做这个项目的目的是什么？要做多大的规模？用户会是多少？也许有人认为这些好像和我们没什么关联，但是，如果你不好好考虑这些问题，怎么才能在刚开始时开发正确的程序框架。


不是人手越多进度越快

为什么每次要做的项目都比计划中的慢，当进度赶不上的时候，人们总是习惯性的增加人手，但事实上并不是增加了人手后进度就快了，有时反而是不升反降低了。


明知有问题还不变通

也有一些团队在做项目时发现进度远赶不上计划的时间时，就会做出拼命赶进度的情况。这样并不是办法，如果时间上真的比计划中要长很多，那么，说明你在对这个项目上预估的时间是有问题的。这时不要硬着头皮往上冲，应该从新调整时间才对。


---------------

1.如果性能不佳，就在应用层处理，别放在数据库层。
排序和分组就是一个例子。在应用层操作性能提升总是比在数据层操作容易。在这点上，无论是服务器端的MySQL数据库还是移动设备端的sqlite数据库都是如此。让我来给大家解释下：大家会对一些特定的查询应用方法虽然不能减少客户端的响应时间，不过还是可以减缓数据库服务器的压力，这样可以避免数据库成为所有客户端的瓶颈。
2.避免并发运算
有时可能没法避免，那么一定要知道，功能超强，程序当然就越复杂。最好避免直面线程。一定要在更高层次上处理问题。就拿ios系统的例子来说：GCD、分派和队列操作可是我们的好帮手。要明白一点就是，人的大脑是不具备推理暂存的和无限情形这个功能的，这可是个人经历过的惨痛教训，希望大家参考并且有用。
3.单一责任，对象状态尽量越少越好，实用才是硬道理。
4.简洁，组合，而非聚合
5.不些地方尽量不用注释，因为有时会适得其反。
慢慢的随着时间的流逝，你的那此注释可能会变的过时，但如果都不注释也是不对的，只要不是什么小事都拿来注释就好，大家要懂得把握好度，那个可以注释那个不用注释。有些地方我们可能还要写上大篇的注释，因为人的记忆总是有限的，可能过一天后就忘记了。
6.不要臆断
有时在做某个应用时你就会在想，这个应该不会有问题吧，有可能过不了多久你就会生自己的气，反问自己为什么要图省事，折返会让自己付出最多的代价，所以遇到疑问时一定要主动测试、积极验证。
7.遇到疑问时，和你的小伙伴积极讨论和沟通。
9.用户都不傻，他们只是不想浪费时间去了解你所谓的捷径。
10.
有些时候一个开发人员没有被派到维护自己曾参与创建的团队中去，发现问题了又不能参与，可能他们会觉得自己之前的付出都不值了，而过时却发现之前那些人员的维护又出了问题才要自己参与进去，这时一定不要怨天尤人，你要明白这正是你将要成为一个更为睿智的专业程序员的节奏。
12.努力让自己更积极的面对工作，这样我们才能觉得有趣。
13.有时系统的崩溃仍是自己不原看到的，所以一定要做好日常的监控，记好监控日志，避免出现各种异常，保持系统对故障的敏感度和及时警报。

---------------


好代码可以定义为易读、易懂、易调试、易改，最重要的还要少缺陷。显然，要想敲出一手好代码，是要花不少时间，但这在长久来看是有意义的，因为你可以花更少时间及精力去维护和复用你的代码。
事实上，我们可以将好代码等同于可复用的代码，这也是下面提到的重要原则之一。代码可能只是完成了编程工作中短期目标的特定功能，但如果没人（包括你自己）愿意复用你的代码，这代码在某种程度上可以说是不足且有缺陷的。要么太复杂、要么太具体、要么在不同情况下极有可能崩掉，或者其他程序员可能不相信你的代码。
下面无论你的经验水平如何，如果你始终如一地将下面的妙招应用到你的代码中（包括你的实验或者原型），那么一手好代码随手可得。
1、 遵循单一责任原则
函数在程序员的库中是单一最重要的抽象形式。可以被复用的机会越多，你要写的代码就越少，这些代码就越可靠。遵循单一责任原则的小小函数更有可能被重新使用。
2、最小化共享状态
应该将函数之间的隐式共享状态最小化，无论它是文件作用域变量还是对象的成员字段，这有利于显式地将所需的值作为参数。当明确函数实现所需结果时，代码变得容易理解和重用。
对此可以得出一个结论，你应该优先选择静态无状态变量而不是对象的成员变量。
3、本地化副作用
理想的副作用（例如打印到控制台、记录、改变全局状态、文件系统操作等）应该放置在单独的模块中，而不是分散在整个代码中。功能上的副作用往往违反了单一的责任原则。
4、优先选择不可变的对象
如果一个对象的状态在其构造函数中设置一次，并且不再次更改，则调试变得容易得多，因为一旦构造正确就保持有效。这是降低软件项目复杂性的最简单方法之一。
5、多用接口少用类
接受接口的函数（或C++中的模板参数或概念）比在类上操作的函数可重用性更强。
6、对模块应用良好的原则
将软件项目分解成更小的模块（例如库和应用程序），以实现模块化重用。模块的一些关键原则是：
  1. 最小化依赖关系
  2. 每个项目都应该有一个单一明确的功能
  3. 不要重复
你应该努力让你的项目保持小巧和明确。
7.避免继承
在面向对象编程中，继承，特别是虚拟函数在可重用性方面往往是一个死穴。我很少能成功地使用能覆盖类的库。
8.同设计和开发一样进行测试
我并不是测试驱动开发的铁杆拥护者，但在你开始编写测试代码时，编写测试自然遵循了许多指导方针。它也有助于早点将错误暴露出来。避免编写无用的测试，良好的编码意味着更高级的测试（例如，单元测试中的集成测试或功能测试）在显示缺陷方面更有效。
9.优先选择而不是手写标准库
我无法告诉你需要多久才能看到一个 std :: vector 或 std :: string 更好的版本，但它几乎总是浪费时间和精力。除了一个显而易见的事实，那就是你正在把 bug 引入一个新的地方。（见技巧10）其他程序员不太可能重用您的代码，而不是那些被广泛理解、支持和测试的代码。
10.避免写新代码
最重要的一点是，每位程序员应遵循：“The best code is the code that isn’t written”（最好的代码是不用被复写的代码）。你的代码越多，缺陷就越多，找到并修复 bug 就越困难。
在编写一行代码之前先问问自己，有没有一个工具，函数或库已经做了你所需要的功能？你真的需要自己去实现这个功能，而不是调用另一个已经存在的功能吗？
总结
编程就好比是一种艺术形式或者一项运动，你只有通过不断地练习，不断地向他人学习，才能不断地提高代码的质量，这些都将有利于你成为更加高效的程序员。
-------

说起项目，每个程序员都应该搭建过自己的项目，而我也搭建过数十个企业级或互联网级项目；在做企业级项目时也抽象了一套通过的开发脚手架ES方便开发，也做过一些通用的代码生成工具来生成通用项目架子或一些CRUD的代码。做这些平台或项目的时候或多或少给我一些启示和原则，而这些启示和原则一直指导着我内心方向，时刻指导我不偏离航线。

启示录
  ● 心中有原则
  ● 代码规范化
  ● 代码审查
  ● 代码重构
  ● 代码注释
  ● 代码逻辑抽象
  ● 工具类
  ● 项目闭环
  ● 持续改进
  ● 自动化
心中有原则
我认为这是搭建和维护项目的灵魂，失去了灵魂，项目虽然能运行，但是未来是没有方向的。来了需求就接，最后就是修修补补。其实我个人认为心中有原则就是有未来预见性，能根据现有需求预见到未来的需求发展。

比如我做过的一个项目是需要依赖数十个系统，那么之前的做法是让所有我依赖的系统在变更时调用我的同步接口把数据同步过来，此处存在这么几个问题：假设IP或域名变了，需要通知所有依赖方；假设我们出问题了，各个依赖方需要自己进行重试；假设数据出问题了，需要通知依赖方再同步一下数据；这种方式产生了严重的耦合。因此在设计新架构时我们要完全摒弃这种方法，改用异步通知+拉取依赖数据的方式，如通过MQ通知我们数据变更了，然后通过依赖方提供的接口拉取数据；这种方式的好处：和依赖方松耦合；假设数据有问题再调用下依赖方接口拉取下数据修复即可。因此这个项目的原则就是异步通知+拉取数据。而如果依赖方不提供这种接口我们就无法满足他们的需求。还有一种特例就是有些依赖方的数据可以一天全量同步一次，那么可以使用定时任务每天跑一次；即定时任务+拉取数据。也就是说最糟糕的情况就是使用定时任务+拉取数据机制。

比如我们接到一个需求说需要在你们页面上加一个数据来展示，此时要我们在展示页面时调用他们的接口拿到数据然后展示，此处存在的问题是：我们如果强依赖他们，那么他们的抖动将影响我们页面的体验，虽然可以降级，但是我们也不能容忍一点点抖动；因此我们提供的方案还是异步通知+拉取数据，将数据存储到我们自己这边；或者前端异步加载。

心中有原则，即必须有一个或几个中心原则指导我们的架构不偏离航线，否则项目将朝着腐朽的方向发展，越做越烂，最后没有几个人能维护这个项目。也不能因为图一时之省事，而为未来埋坑。

代码规范化
在写代码时也要有一些原则或规范化的东西来指导。比如我们的项目也分了什么DAO、Service、Controller；而每个人可能叫的名字/开发时思路不一样，那么我们必须统一起来，如：
1、没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类，因为我项目90%以上情况不需要接口这个东西，为了接口而接口只能使类的数量暴增；
2、所有类名必须见名知意，不能表达含义的全部重构；
3、配置文件的规范化，其实就是分类，按照功能分类配置；
4、比如spring bean的名字可以带上后缀， **Service、**Dao、**RpcService、**HttpService、**DataSource，见到名字后缀就知道这个功能是什么实现的。

不同公司的规范化可能不一样，遵循自己公司的一套规范化让代码朝着好的方向发展。

代码审查
代码审查对于一些新人我个人觉得是有必要的，因为新人来了不了解我们的原则、不熟悉我们的代码规范；此时应该通过代码审查机制来纠正或着带领着他们朝着我们一个共同的方向发展。通过代码审查可以纠正一些错误的或者不好的实现，找出一种当前最优的方案；还可以让新人意识到一些他觉得无所谓的问题。

代码重构
发现不好的或者坏掉的代码必须重构，因为如果觉得这段代码有问题，只要这个项目活着，未来的某一天肯定会出问题。一个没事或以后改吧可能导致一个重大的线上事故。因此发现不好的代码应该找时间立即重构。重构的目标也是架构原则指导的，不符合原则的就应该重构掉。

代码注释
很多人可能不屑于写注释，觉得代码就是注释；那我觉得可能是他没见过变态的业务需求，在我们项目中总是存在一些非常变态或着说是魔法代码，这些代码只有当时写的人理解，如果没有注释，你是不了解他那么做的意图的，会觉得很不可思议，但是实际上那就是业务需求。还有一些是我们依赖别人的接口，而这个接口也是非常不可接受的，但是已经有非常多的部门依赖不可能改的，此时也只能默默接受。对于这些变态的需求或者不可理解的需求写注释吧。

代码逻辑抽象
抽象是非常重要的一个过程，把项目中一些共性、经常用到的功能做抽象，抽象成公共代码或基础组件，这样对于这些功能就可以反复使用，这个过程是持续的，发现到共性就考虑重构抽象。这种方式可以提升我们的开发效率，简化业务逻辑实现。比如我们做的消息处理系统，只需要简单配置下就可以工作了。

工具类
在项目开发过程中，要带领团队成员使用常见的工具类，如apache commons、google guava等。使用这些工具类可以使得代码bug更少（最常见的如空指针异常）、代码更短、更易懂。

项目闭环
我们在做项目时发现有人把一个大项目分拆为多个子系统，然后这些子系统作为独立项目，然后当新人来的时候总摸不着头脑。因此我的做法是使用如Maven构建一个大项目，然后拆成各种子模块，整个项目都在一起的。

持续改进
技术每天都在发生变化，因此我们要持续学习，了解目前对于项目来说最优的解决方案，然后适当的应用到项目中，进行项目的持续改进，有时候就是需要革自己命，持续发展；但是一定要有好的回滚策略，任何改进不能牺牲稳定性或增加事故率为前提，这个风险要有很好的把控。

自动化
对于一些运维或者业务相关的功能我们需要自动化完成；如果我们经常处理一些问题，那么可以考虑为这些问题构建一个自动化工具，减少我们的重复劳动。


我个人认为要搭建一个好的项目，就是要有好的价值观，不打破自己设立的原则，自觉自律朝着好的方向发展，不偷懒；任何人破坏我的代码我都要想办法纠正过来。




宝贝 任何的代码都是建立在对业务的了解上 以前读别人代码的时候也骂过 后来了解业务以后 才发现自己才是弱爆了 相信你的团队 相信同事 他们不是SB


养成良好的代码编写习惯是很重要的，业务越复杂越不能写在一个方法里，应该提炼出若干个小方法。
31 楼 天亮了说晚安 2016-07-22
windlike 写道
zhuaiqilove11 写道
没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类，因为我项目90%以上情况不需要接口这个东西，为了接口而接口只能使类的数量暴增；
虽然我觉得这样很省事 有时候很乐意这样，但抽象接口很有必要啊。实现类里代码量大，很多私有方法，而接口里就很清晰明了，利于别人阅读，还有抽象出接口方便mock测试。
开涛 哥 我也是京东的 正在努力的跟着你学习。

有些人真的以为有了接口才算得上高大上，为了接口而接口，无语。


确实是，没有必要为了接口而接口，以前还跟同事激烈的讨论过哈。
30 楼 haozaige11213 2016-03-16
的确为了接口而创建接口真是扯淡 ， 我们项目一个DAO接口  实现类  一个service接口  实现类 ，我擦， 到最后成品发布 这接口也没体现任何价值 。 还有人在action  web直接操作上数据库，我就一个小小程序员 ，我说不了他 ，我只想说恶心
29 楼 xiaoliuf4565 2016-01-15
这些原则其实每个teamleader都清楚明白，可当需求变化太快，赶工期的时候，就顾不上这些原则了，为了尽快交付，偷工减料，最后整个项目百病缠身，无药可医，平时养成良好的开发规范真的太重要了，其次，单元测试真的不能少，少了要人命
28 楼 tracyking1986 2015-10-11
JDK7运行不起来，也不报错，请问怎么解决呢
27 楼 jinnianshilongnian 2015-09-14
fuhuijun 写道
代码重构 很是让人头痛，手下的人非常抵触，他们觉得相当于重新把功能做一遍，既然现在能稳定运行，为何要重构。。。
涛ge有没有遇到这种情况？

哈哈，这个还真的看团队文化。
26 楼 开奔驰遛宝马 2015-09-02
dongjianglake 写道
Plugin execution not covered by lifecycle configuration: org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1:native2ascii (execution: default, phase: generate-resources)

ES用Maven3导入有这个错误，有解决办法吗？

同问 删了不知道影不影响 请问你运行起来了吗？
25 楼 fuhuijun 2015-09-02
代码重构 很是让人头痛，手下的人非常抵触，他们觉得相当于重新把功能做一遍，既然现在能稳定运行，为何要重构。。。
涛ge有没有遇到这种情况？
24 楼 开奔驰遛宝马 2015-08-28







 还是不能运行啊这个es脚手架，既然分享了，就不能教教如何用吗？
23 楼 shenjianhua1984 2015-08-27
开奔驰遛宝马 写道
涛ge，能配个详细点的安装图文说明吗？弄到半路就不动了


碰到相同的情况，不知道怎么解决
22 楼 开奔驰遛宝马 2015-08-11
涛ge，能配个详细点的安装图文说明吗？弄到半路就不动了
21 楼 dongjianglake 2015-08-07
Plugin execution not covered by lifecycle configuration: org.codehaus.mojo:native2ascii-maven-plugin:1.0-alpha-1:native2ascii (execution: default, phase: generate-resources)

ES用Maven3导入有这个错误，有解决办法吗？
20 楼 dongjianglake 2015-08-07



19 楼 jinnianshilongnian 2015-08-06
michaelyang 写道
1、没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类
关于这点 我不太认可，必要的层次接口或抽象类 我个人觉得还是需要，尤其是当团队开发时，必要的接口和抽象类、能减少层次之间的耦合度.也利于后期的迭代开发

不能一棒子打死，还是看实际场景。 我就是不爽那种上来就抽象的实现。 对外暴露的服务也是走抽象，而不是具体；而内部自己用的有时候何必呢。
18 楼 ymm8505 2015-08-06
即将成为京东人

   多向tao哥学习
17 楼 michaelyang 2015-08-06
1、没必要一上来就抽象什么DAO、Service的接口，我的原则就是就一个实现类
关于这点 我不太认可，必要的层次接口或抽象类 我个人觉得还是需要，尤其是当团队开发时，必要的接口和抽象类、能减少层次之间的耦合度.也利于后期的迭代开发
16 楼 ldw1228 2015-08-06
好好体会，持续改进
15 楼 longying2008 2015-08-06
关注涛&哥！！！
14 楼 47848484 2015-08-06
尔今尔后 写道
每次看到程序有大于10行以上的代码或者一个方法中有几十行,几百行的代码.我就想问写代码的人,你是在用心写代码吗?


宝贝 任何的代码都是建立在对业务的了解上 以前读别人代码的时候也骂过 后来了解业务以后 才发现自己才是弱爆了 相信你的团队 相信同事 他们不是SB

-----------------




1、信度与效度思维

这部分也许是全文最难理解的部分，但我觉得也最为重要。没有这个思维，决策者很有可能在数据中迷失。


信度与效度的概念最早来源于调查分析，但现在我觉得可以引申到数据分析工作的各方面。

所谓信度，是指一个数据或指标自身的可靠程度，包括准确性和稳定性，取数逻辑是否正确？有没有计算错误？这属于准确性；每次计算的算法是否稳定？口径是否一致？以相同的方法计算不同的对象时，准确性是否有波动？这是稳定性。做到了以上两个方面，就是一个好的数据或指标了？其实还不够，还有一个更重要的因素，就是效度！

所谓效度，是指一个数据或指标的生成，需贴合它所要衡量的事物，即指标的变化能够代表该事物的变化。

只有在信度和效度上都达标，才是一个有价值的数据指标。举个例子：要衡量我身体的肥胖情况，我选择了穿衣的号码作为指标，一方面，相同的衣服尺码对应的实际衣服大小是不同的，会有美版韩版等因素，使得准确性很差；同时，一会儿穿这个牌子的衣服，一会儿穿那个牌子的衣服，使得该衡量方式形成的结果很不稳定；所以，衣服尺码这个指标的信度不够。另一方面，衡量身体肥胖情况用衣服的尺码大小？你一定觉得荒唐，尺码大小并不能反映肥胖情况，是吧？因此效度也不足。体脂率，才是信度和效度都比较达标的肥胖衡量指标。

在我们的现实工作中，许多人会想当然地拿了指标就用，这是非常值得警惕的。你要切骨头却拿了把手术刀，是不是很可悲？信度和效度的本质，其实就是数据质量的问题，这是一切分析的基石，再怎么重视都不过分！

2、平衡思维


说到天平大家都不陌生，平衡的思维相信各位也都能很快理解。简单来说，在数据分析的过程中，我们需要经常去寻找事情间的平衡关系，且平衡关系往往是关乎企业运转的大问题，如市场的供需关系，薪资与效率关系，工作时长与错误率的关系等等。

平衡思维的关键点，在于寻找能展示出平衡状态的指标！也就是如图中红框，我们要去寻找这个准确的量化指标，来观察天平的倾斜程度。怎么找这个指标呢？以我的经验，一般先找双向型的问题，即高也不是低也不是的问题，然后量化为指标，最后计算成某个比率，长期跟踪后，观察它的信度和效度。

3、分类思维


客户分群、产品归类、市场分级、绩效评价...许多事情都需要有分类的思维。主管拍脑袋也可以分类，通过机器学习算法也可以分类，那么许多人就模糊了，到底分类思维怎么应用呢？

关键点在于，分类后的事物，需要在核心指标上能拉开距离！也就是说分类后的结果，必须是显著的。如图，横轴和纵轴往往是你运营当中关注的核心指标（当然不限于二维），而分类后的对象，你能看到他们的分布不是随机的，而是有显著的集群的倾向。

举个例子：假设该图反映了某个消费者分群的结果，横轴代表购买频率，纵轴代表客单价，那么绿色的这群人，就是明显的“人傻钱多”的“剁手金牌客户”。

4、矩阵化思维


矩阵思维是分类思维的发展，它不再局限于用量化指标来进行分类。许多时候，我们没有数据做为支持，只能通过经验做主管的推断时，是可以把某些重要因素组合成矩阵，大致定义出好坏的方向，然后进行分析。大家可以百度经典的管理分析方法“波士顿矩阵”模型。

5、漏斗思维


这种思维方式已经普及：注册转化、购买流程、销售管道、浏览路径等，太多的分析场景中，能找到这种思维的影子。

但我要说，看上去越是普世越是容易理解的模型，它的应用越得谨慎和小心。在漏斗思维当中，我们尤其要注意漏斗的长度。

漏斗从哪里开始到哪里结束？以我的经验，漏斗的环节不该超过5个，且漏斗中各环节的百分比数值，量级不要超过100倍（漏斗第一环节100%开始，到最后一个环节的转化率数值不要低于1%）。若超过了我说的这两个数值标准，建议分为多个漏斗进行观察。当然，这两个是经验数值，仅仅给各位做个参考～

理由是什么呢？超过5个环节，往往会出现多个重点环节，那么在一个漏斗模型中分析多个重要问题容易产生混乱。数值量级差距过大，数值间波动相互关系很难被察觉，容易遗漏信息。比如，漏斗前面环节从60%变到50%，让你感觉是天大的事情，而漏斗最后环节0.1%的变动不能引起你的注意，可往往是漏斗最后这0.1％的变动非常致命。

6、相关思维


我们观察指标，不仅要看单个指标的变化，还需要观察指标间的相互关系！有正相关关系（图中红色实线）和负相关关系（蓝色虚线）。最好能时常计算指标间的相关系数，定期观察变化。

相关思维的应用太广了，我提往往是被大家忽略的一点。现在的很多企业管理层，面对的问题并不是没有数据，而是数据太多，却不知道怎么用。相关思维的其中一个应用，就是能够帮助我们找到最重要的数据，排除掉过多杂乱数据的干扰！

如何执行呢？你可以计算能收集到的多个指标间的相互关系，挑出与其他指标相关系数都相对较高的数据指标，分析它的产生逻辑，对应的问题，并评估信度和效度，若都满足标准，这个指标就能定位为核心指标！

建议大家养成一个习惯，经常计算指标间的相关系数，仔细思考相关系数背后的逻辑，有的是显而易见的常识，比如订单数和购买人数，有的或许就能给你带来惊喜！另外，“没有相关关系”，这往往也会成为惊喜的来源哦。

7、远近度思维


现在与许多处在管理层的朋友交流后，发现他们往往手握众多数据和报表，注意力却是非常的跳跃和分散。如何避免呢？一是上文说的通过相关思维，找到最核心的问题和指标；二就是这部分要说的，建立远进度的思维方式。

确定好核心问题后，分析其他业务问题与该核心问题的远近程度，由近及远，把自己的精力有计划地分配上去。比如：近期你地核心任务就是提高客服人员的服务质量，那么客服人员的话术、客户评价通道、客服系统的相应速度等就是靠的最近的子问题，需要重点关注，而客户的问询习惯、客户的购买周期等就是相对远的问题，暂时先放一放。当然，本人经历有限，例子举得不恰当的地方还望读者们海涵。

8、逻辑树思维

如图的树状逻辑相信大家已经见过许多回了。一般说明逻辑树的分叉时，都会提到“分解”和“汇总”的概念。这里把它变一变，使其更贴近数据分析，称为“下钻”和“上卷”。

所谓下钻，就是在分析指标的变化时，按一定的维度不断的分解。比如，按地区维度，从大区到省份，从省份到城市，从省市到区。所谓上卷就是反过来。随着维度的下钻和上卷，数据会不断细分和汇总，在这个过程中，我们往往能找到问题的根源。

下钻和上卷并不是局限于一个维度的，往往是多维组合的节点，进行分叉。逻辑树引申到算法领域就是决策树。有个关键便是何时做出决策（判断）。当进行分叉时，我们往往会选择差别最大的一个维度进行拆分，若差别不够大，则这个枝桠就不在细分。能够产生显著差别的节点会被保留，并继续细分，直到分不出差别为止。经过这个过程，我们就能找出影响指标变化的因素。

举个简单的例子：我们发现全国客户数量下降了，我们从地区和客户年龄层级两个维度先进行观察，发现各个年龄段的客户都下降，而地区间有的下降有的升高，那我们就按地区来拆分第一个逻辑树节点，拆分到大区后，发现各省间的差别是显著的，那就继续拆分到城市，最终发现是浙江省杭州市大量客户且涵盖各个年龄段，被竞争对手的一波推广活动转化走了。就此通过三个层级的逻辑树找到了原因。

9、时间序列思维

很多问题，我们找不到横向对比的方法和对象，那么，和历史上的状况比，就将变得非常重要。其实很多时候，我更愿意用时间维度的对比来分析问题，毕竟发展地看问题，也是“红色方法论”中的重要一环。这种方式容易排除掉一些外在的干扰，尤其适合创新型的分析对象，比如一个新行业的公司，或者一款全新的产品。

时间序列的思维有三个关键点：一是距今越近的时间点，越要重视（图中的深浅度，越近期发生的事，越有可能再次发生）；二是要做同比（图中的尖头指示，指标往往存在某些周期性，需要在周期中的同一阶段进行对比，才有意义）；三是异常值出现时，需要重视（比如出现了历史最低值或历史最高值，建议在时间序列作图时，添加平均值线和平均值加减一倍或两倍标准差线，便于观察异常值）。

时间序列思维有一个子概念不得不提一下，就是“生命周期”的概念。用户、产品、人事等无不有生命周期存在。本人最近也正在将关注的重心移向这块，直觉上，生命周期衡量清楚，就能很方便地确定一些“阀值”问题，使产品和运营的节奏更明确。

10、队列分析思维

随着数据运算能力的提高，队列分析的方式逐渐展露头脚。英文名称为cohort analysis，说实话我不知道怎么表述这个概念，我的理解就是**按一定的规则，在时间颗粒度上将观察对象切片，组成一个观察样本，然后观察这个样本的某些指标随着时间的演进而产生的变化**。目前使用得最多的场景就是留存分析。

举个经常用的例子：假设5.17我们举办了一次促销活动，那么将这一天来的新用户作为一个观察样本，观察他们在5.18、5.19...之后每天的活跃情况。

队列分析中，指标其实就是时间序列，不同的是衡量样本。队列分析中的衡量样本是在时间颗粒上变化的，而时间序列的样本则相对固定。

11、循环／闭环思维


循环／闭环的概念可以引申到很多场景中，比如业务流程的闭环、用户生命周期闭环、产品功能使用闭环、市场推广策略闭环等等。许多时候你会觉得这是一个不落地的概念，因为提的人很多，干出事情来的例子很少。

但我觉得这种思考方式是非常必要的。业务流程的闭环是管理者比较容易定义出来的，列出公司所有业务环节，梳理出业务流程，然后定义各个环节之间相互影响的指标，跟踪这些指标的变化，能从全局上把握公司的运行状况。

比如，一家软件公司的典型业务流：推广行为（市场部）➡流量进入主站（市场＋产研）➡注册流程（产研）➡试用体验（产研＋销售）➡进入采购流程（销售部）➡交易并部署（售后＋产研）➡使用、续约、推荐（售后＋市场）➡推广行为，一个闭环下来，各个衔接环节的指标，就值得关注了：广告点击率➡注册流程进入率➡注册转化率➡试用率➡销售管道各环节转化率➡付款率➡推荐率／续约率...这里会涉及漏斗思维，如前文所述，千万不要用一个漏斗来衡量一个循环。

有了循环思维，你能比较快的建立有逻辑关系的指标体系。

12、测试／对比思维


AB test,大家肯定不陌生了。那么怎么细化一下这个概念？一是在条件允许的情况下，决策前尽量做对比测试；二是测试时，一定要注意参照组的选择，建议任何实验中，都要留有不进行任何变化的一组样本，作为最基本的参照。

现在数据获取越来越方便，在保证数据质量的前提下，希望大家多做实验，多去发现规律。

13、指数化思维


指数化思维，是指将衡量一个问题的多个因素分别量化后，组合成一个综合指数（降维），来持续追踪的方式。把这个放在最后讨论，目的就是强调它的重要性。前文已经说过，许多管理者面临的问题是“数据太多，可用的太少”，这就需要“降维”了，即要把多个指标压缩为单个指标。

指数化的好处非常明显，一是减少了指标，使得管理者精力更为集中；二是指数化的指标往往都提高了数据的信度和效度；三是指数能长期使用且便于理解。

指数的设计是门大学问，这里简单提三个关键点：一是要遵循独立和穷尽的原则；二是要注意各指标的单位，尽量用标准化来消除单位的影响；三是权重和需要等于1。

独立穷尽原则，即你所定位的问题，在搜集衡量该问题的多个指标时，各个指标间尽量相互独立，同时能衡量该问题的指标尽量穷尽（收集全）。举个例子：当初设计某公司销售部门的指标体系时，目的是衡量销售部的绩效，确定了核心指标是销售额后，我们将绩效拆分为订单数、客单价、线索转化率、成单周期、续约率5个相互独立的指标，且这5个指标涵盖了销售绩效的各个方面（穷尽）。我们设计的销售绩效综合指数＝0.4＊订单数＋0.2＊客单价＋0.2＊线索转化率＋0.1＊成单周期＋0.1＊续约率，各指标都采用max-min方法进行标准化。

通过这个例子，相信大家应该就能理解指数化思维了。

拿什么拯救你我的航班？
今天早上，相信大部分人都注意到了一起UA强迫乘客下机的事件，知乎上已经有很多用户发表了看法 → 如何评价美联航（United Airline）强迫亚裔乘客下…查看全文
穷游锦囊9 天前编辑精选
发表于 对世界上瘾
题图
靠谱配方丨超仙超美的樱花果冻
这个是某天晚上冒出来的脑洞，当时正在跟同事讨论最近要上什么果冻布丁类的方子，然后我们突然想到：既然有樱花果冻（水信玄饼）、有气球布丁，那为…查看全文
熊吃蛋糕吗2 天前编辑精选
发表于 烘焙是生活的一道光
题图
押井守在《辐射4》里玩了数百个小时，他认为电影已经远远落后于游戏
“这是一个只有弱鸡村民和坏得不得了的恶徒and伪善者的美好世界。我不接任务也尽量不做新武器，这样就很好。”编辑丨或闪（知乎 ID@孔闪）押井守最…查看全文
触乐1 天前编辑精选
发表于 触乐

选择语言

操作系统.doc
想象程序是一个人 用心去和程序沟通
用音乐集中精神
分解每一步
知识太多 有的一句话概括就行了
总结 简洁  高效
抛出杂念 多写项目 多研究 底层 新的东西
有使命感 想想计算机界的前辈
用自然语言描述出来 理解后变成自己的语言
与程序沟通 编程是一场竞赛 破釜沉舟
做属于自己aiso公司的项目
学习方法
	听小说+抄写
官网+脚本/代码
所有的可能
画画的内功
文件结构
思路流程
编程是一个循序渐进的过程
边写边测试
从设计者的角度
官网 源码 案例 视频  百度
与现实工程对比
把握数据的流向与结构
信念 想象  梦 音乐辅助
节奏 流水
模版-循环改进
官网-百度的学习模式
尽量模拟企业开发环境
代码 脚本化
专注  忘我
格式规范 可替换
所有可能
变化
看官方源码 示例学习
专注于一个目标
程序 你只要了解它  是有生命的   用心 真诚跟它沟通
编程是快乐的
不断地做项目 更新简历 提升自己的核心竞争力
找到乐趣 兴奋点
制作模版
从简单到复杂
尽量考虑周全 在跑
画图

学习一门技术 关键要掌握它的
本质和作用
架构
开发流程
应用场景


站在程序的设计者角度 为什么这么设计

框架的二次开发 最能锻炼技术
就当自己是框架的设计者
一般的开源框架 并不能满足我们的需求
需要在其基础上 进行二次开发



编程的三大难点：
1、程序设计
2、综合
3、排错




程序思维

面向过程

基于对象

面向对象

面向切面

面向服务

面向接口

编程思想= 数据结构+算法

面向用例
面向操作
shell
cash


学框架
从目录结构
和架构图开始学习


把能做的先做了

讲故事

生活模拟

人与人沟通


产品经理
协调技术与市场

协调产品设计

互联网产品经理\

程序思维
以实际看得见的文件作为思维的依据
写程序一定要有自信






抱着玩的心态
讲故事
写程序靠的是想象力
搞技术 最怕半吊子
我没必要存在下去

离职原因：
在这儿可能我永远就只能拿1W
但是在外面不一定 可能拿到很多 2W 3W 4W

自我评价：
缺点：
懦弱 胆小
优柔寡断
爱面子 撒谎
太在意别人的看法
活得很累
开心一点 自由一点


写代码 就像开宇宙飞船一样 一切尽在控制当中

变与不变
分解
形象思维 设计

学程序的乐趣在于 将现实中的事儿 用程序帮你解决
程序是有生命的，有自己的逻辑 有自己的结构 有自己的判断；
//如同音乐的旋律一样

在程序退出时删除
//


编程 想象力



步骤：
需求 UML 原型设计 html js 界面 Action Manager Dao 数据库
先做后台代码 最后做前台页面输入验证
不要轻易修改之前的代码

断点 debug  控制台  数据库
程序是有顺序的

调试：
权限 debug 输出 控制台 源码

图 代码 项目

编程思想
	累加
		原理
	流程
	各种可能性
	一步一步来
	挑bug 极限法
	用图像来思考
	动作分析
	抽象
	大局与细节
	保持想象力
方法论
	分清变和不变
	先脉络后细节
	和现实世界联系起来
	万物皆对象
要善于适应需求的变化 良好的可扩展性 可维护性
模拟人与人之间的关系
简单
知道你在哪儿 将要去哪里 目标在哪里
条理 逻辑清晰
思考
前端 示例-排除法
容器
一切都是对象 都是代码
模型
目标
项目
简单 有效 直接是最好的方法
技术问题 逻辑（方法论）+哲学
数据结构是框架,算法是思想,程序是产品.
先找试验点 而后进行推广

一定要明确自己的思路以及可能造成的后果 一点都不能含糊
程序调试 自己造数据 别用别人的
每一步都要谨慎 放松 有逻辑性
未雨绸缪 胜过 发错找错
写程序就像自己造了一台机器人 觉得可以做任何事情


写程序 要保持轻松的心情 那么紧张 干甚？

你不是在写程序 而是和一个精灵在交流
和自己的想象力交流

拟物化解读

一步一步测试！！！！！！！！！！！！！！！！！！
修改前 记得备份！！！！！！！！！！！！！！！！！！！

绘画
记忆  用故事串联

收藏代码


2015-12-04

计算机的程序是由一系列的机器指令组成的，而指令就是要计算机执行某种操作的命令。
　　程序=算法+数据结构+程序设计方法+语言工具和环境
　　从计算机组成的层次结构来说，计算机的指令分：
　　微指令：是微程序级的命令，它属于硬件。
　　宏指令：是由若干条机器指令组成的软件指令，它属于软件。
　　机器指令：介于微指令和宏指令之间，通常简称为指令，每一条指令可以完成一个独立的算术运算或逻辑运算操作。

　　计算机程序就是指 电脑可以识别运行的指令集合。
计算机程序其实是一种代码而已！这种代码只不过是命名为一种语言（计算机语言），C语言是计算机语言的一种。学编程说白了就是跟学习英语的性质一样！首先你必须理解每个函数的意义。然后才可能熟练的运用........

获取输入，产生输出。




本质：转化为机器语言就是0跟1
如何运行：就是CPU读这些0跟1，处理，然后输出0跟1
联系：硬件是载体，程序是主体，你可以这么理解，硬件是为了实现程序而存在的，两个是相互依存的关系，缺一不可。打个比方，你现在要出门，硬件是衣服，程序是你这个人（光着身体的），衣服是为人而设计的，你想要出去，单有衣服不行，或者你光着出去也不行，穿着衣服出去才是最得当的。当然也有不同的程序共用同一个硬件，去实现不同的功能，就好比一件衣服穿在不同人身上，效果也就不同，一个道理！


电脑的本质是是数字运算，最基本的构成就是高电平和低电平，即1和0。不同的组合有不同的含义，不要想得太复杂，你可以把电脑想像成一个人，而各种1和0的组合则想像成走路、吃饭、睡觉、转弯等各种动作。而程序的本质就是预设好的各种1和0的组合，让硬件按程序工作。程序就是计算机系统的灵魂，而且必须依附在硬件上才能存在。






















------------------------------------------------
逻辑思维：

第一：常规思维VS逆向思维



 逆向思维的方式，将该数据代入DB进行验证是否存在，根据返回结果count>0与否进行判断。

第二：关于排序的问题

  排序字段的+-1，然后各自更新Update()，再重新做查询，即：重载页面。

第三:分配权限

 根据权限字段，将原有权限清空，再将所选择的新权限update()。
  一般选择权限使用checkbox选中。

第四：先删除后新增的思想

对已有值的字段通常我们采用update()来实现更新，
但有时，所需字段为空，所有选择insert（），
综合这两种情况，无论有无值，先执行删除，在新增。


  假设法	　　假设法就是对于给定的问题，先做一个或多个假设，然后根据已知条件来分析，如果与题目所给的条件矛盾，就说明假设错误，然后再用其它的假设。

排除法

	　　排除法：已知在有限个答案中，只有一个是正确的，对于一个答案，不知道它是否正确，但是知道这个答案之外的其它答案都是错误的，所以推断这个答案是正确的。

	　　著名侦探福尔摩斯说过：当排除了所有其它的可能性，还剩一个时，不管有多么的不可能，那都是真相。

反证法

	　　反证法是间接证明法一类，是从反面的角度的证明方法，即：肯定题设而否定结论，从而得出矛盾。具体地讲，反证法就是从反论题入手，把命题结论的否定当作条件，使之得到与条件相矛盾，肯定了命题的结论，从而使命题获得了证明。

	　　常见步骤：

	　　第一步：假设命题结论不成立，即假设结论的反面成立。

	　　第二步：从这个命题出发，经过推理证明得出矛盾。

	　　第三步：由矛盾判断假设不成立，从而肯定命题的结论正确。

等级和阶段

	　　等级：事物的发展过程分为多个等级，具备一定的条件，才能进入相应的等级。

	　　阶段：事物的发展过程分为多个阶段，具备一定的条件，才能进入相应的阶段。

	　　等级和阶段的作用：

	　　(1)区分作用。一些事物可以按照所处的等级或阶段来进行区分。

	　　(2)描述事物变化、发展的过程。例如：我们常说一个事物发展到什么阶段了，或者一个事物发展到什么等级了。

筛选思维

	　　筛选：通过淘汰的方式对事物进行的挑选。

	　　对于多层筛选，需要为每层都设置通过的条件，符合条件的事物可以通过，不符合条件的事物被淘汰掉，那些符合条件的事物再进入到下一级别筛选，从而实现一层一层的筛选。
#FormatImgID_0#

限定思维

	　　限定是为了缩小范围。语言中的定语就是为了限定主语和宾语，从而缩小主语和宾语的范围。

	　　(1)用形容词限定主语：

	　　例如：猫&rarr; 黑色的猫。黑色的这样的限定，就缩小了指定的猫的范围。

	　　(2)用名词所有格限定主语：

	　　例如：猫&rarr; 小明的猫。小明的这样的限定，就缩小了指定的猫的范围。

	　　(3)用数词限定主语：

	　　例如：两只猫。两只是数量上的限定。

计算法

	　　定性决定事物的性质，而定量是决定事物的数量，很多时候要用计算法来解决事物的定性和定量问题。

	　　(1)计算法解决关于定性的问题：

	　　例如：计算质子数来决定化学元素。

	　　例如：计算分数判断考试及格还是不及格。

	　　(2)计算法解决关于定量的问题：

	　　例如：在商店买了几件商品，一共花了多少钱。

	　　表格法

	　　表格上的一个值，是由某一个行值和某一个列值所确定的一个值。

	　　计算机的SQL数据库的数据就是以表格的形式展现的，随着计算机的发展，很多信息以表格的形式来组织。

	　　时间与空间

	　　时间和空间是物质运动的存在形式，空间是物质运动的广延性、伸张性，时间是物质运动的持续性、顺序性。

	　　点线面体

	　　点组成线，线组成面，面组成体。

	　　数学上，一条直线是由无数个点组成的。

	　　一根直线是一维的，一根曲线则是二维的。

	　　一个平面是二维的，一个曲面则是三维的。

	　　体是三维的。

	　　作图法

	　　作图法可以描述有些时空关系的问题。

	　　例如：基于一维坐标轴的绘图、基于二维坐标轴的绘图、基于三维坐标轴的绘图、基于极坐标的绘图、矩阵绘图、流程图绘图等。

	　　集合

	　　子集：对于两个非空集合A与B，如果集合A的任何一个元素都是集合B的元素，称集合A是集合B的子集。

	　　交集：一般地，给了两个集合A和B，由既属于集合A又属于集合B的所有元素组成的集合，叫做A与B的交集。

	　　并集：一般地，对于两个给定的集合A和B，把所有属于集合A或属于集合B的元素所组成的集合叫做A与B的并集。

	　　补集：一般地,设S是一个集合,A是S的一个子集,由S中所有不属于A的元素组成的集合,叫做子集A在S中的补集。

	　　建模

	　　对事物建立模型，就是按照需要，留下重要部分，去掉次要部分，从而简化事物、突出重点。

	　　聚集形式

	　　第一种：按功能聚集。功能相同或相似的事物聚集在一起，或者功能互补的事物聚集在一起。

	　　第二种：按性质聚集。性质相同或相似的事物聚集在一起(例如：在水中，很多疏水的物质趋于聚集)，或者性质相反的事物聚集在一起(例如：一个磁铁的南极和另一个磁铁的北极，相互吸引。)

	　　第三种：按传输关系聚集。前一个事物的输出是后一个事物的输入，为了方便传输而聚集。

	　　第四种：按照时间关系而聚集。

	　　第五种：随机聚集。

	　上位效应

	　　一个事物的选择受上一个事物的控制，既以上一个事物的选择为前提。
#FormatImgID_1#

	　　(1)肯定上位：上一个事物选择否定，才轮到下一个事物选择肯定或否定，如果上一个事物选择肯定，下一个事物就没有决定的机会。

	　　(2)否定上位：上一个事物选择肯定，才轮到下一个事物选择肯定或否定，如果上一个事物选择否定，下一个事物就没有决定的机会。

	　　例如：遗传学中的显性上位和隐性上位就是这个原理。

	　　定性与定量

	　　定性决定事物的性质，定量决定事物的数量、程度。

	　　例如：植物开红花或白花是定性，植物的高低则是定量。

	　　例如：黑鼠和白鼠的皮毛颜色是定性，而鼠的体重是定量。

	　　增、减、换

	　　(1)增是事物的增加，分为重复增加和不重复增加。

	　　例如：有的DNA插入了重复的序列，形成了重复的DNA片段。有的DNA受到异位DNA的插入，形成了增加但不重复的DNA。

	　　(2)减是事物的减少。

	　　例如：有的DNA片段缺失了。

	　　(3)换：就是替换，就是没有增加，也没有减少。

	　　例如：基因的点突变，就是碱基发生了变化。

	　　与增、减、换相对应的是增、删、改。增、减、换可以是自然发生的，也可以是人为发生的，而增、删、改通常是人为发生的。

	　转化与代换

	　　(1)转化：

	　　事物的转化，按照性质，分为两种情况：

	　　第一种：事物由一个状态转化为另一个状态。

	　　第二种：一个事物转化为另一个事物。

	　　事物的转化，按照方向，分为两种情况：

	　　第一种：单向转化。例如：纸在燃烧时，转化为灰，但是灰不能转化成纸。

	　　第二种：双向转化。例如：很多化学反应是可逆的。

	　　(2)代换

	　　代换和转化不同，代换是用另一个事物替换原来的事物。最常见的代换是等价代换。

	　　继承与补充

	　　(1)继承：

	　　继承分为两种：

	　　第一种：扬弃继承：新事物继承旧事物中好的方面，抛弃旧事物中不好的方面。

	　　第二种：权限继承：新事物只继承旧事物中新事物有权继承的方面。

	　　(2)补充：

	　　继承后，有两种情况：

	　　第一种：新事物对旧事物补充新的内容。

	　　第二种：新事物不补充新的内容，就是只保持继承下来的内容。

	　　补充分为两种：

	　　第一种：补充好的方面，从而继续发展事物。例如：在前人创造的成果的基础上，继续创新、发展、完善。

	　　第二种：补充坏的方面，从而阻碍事物的后续发展。例如：三国时期，蜀国的刘禅继承刘备的大业，却补充了坏的方面，以至于蜀国最终灭亡。

　    短板原理

	　　短板原理又叫木桶原理，就是一个木桶的盛水量取决于围成水桶的最短的那个木板，从而用来说明：对于有些事物，短处起到决定性作用，而长处却不起决定性作用。

	　　语言逻辑

	　　第一，句子(事件)关系：

	　　1.因果关系。

	　　意义：原因产生结果。

	　　关键词：因为、所以、因此。

	　　2.前提条件关系。

	　　意义：实现事件所需要具备的条件。

	　　关键词：只要、就可以、才能。

	　　3.目的关系。

	　　意义：做事都有目的。

	　　关键词：为了、使。

	　　4.顺序关系(承接关系)。

	　　意义：事件发生有先后的顺序。

	　　关键词：然后、之后。

	　　5.并列关系。

	　　意义：几个事件可以同时发生。

	　　关键词：同时。

	　　6.选择关系。

	　　意义：按照目的进行选择。

	　　关键词：还是、不是...就是、宁可...也不。

	　　7.递进关系。

	　　意义：一步步的加强或增加性质。

	　　关键词：不仅...而且、不但...还。

	　　8.转折关系。

	　　意义：先肯定，然后部分否定。

	　　关键词：但是、可是、却、然而、虽然...但是。

	　　9.假设关系。

	　　意义：假想的事件。

	　　关键词：如果、假如、要是、如果...那么。

	　　第二，充分条件、必要条件、充要条件和逻辑与、逻辑或、逻辑非

	　　充分条件：A可以推导出B，A就是B的充分条件。

	　　例如：因为A，所以B。

	　　例如：A，才能B。

	　　必要条件：B可以推导出A，但是A不能推导出B，A就是B的必要条件。

	　　例如：因为B，所以A。

	　　例如：B，必然A。

	　　充要条件：A可以推导出B，B也可以推导出A，A就是B的充要条件。

	　　例如：因为A，所以B，并且因为B所以A。

	　　例如：A才能B，并且B，必然A。

	　　逻辑与：多个条件都必须具备才行。

	　　逻辑或：多个条件只要具备其中任何一个就行。

	　　逻辑非：任何一个条件都不具备就行。

	　　1.A是B的充要条件，B多个充要条件之间是逻辑与的关系，都必须满足。

	　　逆推：事件B发生了，意味着事件B的所有充要条件都发生了。

	　　例如：

	　　充要条件：有钱才能旅游，旅游必须有钱。

	　　充要条件：不下雨才能旅游，旅游必须不下雨。

	　　如果旅游，必然有钱并且不下雨。(注意：是逻辑与的关系)

	　　2.A是B的充分条件，而不是必要条件和充要条件，那么B的多个充分条件之间是逻辑或的关系。

	　　例如：

	　　充分条件：周末才能旅游，但是旅游不一定是周末，也可以是放假的节日。

	　　周末或者放假的节日才能旅游。(注意：是逻辑或的关系)
思维方式有很多,在这浅谈一二：
发散思维法——它是根据已有的某一点信息,然后运用已知的知识、经验,通过推测、想象,沿着不同的方向去思考,重组记忆中的信息和眼前的信息,产生新的信息.它可分流畅性、变通性、独创性三个层次.
聚合思维法——又称求同思维.是指从不同来源、不同材料、不同方向探求一个正确答案的思维过程和方法.
目标思维法——确立目标后,一步一步去实现其目标的思维方法.其思维过程具有指向性、层次性.
逆向思维法——它是目标思维的对应面,从目标点反推出条件、原因的思维方法.它也是一种有效的创新方法.

移植思维法——是指把某一领域的科学技术成果运用到其他领域的一种创造性思维方法,仿生学是典型的事例.
联想思维法——相似联想、接近联想、对比联想、因果联想.

形象思维法——通过形象来进行思维的方法.它具有的形象性、感情性,是区别于抽象思维的重要标志.
演绎思维法——它是从普遍到特殊的思维方法,具体形式有三段论、联言推理、假言推理、选言推理等.
归纳思维法——它是根据一般寓于特殊之中的原理而进行推理的一种思维形式.


人的思维模式有两种，一种是资源导向式，另外一种是目标导向式。
资源导向式思维模式从自己手头现有的资源出发，按照自己能力和资源的规定，正向推进，稳打稳扎，步步为营。眼睛只盯住自己的篮子，篮子里面的才是菜，篮子外面的都是别人的，君子爱财，取之有道。
目标导向式思维，做任何事情都从目标出发，根据目标的要求，规划实现目标的路径，明了实现目标的条件，并在实际工作中努力去发现，借助和创造实现目标的条件，按照路径一步步推进最终实现目标。这是一种反向思维方式，是一种倒退法，倒推资源配置，倒推时间分配，链接战略战术，链接方法手段。天下的菜，只要能够为我所用，就都是菜，何必拘泥于是篮子里的还是篮子外面的。
依思维的属性，可分为抽象思维、形象思维、直觉思维等


大道至简，关于思维的方法与技能，古今中外的智者多有阐述，而我自己实践中最收益的几种也不过是老生常谈。不过考虑到这个问题特别重要，我还是简单重申一下。

首先我会区分三大类思维场景，然后在每一类下做出阐述。

1. 现象观察：最关键的是抽象思维的训练，即寻找事物背后的深层结构。

大多数面向消费者的产品，都至少有骨、肉、皮三层，但一般只以皮来魅惑受众，而我对骨更感兴趣。抽象也有不同层次，而我尽量寻求最深层也对各种案例解释性最强的结构，如幂函数、分形、抛物线即是，当然到不了这个层面也不会强求，但会尽量追求这个目标：好的抽象是无法被反驳的。

2. 创造新事物：最关键的是复合思维的训练。

单一技能或知识体系没有构造事物的能力，同理，灵光一现的灵感也只是万里长征第一步，因为构造新事物需要有意识地把不同结构、元素、形态、表达方式等聚合在一起，形成要素的结构化堆叠，并且在这一过程中，大多数情况下，底层结构的东西需要被掩盖。

3. 问题解决：最关键的是问题重定义能力的训练。

绝大多数的问题被错误的表述，因为如果提问者知道问题的正确表述方式，那么也许他就已经能解决这个问题，至少他已经找准了解决的方向。形象点说，大多数的问题提出就像，一个人在迷宫里走进一个死胡同，然后对这段死胡同做了一番描述，而问题重定义的目标则是还原整座迷宫。

然后强调一下，所谓训练，就是指你不仅知道这些方法，不仅是把他们作为一种知识来看待，更可贵的是把这种方法作为一种无时无刻不去实践的习惯，在日常生活学习工作中常常习练之才有意义。

最后补充两个观点：

a. 很多人很看重批判性思维，甚至把批判性思维当作思维能力的全部，是有失偏颇了。批判性思维的训练可以帮助你更好地辨别坏东西，但对你积累好东西则用处不大，例如在观察现象时，寻找深层结构可以让你经常有所得，而批判性思维则只是让你关注在一个个漏洞上（任何东西都有漏洞）。

b. 思维能力与知识不是相互独立，而是相辅相成的。单纯讲求思维训练没有意义，思维训练与高价值知识的学习齐头并进才是正道。所谓高价值知识指的是复用率高、适用性广、寿命长的深度知识。

其他像实操性比较强的视觉化思考、混沌直觉法就不展开讲了。

   思维方法的优劣是学习过程中收效大小的关键之一。
那么，在学习过程中有哪些较好的思维方法呢？一般说来，有以下六种：
    （1） 相似法。现实世界中，从宇宙星系到原子内部运动都存在着种种相似之处。例如，植物界普遍存在构造与功能相似的叶绿素；动物界普遍存在构造与功能相似的血红素。而叶绿素与血红素之间又有相似之处，即都是叶啉络合物。叶绿素是叶啉结合了镁元素，而血红素是叶啉结合了铁元素。这种相似的根源来源于植物的共同祖先——核前生物体。请看，因为相似关系竟将表面看来毫无关联的不同事物连成一个完整的封闭性系统了。又如，人类科技发展史和社会发展史很相似。许多民族都不约而同地经过了石器时代、陶器时代、铜器时代、铁器时代，同时这些民族的社会也经过原始公社、奴隶社会、封建社会、资本主义社会，几乎完全同步前进。
    再如，科学理论方面也存在着相似内容。物理学、化学、生物学、天文学、遗传学、声学等学科，因内部构成都起源于量子，于是产生量子学的各种不同分支：量子物理学、量子化学、量子生物学、射电天文学、量子遗传工程学、量子声学等等。
但是，相似不等于相同。相似是客观事物存在的相同和变异的矛盾的统一。因此，我们在学习过程中，既可以通过相似法中的相同部分看到事物前后之间的承袭关系，又可以通过变异部分看到事物前后之间的差异及发展关系。
    （2）相反法。事物之间不仅存在着相似现象，而且还存在着相反现象。有大必有小；有强必有弱；有虚必有实；有吸收必有排泄；有吸引必有排斥；有聚合必有分离；有守恒必有不守恒等等。在学习过程中，许多问题都可以从反而去剖析、反证、推理、理解、概括、设想、加深、巩固和扩展对下面知识领域的认识与把握。
    （3）破析法。任何一门科学知识都有它的逻辑性、系统性，往往给初学者带来很大的思想压力。这么厚一大本书，怎么读呀？或者，这么多公式、定律、规律、原理，怎么记得住呀？这时，我们就应该运用破析法去对付它们。
例如，学习外语，首先找出它与汉语的一般共同点与不同点，然后再找出它在语音、语法、词汇等各个大部分上的共同点与不同点。再逐步寻找出每一种具体的语音方法、语法现象、构词方式等细节方面的共同点与不同点。目前流行的一些日语速成教材，普遍应用了破析法来编写，所以才能收到速成的良好效果。
    （4）溯源法。任何事物者有其产生和发展的根源。它的本质与规律，只有通过追溯到本源上去，才能真正掌握和船长理解。因此，溯源法有很重大的实践意义。有人认为这种方法似乎是很浪费时间，不值得花这么多时间弄清它的来龙去脉。众所周知，“不求甚解”是学习最大的敌人之一。
在创造性思维中，溯源法往往是新的发明创造的动力。魏格纳因为发现非洲西海岸和美洲东海岸的轮廓彼此吻合得十分巧妙，追本溯源而创立了“大陆飘移学说”。
    （5）宏微对比法。许多事物在宏观上几乎完全一样，但由于微观上的点点差异，往往是性质完全不同的两码事。
    例如，学习外语时，因为一个字母不同，或者完全相同，但读音不同，声调不同，其词义完全不同之类的事例是很多的。无论英语、法语、德语、俄语、日语、西班牙语、阿拉伯语等，都有这种情况存在。因此，在学习时，就要时刻注意将它们进行宏观与微观的对比，才能牢固地掌握其词义及形态特征。
在创造性思维过程中，宏微对比往往是发现新的科研专题征的最好契机。贝克勒尔因为注意到了放在硫酸钾铀矿石上面的照相底片有了微观变样，而发现了天然放射性和天然放射线。贝尔则因为注意到了电报接收机上偶然听见的微弱声音而发明了电话。天文学家的每一次发现，几乎都是通过宏微对比的途径走向成功的。
    （6）扩展、缩微法。扩展是将已学过的知识作基础，向纵横两个方法延伸，以加深与巩固原有知识，并创造新的知识。匈牙利女翻译家卡莫·洛姆布就是用这个方法在二十五年中学会使用十六种外语的。其具体实施方法就是扩展法的具体化——类推法。所谓由此及彼，触类旁通，就是利用事物的共同性质或特征，扩展到其他事物扣去，进一步掌握新的知识。
    微缩是将已学过的宏观知识作显微验证。其具体实施方法是还原法。还原法的实质是把认识引导到由抽象到具体。一条定律、规律，一种原理、原则，一个公式、模式、要真正深刻理解和掌握，就必须将它作显微验证，举一反三，就像数学习题、化学实验、物理观察一样，反复进行，认真实践。


	前言 学“怎样做”，更要学“怎样想”
第一章 聪明看透世界要学会的思维方式
逻辑思维：精确把握事物的本质
形象思维：最常用的认知思维工具
质疑思维：尽信书不如无书
移植思维：用联想将创意跨界
发散思维：让自己来场“头脑风暴”
逆向思维：不妨反过来想想
平面思维：由点及面的思维导图
第二章 高效率做事要学会的思维方式
帕瓦罗蒂思维：你只能选一把椅子坐
动态思维：唯一不变的就是变化
哥伦布思维：换个角度看待平常事
辩证思维：360°去看问题
深入思维：穷根究底你会了解更多
富兰克林思维：习惯决定人的一生
灵感思维：期盼每一个激荡火花
借力思维：借人之力成己之事
变通思维：条条大路通罗马
联想思维：世界在联想中变宽广
杜利奥思维：让激情来得再猛烈些吧！
古特雷思维：不断寻找新的“顶点”
王羲之思维：清醒着才能搞定困难
阿甘思维：今天是唯一的现金
第三章 圆通人际关系要学会的思维方式
糊涂思维：现在吃亏是为了长远
钓鱼思维：放长线钓得贵人来
U形思维：退一步海阔天空
仁爱思维：最宝贵的财富是人心
施恩思维：不尴尬地帮助别人
蔺相如思维：路留一步，味让三分
卢维斯思维：低调做人，到哪里都没有错
求己思维：从别人的错误反省自己
曾子思维：言必信，行必果
孟母思维：近朱者赤，近墨者黑
罗斯福思维：感谢折磨你的人
柯立芝思维：给点忠言逆耳加点糖
赫鲁晓夫思维：身临其境才能理解别人
华盛顿思维：多个敌人不如多个朋友
爱迪生思维：艰难困苦是成功的预兆
肯德基思维：有志不在年高
第四章 白手起家成富人要学会的思维方式
弗罗伦斯思维：目标必须“看得见
超前思维：早走一步奠基优势
马太思维：一上来就占据有利地形
妥协思维：成功商人都诞生于妥协之后
高斯思维：初出牛犊不怕虎
史泰龙思维：成功源于坚持
博弈思维：长达一生的策略游戏
共赢思维：让每一方都满意而归
欧弗斯托思维：欲想服人先讨欢心
拉图尔思维：一个名字成就畅销品
登门槛思维：一步步实现既定目标
250思维：每个顾客都是人脉网
第五章 管人做领导要学会的思维方式
丘吉尔思维：这辈子最崇拜我自己
富兰克林思维：时间就是生产力
沈从文思维：先尊重才能被尊重
马斯洛思维：帮助他人也是帮助你自己
艾森豪威尔思维：比诸葛亮更聪明的管理技能
里根思维：担当起属于自己的职责
间接思维：先舍，才能后得
福克兰思维：避开讨厌的“不确定性”
破窗思维：最早清除“坏萌芽”
换位思维：将心比心再做事
布勃卡思维：留点余地给明天
奥格尔维思维：敢于与牛人合作
蓝斯登思维：让每个下属都快乐
第六章 自我心理调剂要学会的思维方式
高尔基思维：志当存高远
阳光思维：为心情装一个“雨刷器”
理性思维：管理自己的情绪
开放思维：打破妨碍你幸福的篱笆墙
减法思维：剪去不属于自己的幸福
斯坦利思维：信念的力量能贯穿一生
罗森塔尔思维：信自己就是成功了一半
甘地思维：放弃却是一种进步

人常见的思维盲区有哪些？
从电视上看采访雷明，他提到人有一些常见的思维盲区。比如：人只相信自己愿意相信的事。还有其他的例子吗？
3 条评论  分享
按投票排序
按时间排序
23 个回答

赞同
1435

张亮，耐心是美德
蔡振光、知乎用户、YEE MAN TSAI 等人赞同
关于这个问题，最好的回答者是巴菲特的搭档查理·芒格。他曾经将经常导致人类犯错的心理盲区总结为一篇长文。我在几年前看到英文后，请人翻译出来，发在杂志上。转发于此：

有兴趣读英文的请下载： http://www.rbcpa.com/Mungerspeech_june_95.pdf

人类误判心理
作者：查理·芒格（伯克夏·哈撒韦公司董事会副主席，沃伦·巴菲特的搭档）
本文是作者1995年在哈佛法学院的演讲

尽管我对人类误判这个主题很感兴趣——上帝知道，我在误判方面已经小有创造。我想，原因之一是我试图解决一下这个我从哈佛法学院毕业时没有解决的问题。

我意识到人类的非理性已有既定模式，但这种非理性如此极端，我毫无任何理论可以解释和解决，不过我看到了它如何极端，也看到它具有一定模式。我刚开始创建我自己的心理学体系，小部分靠随性阅读，大部分则来自于个人经历，我运用这个模式帮助自己安度此生。后来，我偶然读到《Influence》一书，作者是一位名叫鲍勃·恰尔蒂尼（Bob Cialdini）的心理学家，他年纪轻轻就在一个有2000人教师队伍的学校里脱颖而出，获得终身教席。这本书现在已经卖出30多万本，确实不同凡响。这是一本针对普通读者的理论书，它填补了我粗糙体系中的很多漏洞。在这些被它填补的漏洞中，我想我已经建立起了一套自己的体系，该系统是一个很好用的工具，我愿与你们分享。

我来到这儿是因为行为经济学。经济学如何不变作行为？如果经济学不是行为，它究竟是什么？我认为，很清楚的一点就是，所有真实必须相容于其他真实。如果有这种不相容情况，那就必须加以解决。心理学中若有任何东西是成立的，经济学就必须承认。反之亦然。所以我认为，从事经济学和心理学两者之间跨学科研究的人们，到这儿来完全正确。我想，过去很多年我犯下了很多错误。接下来，我将尽可能多地利用我的时间讲讲下面这个单子：

人类误判的24个标准成因（24 Standard Causes of Human Misjudgment）


1. 低估心理学家称之为“强化”或经济学家称之为“激励”的威力。

你可以说这个东西“众人皆知”，但我也认为在与我同龄的人群中，我这一生都位于最能理解“激励”威力的前5%之列。每一年，我都会惊讶地发现，我对此的认知都在不断增加。

联邦快递的例子是我最欣赏的有关“激励”效果的案例之一。该公司的内部系统有效运作的核心是：每晚，所有的包裹都必须从同一个中央位置快速运送出去，而且，如果整个运送过程不够迅速的话，系统也就出问题了。但是在正常运转之前，联邦快递度过了一段糟糕的时期，他们试图进行道德规劝，尝试了世上一切手段。最后，一些人想出了妙招：他们按小时给夜班工人计酬。如果按照不同的轮班情况支付报酬的话，系统会运行得更加良好。你看，这个办法生效了。

在施乐复印机的早期发展时期，乔·威尔森（Joe Wilson）辞去政府公职回到施乐，因为他无法明白为什么更新、更好的机器，销售状况却是如此糟糕，甚至卖不过他们那些功能更差的老式机器。当然，当威尔森到达施乐公司后发现，原来业务员销售老款机器的佣金更为丰厚。

在哈佛， B·F·斯金纳（B.F. Skinner）是一个真正将“强化”视为一个强大工具的人。不过，正如你所知，斯金纳在很多地方都丧失了名誉。然而，纵观哈佛大学实验科学的历史，斯金纳是少数几个顶尖人物之一。他的实验很有创造性，实验结果是“反直觉”的，但这些结论都很重要。搞坏斯金纳名声的是一种我称之为“大锤综合症”（man-with-a-hammer syndrome）的东西：对于一个拿着锤子的人来说，所有的问题都看起来像一个钉子。而斯金纳是学术史上的一个极端。一些聪明人也会患上这种综合症。稍后我们会探讨一下为什么人们会患上这种综合症。

2. 我的第二个因素是简单心理否定。

第一次给我极大触动的事情，是我家一个朋友，她那有着超级健将体格、超好学习成绩的儿子，从北大西洋的一艘航空母舰上驾机起飞后，就再也没有回来过。他的母亲，一位心智健全的女子，从不相信他已经死了。当然，如果你打开电视机，就会发现，那些罪行显而易见的犯罪分子的母亲们，也从来都认为自己的儿子是无辜的。这就是心理否定。有时，真相太残酷了，让人难以承受。所以，你就扭曲它，将之变得可以承受。我们在某种程度上都会这么做。这是一种造成可怕问题的常见心理误判。

3. 由激励导致的偏见，既存在于自己和其所信赖的顾问的脑海中，它创造了经济学家所谓的“代理成本”（agency costs）

关于这方面，我早期的认识来源于一名医生，他经常提着装了一篮子的正常人胆囊，带到位于内布拉斯加州林肯市一家顶级医院的病理学实验室里。在以质量控制闻名的社区医院里，他这么干了五年之后便被开除了。其中一个参与做出开除决定的老医生，也是我家的一位朋友，我问他道：“你说说，他是否认为这是他利用其才华的一种方式”——这个家伙的确医术高超，“每年通过致残、杀害一些人，以及欺诈，来过上阔绰的生活呢？”他回答道：“当然不是，查理。他认为胆囊是医疗祸害之源。如果你真的爱你的病人，就得以最快的速度把这个器官从体内取出。”

这是一个极端的例子，但说服力会较弱。“偏见”存在于任何一个专业领域和任何一个人身上，并且会导致非常可怕的行为。我已经70岁了，但还从来没有见过什么东西距客观真理只有一步之遥。要想见识激励的威力、以及理性但却可怕的行为的力量，如下例子可证：在国防部对在成本外再追加合同费用的做法已轻车熟路后，我们的反应就是在联邦法律中认定此种行为就是犯罪，而且是重罪。

顺便说一句，政府是对的，但这个世界——包括很多法律公司和其他地方——运转的很多方式之一，便是在成本体系之外又增加额外费用。而人的本性，我称之为“激励导致的偏见”，极大地促成了这种做法的泛滥。

人类的思维就是这种方式，这一事实极大地证明了，发明了收银机的人正是我们这个文明中最有卓有成效的圣徒——正是收银机让人难以实施不道德的行为难以发生，每台收银机都是一个伟大的道德工具。而且帕特森（Patterson）自己也清楚这点。他有一个小商店，人们从他那儿偷东西，害他总是赚不到钱。后来，有人卖给他两个收银机，小店立刻就赢利了。当然，他关了商店，开始从事收银机的买卖……

4. 由错误导致的心理倾向所具备的超级力量：偏见来自于人们对前后一致和坚守承诺的倾向，包括对避免或迅速解决认知不和谐的倾向，以及对所有结论——尤其是对已公开表达或者来之不易的结论——自我确认的倾向。

人类的思想跟人类的卵子很相像。卵子有一个“关闭”机制。当一个精子进入后，它就“关门”了，其余的精子就进不来了。人类的思想普遍有这类特征。并不是只有普通人才有这种倾向，物理学院的院长也会有这种倾向。根据马克斯·普朗克（Max Planck，著名物理学家）的说法，真正的创新、重要的新物理学理论从来没有真正被旧理论的捍卫者们所接受。而一个新的捍卫者则相对开放，较少会因为已有的结论而封闭自己的大脑。如果普朗克所描述的人群有这种前后一致和坚守承诺的倾向，使得它们死死抓住固有结论，哪怕是已经出现了证明其不成立的证据，你就能想象你我都是其中一分子的这个人群将会有怎样的行为。

当然，如果你公开了你的结论，就等于你把该结论重重打入自己的大脑。有很多学生冲我们大声喊叫，但他们不是在说服我们，而是在强化他们自己正在的新思想，因为他们大声喊出的正是他们打入自己脑中的。我认为正是教育机构创造了一种氛围，使得这种情况大行其道……从根本上来说，他们是不负责任的机构。在年轻的时候，不要被你所喊出的东西禁锢住大脑，这一点很重要。


5. 来自于“巴甫洛夫联想”（Pavlovian association）的偏见，曲解跨越了相关性，成为决策的的依据。


我从来没有为此上过心理学或是经济学的课程，不过我倒是在中学生物课上学过巴甫洛夫（巴甫洛夫，1849-1936，苏联生理学家，曾获1904年诺贝尔生理学-医学奖）。他们教了些什么你也知道，比如狗一听见铃声就开始流唾液什么的。那又如何？没有人（哪怕用最小的努力）把它与广阔的世界联系在一起。

事实是，在我们所有人的日常生活中，“巴甫洛夫联想”是一个巨大的、强有力的心理力量。的确，在经济学中，如果没有所谓的“次级强化”（secondary reinforcement）所扮演的角色，我们就不可能拿到钱。“次级强化”其实是一个可以在实验室中论证的纯心理现象。

我认为四分之三的商业广告都在运用巴甫洛夫理论。联想、纯粹的联想是如何起作用的，可以想想可口可乐公司，他们想把公司与一切令人愉悦的景象联系起来：奥运会中的英雄、优美的音乐……凡你想得起的。他们不想与总统们的葬礼相联系。当你看到一个可口可乐广告……联系就真正起效了。

所有这些心理倾向大部分或者全部是在下意识的状态下完成的，这让它们显得很“阴险”。现在，你又得了“花剌子模信使综合症”（Persian messenger syndrome）。中亚古国花剌子模的君王，会把带来坏消息的信使处死。你觉得这种情况已经绝迹了吗？那你应该看看CBS的前主席和CEO比尔·佩利（Bill Paley）过去20年的生活。他不听任何一个他不想听的消息。人们知道，如果报信人带给比尔·佩利的是他不想听到的消息，这个信使就要倒霉了。这意味着领导者们陷入了非现实的茧，这是一家巨型的公司，上帝啊，他确实在过去20年中做出了一些愚不可及的决策。

现在，“花剌子模信使综合症”仍是生机勃勃。我认为，没有人愿意把坏消息带给执行官们。因此最好的办法是像花剌子模信使那样，离开并躲藏起来， 而不是把战败的消息带回家。

说到经济学，在我长长的一生当中，一次又一次看到人们身上发生的一个非常有趣的现象。你们有两个产品，假设它们都是复杂的、技术性的产品。现在你就会想，根据经济学原理，如果A产品的售价是X元，Y产品的售价低于X元，那么，Y产品的销路将比售价高于X元时要好。事实上并非如此。在很多情况下，提高产品价格后所获得的市场份额，要大于把价格降到竞争对手以下时获得的市场份额。但事实上，经济学界直到最近才发现这个再明显不过的道理。

6. 从互换倾向中产生的偏见。包括一个人会按照其他人对他的期望来行动的倾向。

在这方面，查尔蒂尼（Cialdini）做得相当不错。查尔蒂尼称之为“顺从参与者”的那类人，很容易就成为一个容易上当受骗的人。 无论如何，互换倾向是一个非常、非常强有力的现象。查尔蒂尼通过一个实验向展示它的力量：他跑到一个校园里，请人们带少年犯去动物园。因为是在校里，平均每六个人中就有一个答应了他的请求。在他积累了一些数据之后。在同一个校园，他又询问其他人：“喂，你愿意在一周里牺牲两个下午陪一个少年犯到什么地方转转吗？”结果，100%的受访者都拒绝了他。在他问了第一个问题后，他退了一小步，问道：“你愿意抽出一个中午陪少年犯去动物园吗？”至少有一半人同意了。采用了这种策略后，他的成功率是以前的三倍。

现在，如果人类的思想在下意识状态下以那种方式被操纵，而你自己并不知道，我经常说的一句话是：“你就像是只有一只腿而去参加踢屁股比赛的人。”我的意思是，你真是把大把的时间花在了你负担不起的外部世界里。在这个所谓的角色理论中，别人对你的期待是怎样的，你就趋向于以怎样的方式行动，如果再想想社会的组织形式，就会明白，这就是互换。

一个叫琴巴多（Zimbardo）的心理学家曾在斯坦福做了一个试验，他把参与实验者分为两组，一组扮演警察，一组扮演囚犯。两组人都以人们期待的方式把自己的角色付诸行动。五天后，琴巴多不得不停止实验，因为看守们成了虐待狂,而囚犯们变得非常压抑。而在刚开始,实验者都是普通而友好的大学生。这项试验变成了所谓的情境恶魔的经典教程，即使一个好人被放入到糟糕的环境，也可能变成野兽。我的意思是……这很可怕。但是，琴巴多被严重曲解了。不仅仅是互换倾向和角色理论导致了那个实验结果，还有前后连贯和承诺的倾向也起了作用。每一个人，不论他扮演的是警察还是囚犯，表演本身已经打入了脑际。

无论你在哪里，这种前后连贯和承诺的倾向都在影响你。换言之，你的想法可能会改变你的做法。不过，更为重要的可能是，你的做法最终将会改变你的想法。你可以说，每个人都知道这个。我想要告诉你的是，我本人没有尽可能早、尽可能多地了解这个道理。

7. 高夫曼（Henry Kaufman）曾经睿智地谈到过这个：由社会证据（Social poof，即他人的结论，尤其是在天生的不确定性和重压条件之下产生的结论）的过度影响所产生的偏见。

关于这一点，心理学家们常用的一个案例是基蒂·珍诺维丝小姐（Kitty Genovese）的例子。1964年，她被歹徒当街刺杀身亡。当时有50个或者60、70个人，我也不知道究竟有多少人亲眼看到她被歹徒追逐长达半个小时的过程，但是没有一位目击者出手相助，甚至也没有人打电话报警。一种解释是，每个人都看到其他人毫无行动，所以自然而然地产生了这样的社会证据：什么都不做才是正确的做法。依我的判断，用这个理由解释珍诺维丝的例子还不够，它仅是一部分原因。微观经济的想法和收益/损失比率也在其中扮演了它们的角色。我反复地想过，在现实中，心理观念和经济观念互相影响。对这两者都不了解的人简直就是个该死的笨蛋。

一些大商人们也被卷入了这些社会证据的大浪中。还记得几年前吗？有一个石油公司收购了一个化肥公司，随后，每一个大石油公司都跑去买了一个化肥公司。实际上，这些石油公司根本没有更多的理由去买化肥公司，但是他们根本不知道该去做什么。如果埃克森石油公司（Exxon）这么做了，美孚石油公司（Mobil）就有足够的理由这么做。反之亦然。我想现在它们都这么做了，这完全是一场灾难。

如果你想想关于我讲过的教义，也就是强化的力量——你做了某事，后来市场上扬了，你得到了报酬、奖励和喝彩。如果你在市场上打赌，市场就与你相伴。这儿也有社会证据。我的意思是市场上的价格是社会证据的最终表现形式，折射了其他人的想法。你为什么要期望共同市场水平一直是有效的，哪怕是在1973-74市场整体处于低谷，亦或在1972年或是什么年头50家大公司都处于它们的全盛时期？如果这些心理上的观念都是正确的，你将会期待一些非理性的浪潮，它们带来了整体水平，因此他们与理智是不协调的。



8. 让这些经济学家爱上有效市场理论的是优雅的数学。


毕竟，数学是他们已经学习了的。对于一个拿锤头的人来说，每个一问题都非常像是一个钉子。选择性的真理有一点凌乱，他们已经忘记了伟大的经济学家凯恩斯，我记得他曾说过：“粗糙的正确胜于精确的错误。”

9. 来源于感情、感觉和认识的对比导致的抽曲的偏见

查尔蒂尼在他的课堂上做了一个伟大的实验：他拿了三桶水，一桶热水，一桶冷水，一桶常温水。他让一个学生把左手放入热水中，右手放入冷水中，然后再把两只手同时放入常温的水中。当然，一只手感觉很热，另一只感觉很冷。这是因为人的感觉器官在强烈的对比之下被过度影响了。没有绝对温标，只有相对温度，而且还有量子效应（quantum effect）在其中。

查尔蒂尼举了房地产经纪人的例子。如果一个乡下人到城里来找你买房，你首先要做的就是带他去两套你见过的最贵的房子，然后，再带他去看一些中等昂贵的房子，最后你就能搞定他了。这套办法非常有效，这也是销售员这么做的原因，它总能起作用。

生活中的意外也能对你做同样的事情，它能毁了你的生活。在我那个年代，妇女在结婚前必须一直呆在房子里，我见过一些非常想结婚的女人一手造成了糟糕的婚姻，因为这些女人结婚前的居住条件很差。我还见过一些非常糟糕的再婚，就是为了提高哪怕一点点她们的居住条件（头婚给她们带来的居住条件恶劣）。你们在笑，你会认为你不会做这样的事，但我要告诉你，你会的。

我有一个朋友，靠继承的财产为生。他有一次对我说的话很让我受用。他说：“查利，如果你把一只青蛙放进滚烫的开水中，它会立刻跳出来。但是如果你把它放在温水中，然后给水慢慢加热，最终，它将会被开水煮死。”我不知道青蛙会不会真的如他所说的那般。但是我知道的很多商人的确是如此的。这还是对比现象（contrast phenomenon）。但他们都是些位高权重的大人物。我的意思是，他们不是蠢蛋。当变化一点点靠近你是，你很可能无法查觉。所以，如果你要成为一个具有良好判断力的人，你必须对于这些因为对比在你脑中所产生的扭曲有所反应。



10. 权威人物的过度影响所造成的偏见


我想，关于米尔格伦实验（Milgrim experiment）的心理学论文大概有1600篇。在这个试验中，有一个扮演权威的人，他告诉被实验对象的人他们必须对完全无辜的人持续施予电击。令人惊讶的是，即使被实验者开始变得紧张与动摇，当他们被命令施予最大电击的时候，有超过三分之二的人还是会照做。米尔格伦想通过这个实验展示希特勒是如何成功的，这个实验的确是抓住了这个世界的想象力。从米尔格伦实验的观点来看，纳粹的犯罪活动和希特勒的成功便不难理解。部分原因是政治正确和权威的过度影响力。人类天生具有服从权威的倾向，即使这服从是错误的。

你也许会喜欢下面这个例子：有两个飞机驾驶员，一正一副，正驾驶员是一个权威人物。他们没有在飞机里，而是在模拟状态下完成了这个实验。副驾驶员在模拟状态下被训练了很长一段时间，他知道他的职责就是防止坠机。实验过程中，那个正驾驶员做了一些连傻瓜都能看出来足以导致坠机的操作。但副驾驶员只是安静地坐在那儿，因为正驾驶是权威角色。25%的情况下，飞机都会坠毁。我的意思是，这是一个强有力的心理倾向。它不像一些人认为的那么强大，我们一会儿再谈这个。

11.来自于“剥夺超级反应综合症”（deprival super-reaction syndrome）的偏见。包括由当下的或潜在的匮乏造成的偏见，包括可能发生的对几乎已经拥有或从未曾拥有的东西的去除。


我有一只很可爱的小狗，一只“无害”的小狗。唯一让它咬人的方法就是你从它嘴里抢东西。如果你在工会组织中的劳工谈判中试图做出让步，你就会知道，我们每人都会有小狗的那种反应。

我有一个邻居，这位老前辈的房子周围有一片小岛，他的隔壁邻居在那小岛上种了一株小小的松树，大约有三英尺高。以前，那位老前辈能以180度的视角看到他房前的港口，有了这株小树，他的视角变成了179又3/4度。从此，两人便像Hatfields家族和McCoys家族一样，结下世仇，这种仇怨仍在继续。

我的意思是，人们对那些微不足道的“减少”真够疯狂的。如果你对此有所动作，你就又陷入了互换倾向。因为你们不仅互换友爱，你们还会互换仇恨，并且所有的事情都会升级。这如此巨大的疯狂都源于人们下意识地把自己失去的东西、或者几乎得到又没得到的东西看得太重。

在这方面，新可乐（New Coke）是一个极端的商业案例。可口可乐是世界上价值最高的品牌。我们是它的大股东。我想我们理解这个品牌。可口可乐有很多聪明的工程师、律师、心理学家和广告主管等等。在过去的100年中，他们花了很多时间让人们相信商标有着很多无形的价值。人们会把这个商标与某种口味联系在一起。但他们不会对人说“这个口味改良了”，因为你不能改良一种口味。口味是事关体验的事。我的意思是你可以改良一种去污剂或是什么东西，但我认为你不能把某种口味做什么大的改变。所以，他们得了这种巨大的“剥夺超级反应综合症”。

百事可乐在几星期内推出了装在百事瓶内的老可乐（old Coke in a Pepsi bottle），结果造成了惨败。极端的愚蠢！顺便说一下，郭祖耶塔（Goizuetta，可乐当时的CEO）和齐奥（Keough，可乐历史上一位颇有影响的前总裁和公司董事）都是聪明而有趣的人，但正是聪明人做出了这些可怕的、愚蠢的错误。你怎么能够不明白“剥夺超级反应综合症”？但是人们对得和失总不能做出均衡的反应。



12. 源于羡慕/嫉妒的偏见

那些抚养兄弟姐妹或是试图经营法律公司、投资银行甚至一家工厂会对羡慕一词有所了解。我曾听巴菲特不止一次说过：“不是贪婪，而是嫉妒推动着世界前进。”

你又去一次去浏览心理学调查课程，打开目录，你会发现一本1000页的书，它是空白的。关于这方面，学术界有一些盲点，但它是一个拥有强大力量的东西。它在很大程度上都是在潜意识中运作。每一个不理解它的人都呈现出一些他们不应该有的缺点。

13. 源于化学倾向的偏见

我们不用非得讨论这个话题。我们都见过得太多了。不过有趣的是，如果有必要的话，它如何总是导致道德崩溃，而且总是引来人们对它的大力否定。在先前我们谈到的飞行员的例子中，它起到了恶化作用，扭曲现实的倾向，因此，它还是可以忍受的。

14. 来源“错误的赌博强制”（mis-gambling compulsion）的偏见

关于这方面，你可以在标准的心理学调查课程中找到斯金纳做出的对其唯一的解释。当然，他为他的鸽子和老鼠创造了一个可变的强化比率。他发现，这将比任何其他强制模式都能更好地影响行为。他说：“哈，我已经解释了为什么赌博在文明社会中如此有力、让人上瘾。”我认为，在在相当大的程度上，他说的是真实的。但是斯金纳似乎认为这是唯一的解释，但事实是，那些现代机器和技术的遗赠者知道很多斯金纳不知道的事。

如果你去玩老虎机，你会得到栅栏、栅栏、胡桃木。它一次又一次地发生。所有这些你都近距离脱靶了，这就是“超级剥夺反应综合合症”（deprival super-reaction syndrome）。上帝啊，发明了这款机器的人懂得人类心理学吗？对于高智商人群来说，他们在你做出决策的地方有扑克器（poker machines）。可以说，你能跟扑克器玩“二十一点”。这个很有趣， 我们已经做到了，用电脑来破坏文明。

无论如何，“错误的赌博强制”是一个非常非常强大和重要的东西。看看我们的国家正在发生的事吧：每个印第安人都有一块自留在，每一个河镇，再看看那些被股票经纪人和其他什么人毁了的人们。如果你去查阅标准的心理学教科书，关于这方面的介绍，你几乎什么都找不到，也许会有一句谈到斯金纳的老鼠（Skinner's rats）的话例外。这对那个主题并不是一个充分的介绍。




15. 源于喜欢的扭曲的偏见。包括特别喜欢自己、喜欢自己的种类、自己的主意和结构，还有当被自己喜欢的人误导时，变得极为敏感的倾向。不喜欢的扭曲，偏见即源自那里。喜爱的扭曲的互换和不能恰当地向你不喜欢的人学习的倾向。




如果你看看哈佛法学院某些区域里发生的战争，你能发现，非常聪明的人也陷入了这个几乎是病态的行为。并且这些都是非常强有力、非常基础、下意识的病态倾向，或者至少一部分是下意识的。

现在让我们回到斯金纳，再回顾一下“拿锤综合症”（man-with-a-hammer syndrome ）。为什么“拿锤综合症”一直存在？如果你停止考虑此事，这就是激励导致的偏见。他的专业名誉和他的所知密切相关。他喜欢他自己，他喜欢他自己的想法，他把这些想法向其他人表达，这是一致性和承诺倾向。我的意思是，四个或五个基本的心理倾向组合在一起，创造了这个“拿锤综合症”。

一旦你意识到你不能真正购买自己的思想——你能买一小部分，但很大一部分你在世界上买不到——你在生活中已经学到了非常有用的一课。萧伯纳的小说《医生的窘境》（The Doctor's Dilemma）中有一个角色说：“说到底，每一种专业都是针对外行的共谋。”不过它说得并不非常正确，与其说它是共谋，倒不说它是一种下意识的心理倾向更为贴切。

他还告诉你什么对他是有益的。他并不承认他比那个从人体里取出正常胆囊的医生犯下的过错更多。他认为他自己的办法能治疗癌症。他认为他正在对抗的恶魔是最大、最为重要的恶魔。事实上，与你们面对的恶魔相比，他们可能非常微不足道。因此，你在这世上从你的付费顾问那里得到的建议充满了可怕的偏见。对你来说真是悲哀！

有两种解决方式：你可以雇佣你的顾问并提供一个windage factor, 就像当年我做一个来复枪手时做的那样。或者你可以学习你顾问的买卖的基本元素。顺便说一下，你不用学太多，因为你只要学一点，你就能让他解释为什么他是对的。

基本上，它的效果非常糟糕。在我漫长的生活中，我从没见过哪一个管理顾问的报告不是以下面这样的段落结尾的：“这种情况下，真正需要的是更多的管理咨询”每一次都是这样结尾。我总是翻到最后一页。当然，伯克夏公司没有雇佣这些顾问。有时，我有一些非营利机构，在那里，一些傻瓜会聘请顾问。（笑声）

16. 来自于人类头脑中非数学性质的偏见

可以问问可口可乐公司，该公司把可用性（availability）提升为一个长期的信仰。如果有用性能改变行为，你将会喝非常多的可乐（如果可乐总是能得到的话）。我的意思是可用性确实改变行为和认知。尽管如此，虽然我认识到了这一点，但从我个人来讲，我不喜欢它。除非它是做为一个更大的子系统的一部分。不仅仅是缺乏有效性才扭曲你的判断。这个单子上的所有一切都扭曲了判断。我想训练自己在精神层面上对这个单子进行浏览，而不是直接扑向有用性上去。这就是为什么我要用我的方式陈述它。

在某种意义上，这些心理学倾向让事物变得难以获取。因为如果你迅速扑向一个事物，接下来因为你扑向了它，连贯性和承诺倾向把你关了禁闭。额外的鲜活创造了不可获取性。

我认为我们应该讨论一下约翰·古特弗洛恩特（John Gutfreund）。这是一个非常有趣有人类实例。至少在整整一代人的时间里，每一个正统的专业学校都会讲授这个实例。古特弗洛恩特有一个很受信任的职员，但有一次这个职员被意外地发现（不是坦白）向政府说谎，并且做假账，这相当于伪造罪。这个人立即说：“我以前没来没这么干过。我今后再也不这么做了。这是绝无仅有的一次。”当然，很明显，他是在试图帮助政府还有他自己。因为他认为政策在通过了一项他反对的法律时保持了足够的沉默。最终，如果政府不准备对所罗门证券工程的债券交易员以足够多的关注，它能成为一个什么样的政府？

无论如何，这个家伙是那个小圈子中的一员。有很多心理学力量在起做作用。你认识这个家伙的老婆，而他正站在你面前，你就会产生同情心。他也会向寻求你的帮助。这其中就有很多心理倾向在发生效用。还有，别忘了这个事实：他是帮你赚了大钱的团队中的一份子。 无论如何，古特弗洛恩特没有把他撤职，当然，那个家伙此前这么干过，他今后肯定还会这么做。现在看起来你仿佛想让他再干一次似的。也许只有上帝才知道你像什么，但这并不好。那个简单的决定毁了古特弗洛恩特，非常容易就毁了他。

See's Candy 公司（我们的附属机构）有一个关于小老妇人的孤立例子，她把手伸进了公司的钱柜。她说什么？“我以前从来没有这么干过，我今后永远也不会再这么做了。这将会毁了我的生活。请帮帮我。”你认识她的孩子和朋友，她已经30岁左右了，站在糖果店柜台后面，脚踝肿胀。当你是一个老妇人的时候，这并不是一种光鲜的生活。你富有，有权势，她站在那里说到：“我以前从来没有这么干过，我今后永远也不会再这么做了。”她以前没有那么做的可能性有多大？如果你准备一年抓获10起盗用公款案件，有多少是第一次犯案？ 还有那些以前做过今后还想再做的人，他们又将会说些什么？在See's Candy公司的历史上，他们总是说：“我以前从来没有这么干过，我今后永远也不会再这么做了。”我们撤了他们的职。不开除他们将是非常有害的，因为这种可怕的行为会蔓延。

记住……这是什么？Serpico? 我的意思是你让那个员工……你已经拿到了社会证据，你染上了激励导致的偏见，你已经有了很多将导致可怕行为蔓延的心理因素……你所在的地方会腐烂，文明会腐烂。这不是正确的举动。我因为某人带情妇去外国长期旅行而解雇他，当我知道他有妻子和孩子时，我会付给他遣散费。我介意的不是通奸，而是盗用、侵吞。

17. 来源于额外鲜活的证据带来的过度影响的偏见

今天我在这里做这个小小的演讲，我至少损失了3000万美元。因为我曾经买了300股某种股票，那个家伙把我叫回来说：“我还有1500股以上的股票。”我说：“你帮我保留15分钟，我再想想。”这个公司的CEO——在我的一生中我见过许多鲜活的怪异之事，但是这个人算是创了世界纪录。我谈的是关于CEO——但我误判了它。事实是，情况其实十分安全。他马上就要死了。我拒绝买下额外的1500股。结果，它现在花费了我3000万美元。这就大城市的生活。股票很容易买到。因此，很容易误判那些鲜活的证据。Gutfreund 便是如此，他直视着那个男人的眼睛，原谅了这位同事。

18. 由信息带来的精神错乱没有排列在头脑和理论架构中，它创造了健全的普遍性以回应关于“为什么”的问题。同样，由信息导致的错误影响表面上（并没有真正地）回答“为什么”的问题。同样，由于没有适当地解释“为什么”而导致失去应得的影响


我们都知道一些已经失败的人，他们再次尝试并记住教训……就是不起作用。大脑就是不按那种方式工作。你必须在理论架构的基本上排列事实，来回答关于“为什么”的问题。如果你不那么做，你就没法应对这世界。

现在我们来谈谈福耶斯坦（Feuerstein），当古特弗洛恩特犯下大错时，他是所罗门证券的法务官，福耶斯坦知道得要更多一些。他对古特弗洛恩特说：“你必须把它当做一件有关道德和谨慎的商业判断的事件向上汇报。”他说：“这可能不是违法的。可能没有法律义务去这么做，不过你必须把它做为一项谨慎的行为与主要客户的适当交易。”他在至少二到三个不同的场合跟古特弗洛恩特说过上面的话。最后，他不再说了。当然，劝说失败了。当古特弗洛恩特下台时，福耶斯坦也跟他一起下台了。这把福耶斯坦相当大一部分的生活都给毁了。

福耶斯坦是《哈佛法律评论》（Harvard Law Review）的编委之一，但他犯下了一个基本的心理错误。你想劝服某人，你就必须真正地告诉他们为什么。我们在第一课中学到了什么？激励真的那么重要吗？鲜活的证据真的起作用吗？他应该告诉古特弗洛恩特：“你可能会毁了你的生活，让你的家族蒙羞，并丧失你的金钱。”那样说会起到作用。因此福耶斯坦这个聪明、久经世故的律师，在初级心理学上是不及格的。但是你不要那样做。那做起来很难，你知道，要记住的是“为什么”很重要。



20. 由压力导致的精神变化，小的和大的，暂时的和永远的。

我最喜欢的例子是伟大的巴甫洛夫。他把一些狗养在笼子里，这些狗在经过训练后行为都发生了变化。有一次列宁格勒发了大水，水一直上涨，而有一只狗仍在笼中。这只狗遭受到了非常巨大的压力。洪水退去后，巴甫洛夫注意到他们被训练出的个性发生了完全的逆转。作为一个伟大的科学家，巴甫洛夫的余生都用于让狗精神失常，他学到了很多我认为非常有趣的东西。

我从没见过一个对巴甫洛夫的晚期工作有所了解的佛洛伊德学派分析师，我也没见过哪一位律师能够理解巴甫洛夫在这些狗身上的发现与规划、抵消规划和崇拜仪式等等有何关联。我的意思是，在高层面上，对基本心理学的无知是相当显著的。

22. “表态综合症”（say-something syndrome）的发展和组织混乱

关于这方面，我最喜欢的东西是蜜蜂。一只蜜蜂飞出去，找到花蜜后再飞回来。它用跳舞的方式告诉其他蜜蜂花蜜的地点，然后集体出发去采蜜。一些聪明的科学家，比如斯金纳决定做一个实验。他把花蜜远远地垂直放在蜂巢上面。在自然的状态下，没有花蜜是像那样垂直在上的。现在，可怜的蜜蜂没有足够的遗传程序让它来处理如何与其他蜜蜂交流的难题。你也许会想，这只蜜蜂会飞回蜂巢，然后悄悄藏在一个角落里。但是它没有。它飞进蜂巢，“语无伦次”地跳起舞来。我的一生都在跟像这只蜜蜂一样的人打交道。（笑声）这是人类组织中非常重要的一部分，因此，噪音、交换和所有这些我称之为患上“表态综合症”的人不会真正影响到决策。
编辑于 2012-07-13  60 条评论

赞同
123

味精姐姐，我搞UI简称GUI
彭小懒、王小猪、球悦 等人赞同
人类思维的10大常见误区 Top 10 Common Faults In Human Thought
发现译言有人翻译了，但是实在太烂，又找到新浪博客有人发了译文，不错，整理到这里给大家看看 Top 10 Common Faults In Human Thought_aflame_新浪博客

人类常见的十种思考谬误

《天才的13个思维工具》—读书笔记（1）2007年06月06日 星期三 00:09第一章              对思考的重新思考

发现的过程完全是感觉的，数学只有在与其他人交流的时候才是必要的。数学是我们用来表达我们对于自然界的理解的一种形式，但它不是我们理解的内容。在我所解决的一些问题里，必须在作数学之前使用作图这种方法。

创造性思维首先是感觉。我们的感觉，我们的直觉，并不是理性思维的绊脚石，相反，它是理性思维的根源和基础。所有学科的创造性思维和表达都产生于直觉和感情。

诗人首先是一个永远不会忘记特定的感觉印象的人，他经历过，并能一次又一次重新感觉它，就像全新的一样。完全回到了过去，以至于完全丧失了对于现在时间和地点的感觉。

“作者不流泪，读者就不流泪；作者不感到惊讶，读者就不感到惊讶。”

开始的时候，那种冲动，视角和感觉是无法言表的，但最后它必须变成词汇。

科学家需要一种具有艺术创造性的想象力。科学家与艺术家有着亲缘关系，因为他们的洞见始于同样的感觉和直觉王国。最差劲的科学家是没有成为艺术家的科学家；最差劲的艺术家是没有成为科学家的艺术家。

学生必须学习注意自己在骨子里是怎么想的，并学会发展和利用它。

第二章 想象力教育

学术知识与现实经验之间的分离还是一直毒害着我们的教育。哈佛大学一个心理学家在一次关于创造力的研讨会上说道：“在麻省理工这样的著名学府里，学生们对微积分的掌握让老师感到满意，他们解答了期末考试中的问题。但在开始物理学课程时，他们却不知道如何把微积分应用于解决物理问题。”当所学的技能不能转移时，那么所学的东西肯定很有问题。事实上，许多大学教授都意识到了这个问题，他们的学生有解开爱因斯坦描述相对论公式的能力，但只有少数的几个能将这些公式应用于实际。只有少数几个可以像爱因斯坦等那样伟大的思想家自由的在自己的数学理解和实际理解之间切换。很多学生只把数学当成一种交流的语言学习，却没有同时学会数学所要传递的东西，尽管他们很聪明，他们的教育却只完成了一半。

在幻想中生活而不是在现实中生活的问题并不只限于科学，人文科学的词汇教育也相似的失败了。它教会了学生交流和分析，却没有教会他们直接的感觉，观察，移情和了解现实的方法。

吴尔夫，在她父亲拒绝送她上大学时，她可能害怕过，但是她后来意识到她自己自学的价值是难以估量的。从很小的时候，她就听父亲给她将莎士比亚和一些历史的经典。她把时间用在自然博物馆。她和姊妹们模仿母亲讲故事而编造自己的故事。她殷勤的为一家报纸写稿。在这一切里，她的学习是一种躯体的经历，就像爱因斯坦一样。她培养了完全记忆自己感觉的能力。她具有对自己所阅读的书中的人物感同身受的能力，能很容易进入到他们的世界里，而忘记了自己的存在。她不尽学会了什么是“文学”而且还学会了怎么“做文学”。小说是被创造出来的，他们不仅仅被用于阅读。看一部小说或一尊塑像，或听一段音乐，这就只感觉到了幻想，只有当我们理解了艺术怎样来源于生活以及她与生活的关系后，我们才能够经历现实。我们越是把艺术对象和产生这些对象的经历分离开，我们就越把艺术切割到了一个独立的领域，而与其他事情毫不相干。“我不理解人们是怎么了，他们并不通过理解学习，而通过死记硬背或其他方式学习，他们的知识是这么脆弱！”约翰是个聪明的学生，对自己的学科知识很了解，但当我们直入主题时，他却不理解自己的学科——怎样在实践中用他们来创造新的东西，实际上，他的知识脆弱而无用，这是教育失败的结果，而他却常常被披上了学术成功的外衣。

幻想和想象让我们知道现实世界可以是什么样子的，知识和经验限制了可能性，把两者结合起来就产生了理解。没有了幻想，就不可能更清楚的把握现实，反之亦然。

唯一的失败是不努力去做。

第三章 观察

所有的知识都始于观察。我们必须具有精确的观察世界的能力，只有如此才能辨认不同的行为模式，抽象出法则，类比事物的性质，创作出新的行为模式和有成就的革新。观察决不同于看看，尽管有史以来人们都看伪装的动物，但没有人意识到其中存在着一个一般概念。

被动地看和主动的观察的区别继续在现代的艺术家的手中产生了惊人的效果。去思考我们所看到的，用时间和耐心去看。

一遍又一遍的看的所需要的耐心是每一个伟大的艺术家的一个特征。毕加索以艺术的抽象而著称，在他还是孩子的时候他第一次学会了真实的画出他所认真观察的东西。他父亲要求他一次又一次的画鸽子爪子，然后挑出毛病，又继续画。直到最后，“他允许我画任何我所喜欢的东西，那时我可以画人的脸型和一些很大的图形，通常没有模特，因为仅仅通过画鸽爪子，我已经学会了怎样掌握线条甚至是裸体的秘诀”在学会了观察一样东西后，他掌握了观察和描述所有事物的关键。

艺术家们都知道，手工的技巧紧紧的依赖于观察的力量，事实上，很多艺术家都相信，手所画不出来的，就是眼睛所看不到的。“如果你不能在一个人从五楼掉到地面的时间内画出他的素描，那你就永远不能画出里程碑式的作品”凡高的目标是“作画的方式就像写下东西那样容易，······可以随心所欲再现自己在大的比例或小的比例上的所看到的东西”

写作也需要敏锐的观察，卡明斯说自己是“太阳底下一切事物的老谋深算的观察者。”

作曲家舒曼对音乐学生说：“努力区别音质和音调，钟表，布谷鸟，开窗----试着发现他们的音质”他认为耳朵对声音的敏感不仅可以通过音乐训练来培养，还可以通过听日常生活的声音来培养。另一个作曲家对民乐演奏家进行研究发现：“进行观察的人可以在一个星期内从他们那里得到够用一生的音乐灵感”与此类似，演员和导演认为“注意任何非同寻常的，与日常生活不同的行为，这能够训练感觉记忆和肌肉记忆，唯一能激发演员灵感的就是不断的，敏锐的观察生活中的每一天。

最为敏锐的观察者使用所有种类的感觉信息，最为伟大的发现常来自于能够“平凡中见伟大”的人们，即在平常的东西里发现特别令人惊讶的，特别有意义的美。并不是只有科学家才能从平凡中见到伟大，很多现代艺术家也集中精力对日常生活的价值进行思考。斯特拉文斯基说道“真正的创造者，有能力一直在自己周围最为平常的东西上发现最值得注意的地方”一舞蹈家说到，即使是最笨拙的动作也有去发现和利用的美的地方。她还让我们认识到，所有的动作都有美的地方，每一件事都有意义，而这种意义并不是显而易见的。

第四章 形象思维

斯坦梅茨发电机、变压器和其他使广泛用电成为可能的发明家。在通用电器知道他贡献的同事们把它称为“最高法院”，在他们看来，没有他解决不了的问题。斯坦梅茨具有极其卓越的图形想象的能力-——他能看到并不真正在自己眼前的东西。发明家拉克洛夫把它的成功归于视觉想象，他说“我经常在早上5点醒来，然后思考这个发明，然后在自己的大脑里把它想象成三维的，想象成一种被构建的东西，然后我用这个形象来实践，然后在起床吃早饭的时候，我经常走到椅子旁边，用绳子和封蜡做一个模型，它立即就能工作，因为我已经在大脑里完成了大多数的试验”

实际上，想象能够使所有职业的人受益。试着想象一个三角形，很少有人能睁着眼睛眼球不动就想到三角形，并把三角形叠加到他们所看到的任何物体上，然而这其中还有一些人，可以让这个三角形变化颜色，角度，大小和透视角度，还可以让它旋转，跳跃，从其它图形中穿越过去。斯坦梅茨显然就是这一种人。而且它的想象远比三角形复杂的多。

在广泛的意义上讲，想象是所有领域的思考工具，一诺贝尔奖得主说他每天开始的时候都要用大脑想象，想自己的房间，自己的家人，然后是街区，最后是全世界。这时他躺在床上，闭着眼睛。另一化学家说：“想象性的，开放性的，图画性的是我生命里非常重要的部分，我像疯了一样作白日梦，我可以想象到所有化学结构。另一个画家写到，我认为我已经能以拍照的样子看到东西，这是多么有趣。作家说，图形本身就是诗歌的最高境界和它的生命。许多小说家都意识到自己是“先看到”故事，然后才写出故事。而写作只是一个记录的过程。

艺术家，工程师，都存在一个共同的问题，就是怎样把事实和思想怎样从一个大脑转移到另一个大脑里，这样的精神怎样实现？通常都是通过形象。

莫扎特写到：“整部音乐，虽然很长，都在我的大脑里完成了，所以我可以像看一幅美丽的图画或雕塑一样一眼就看到我的音乐。”贝多芬则说：“在把曲子写下之前，我会随身带着他们很长时间，我改变很多东西，抛弃很多东西，一遍又一遍尝试，直到我满意为止，最后就像一尊雕像一样呈现在我的眼前，我就把它写下来。”这解释了为什么贝多芬在耳聋后还能写出伟大的音乐作品，因为他能在它的大脑里听到。“世界上最完美的乐器，就是作曲家的大脑，能够随意听到任意多个旋律，每一个可以想象到的音质和美丽的细微差别。

用声音进行思考，也解释了作曲家“无声的联系”，他们想象演奏自己的音乐。“我在飞机场的时候，我听到了自己即将演奏的曲子，而且我在练习每一个音符，每一个乐句，每一个和弦”与钢琴演奏和唱出来相比，我更多的是在头脑里研究音乐，许多作曲家一样都在听到音乐的同时在心灵的眼睛里看到了乐谱。相反，在他们看到乐谱时，却在头脑里听到了音乐。事实上，这里没有什么奇迹，音乐家培养听觉和视觉能力转换的方式与全世界儿童把声音同字母联系起来的方式非常相似——就是通过每天的练习。学习阅读是一般的听觉想象的很好的模型，因为几乎所有的人都在大脑里“听到”自己的声音在说出纸上的词汇。作家们也是这样，即使是在默读，我也能听到自己的声音，

第五章 抽象

物理学家沃森纳·海森堡把抽象定义为：“一种可能性，只用一种观点思考一个物体或一组物体，而不管物体的其他所有特征，抽象的本质是抽出一个与其它特征对比来看是特别重要的特征。”抽象可能并不代表整体的事物，而只代表它的一个或几个不容易看到的特征。不要单是看——要思考，找出在明显的特征之后所隐藏的让人惊奇的特征。用你的头脑去看，而不是用你的眼睛。

奇怪的是尽管所有的抽象都是简化，但最好的抽象都能提供新的、多重的含义和见解。能用简单来表达不明显的特征和暗含的关系。最简单的抽象往往是最难感觉到的，最难发现的，同时它们也能提供最为重要的洞见。比如数学就是一个除了抽象别无它物的领域。数学物理学家保罗·迪拉克认为：“数学特别适合被用来处理任何种类的抽象概念。在这个领域中，它的力量是没有极限的。”

语言中也有许多抽象，很多词，比如爱，真理，荣誉，责任都表达了很复杂的概念。文学的抽象比这还要深刻。“艺术的高级过程就是简化的过程，······事实上，那几乎是所有艺术的过程，找出我们可以忽略的传统和细节，但是仍然要保留整体的精神。”

身体的语言也是抽象的。那种本质的直接性充满了我们生活的每一个方面。

毕加索不断重复的说自己学会简单的直接的作画是多么的困难，而看到和表达复杂的现实却容易的多。实际上，抽象对于每个领域的人来说都是很困难的。

知道什么是抽象和抽象的重要性，这只是问题的一半，另一半就是怎样在复杂的表述中找到隐藏的简单的答案。很多人都犯的一个错误就是忽略了现实。“对于任何艺术家来说，观察自然风景都是首位重要的事，感觉首先要被经历，理解，然后进行净化，从而达到目的”毕加索说道：“为了达到抽象，总是有必要从真正的现实开始，在此之后，你可以去掉所有现实的痕迹，这时你已经留下了关于实物思考的不可磨灭的痕迹，是它让艺术家开始工作，激发了他的灵感，搅动了他的感情。”

我们还可以看到，对于一个事物可以有很多个不同的抽象，每一个抽象都可以阐述所隐藏的真理。我们甚至可以说，现实就是所有抽象的总合，并且，通过这些抽象，我们可以更好的理解现实。

抽象是一个不断深化，不断抽象的去粗存精的过程。

当词汇的描述变得越来越抽象时，，它常常会成为诗歌，很多科学家都意识到技术上的单词和概念有着诗歌的简洁的纯粹性。

所以抽象是从现实起步的过程，用一些工具去除多余的东西，得出关键的，也常常是让人惊奇的本质特征。

《天才的13个思维工具》—读书笔记（2）2007年06月06日 星期三 00:10第六章 识别模式（规律）

在很多信息放在一起的时候，我们所得到的是一个整体或是一个中间的空洞，这两个都有价值。“正确的定义你的问题，就是把这个问题解决了一大半。”知道自己所不了解的东西，知道自己不知道的模式，这些都和自己所知道的东西一样有价值。“正是无知的山峰促进了科学的进步”

玩七巧板游戏可以锻炼识别模式的能力。猜谜语也可以让我们认识到新的模式。

第七章 形成模式（略）第八章 类比

类比是指本来不相似的事物在功能上的相似。

我们怎样意识到音乐的共振会适用于原子，而原子的共振适用于医学？答案可以在类比中找到。思想不见得相同就可以发生共振，就像琴弦的共振和原子中电子的共振。有人认为共振的琴弦具有“让其他琴弦振动的特征，而且一个思想也是以同样的方式召唤出第二个思想，然后两个思想一起招唤出第三个，然后再这样继续下去。”这种思想连续下去没有限制。类比能阐明无法接近的世界。

我观察，我感觉，我思考，我想象，我把无数的各种各样的印象，经历和概念联系起来······凯伦不会听却学会了说，不能看却学会了写字和打字，能够通过盲文学会了6种语言。提出了许多强有力的观点，跨越了视觉，听觉的世界与又聋又盲的人的界限。我们意识到，并不是我们的感觉在限制我们或是解放我们，而是我们通过与已知进行类比来阐明未知的能力。学习本身就依赖于类比。

这个过程的关键是，类比不同于相似。类比承认两个或更多的不同事物之间的内在联系。而且所呈现出的他们的关系常是一个理解，一个还没有理解。

文学里常用比喻，就是一种类比。

艺术家的多样的兴趣是他们的类比的一个经常来源。

第九章 身体思考

用身体思考依赖于我们的肌肉运动，身体位置，平衡和触摸的感觉。当你不许思考，就能及羽毛球的时候，实际上你已经喜欢上这样运动了。他们已经存到了你的肌肉里。

可以在大脑里想象出身体紧张或触摸或运动的感觉，但我们大多人已经忽略了这样的感觉，因为我们很早就受到训练用词汇来描述和转化他们。“我们的身体，四肢是有智力的”

音乐是来自于本体感觉的思考。如果不感觉到演奏音乐所要求的动作，那么也就无法理解音乐。小泽征尔是波士顿交响乐团的指挥，有人描述“他用全部的身体进行指挥，他用舞蹈跳出音乐的形状”弹钢琴是一种完全的身体运动。它要用到你全部的身体。网球拍，画笔，大提琴变成了我们的延伸，实际是我们的假肢，我们用它来控制世界。他们是“额外的骨头和血肉”人们会把身体感觉投射到每一种需要熟练使用的工具上面。“你必须忘掉一切杂念，把大脑清空，而是锄耕机变成你的胳膊的延伸”

“每一个都自动的储存在我的大脑里的某个地方，通过练习回忆和再现，我比以前要清晰十倍。”“我听到的，我会忘记，我看到的，我会记住。我做过的，我会理解。”这是中国的名言。做事并且记住做事的感觉与学习用身体思考是不可分割的。所以，不要简单地坐在那里。到处走走，你就可能发现你正在解决只有你身体才知道答案的问题。

第十章 同情理解

小说家，演员都有“进入另一个人皮肤下面的非凡体验”巴赫认为“一个音乐家如果不能感动自己，他就不能感动别人，你必须感觉到自己想在观众中引起的所有的感觉”音乐家就是能表演很多风格，很多角色的演员。

作家，演员等的一个重要方法就是不但从外部客观地理解他人，而且从内部主观地进行理解。佛教禅宗的全部哲学都无法脱离一个思想，即一个人必须与其静思的物体和二为一，必须忘掉自我的感觉才能就像事物不具有他性一样理解事物的他性。

猎人的最为古老，保留的最好的打猎方法之一就是把自己以前猎到的动物的皮毛穿在自己的身上，以混入到自己的猎物中，为了做好这一点，他们必须学会像动物一样思考和行动。到现在这种猎物可以是细胞生物，物理过程，生物过程。

怎样才能学会同情理解呢？记住莎士比亚的名言“玩耍就是了”注意观察研究其他人的的行为和事物。还可以假设，假设他的世界就是你的世界，他的感觉就是你的感觉。文学也是一个途径。在同情理解方面，整个世界就是一个想象的舞台。

第十一章  空间思维

像台球这种简单的运动从二维空间拿到三维空间后，他可能变得非常神秘，以至于最好的数学家才能玩得了。空间思维包括从二维移动到三维。转换维数，例如把三维的物体投射到二维平面上，是文艺复兴时期最伟大的成就之一。投射的方法直接来自于透视法的发明。尽管透视法很神奇，但它只是一种简单的映射，实际上可以通过透视素描的一种变形方法叫做“改变形状”把任何物体或者任何维度的物体映射到任何其他物体上。映射，透视和失真变形都有着良好的数学基础，但这还只是开始，例如还有分数维度的难度，我们常用整数来考虑维度，那就还有分数的。还有比例的变化，把一个建筑模型放大成真实的东西，这就要计算材料的强度和弹性，落下的体育馆屋顶就是风险。飞机的模型变成真的需要考虑材料所承受的压力等许多情况。同样，缩小也会遇到种种问题，因为微观世界我们并不熟悉。

第十二章 模型

现代战争常会用蓝方和红方来制作模型战场。所有的模型都是对一些因素的抽象，这些因素被认为是结构和功能的关键决定因素。他们能体现抽象和类比，也能体现维度的变化。这模型可以缩小，可以放大，可以是物理的，数学的，现实的或不现实，这一切都取决于他的使用目的。一旦模型制作完成，还要对它进行试验和玩耍来确定模型的好坏。关于模型的最重要的是模型能给制作模型的人对物体和思想的完全控制。就像毕加索所说“给一个物体制作模型就是占有了这个物体。”“我更喜欢可以控制的小的模型，这样你就像上帝一样。”

我们想要理解周围的世界，那我们就要创造有用的和多重的模型，在鼓励和训练之下，这个任务可以像玩耍一样简单和自然。

第十三章 游戏

有着各种各样的游戏，棒球，射击，滑冰，台球，投硬币，扑克牌，象棋，跳棋，······

游戏仅是为了取乐，为了没有责任的做事的快感，在游戏中，不存在着成功或失败，不存在金钱的利益，也没有必须达到的目标。游戏打破了严肃活动的规则并建立了自己的规则。游戏也是有用的，我们要设法取胜，我们要遵守规则，所以我们要积极思考。谜语游戏，词语游戏，玩具都会培养有用的知识。他让我们没有压力的进行学习，没有恐惧的进行探索。

第十四章 转换

仔细看一看任何创造性的努力，你就发现，思想和洞见一定是使用了很多思考工具才被转化为一种或几种可以表达的语言的。例如我们背诵一些拗口的东西，我们也可以转化为我们所容易表达的东西，“缬异亮苯甲色苏赖”来记忆8种氨基酸。实际上，转换思维已经打破了学科之间的界限。转化越是出人意料，就越有可能产生让人惊讶的洞见。

第十五章 整合

转换的思维无法避免的后果就是整合的理解。不管人们是不是有意识的对感觉进行融合，思考就是依赖于对感觉和知识的联系和关联。

第十六章 整合教育

1，在获取各个具体学科的知识外，我们必须学会普遍的创造过程。教育的目的应该是理解，而不仅仅是知道，它的着眼点应该是主动的学习和创造的过程，而不是对事实的被动获取。主动的理解要求有被动的知识，后者是前者的基础。

2，应学会创造过程所必需的知觉的和想像的技巧。

3，必须实施多学科教育，艺术和科学是同样重要的。

4，用具有创造性的语言来描述整合我们的课程。

5，应该强调具体学科之间的跨学科部分。

6，学会使用已经成功跨越了学科界限的人们的经验，以他们作为我们的榜样。最好的学习方法是观察别人，学习他们的技术，见解和过程。要创造性地模仿和创新。

“看到过自然的壮观的人，一定会成为一个喜欢诗人或博物学者”

战略思维能力是领导干部应具备的基本素质之一.我们所说的战略思维能力,指的是自觉认识事物发展的客观规律,确立战略观念,进行战略思考和研究,在工作中能够高瞻远瞩,对带全局性的计划和策略,对决定全局和长远的重大事情,进行正确筹划和实施.面对新世纪国内外形势的深刻变化,要经受住长期执政、改革开放和发展社会主义市场经济的考验,领导干部特别是年轻干部必须努力提高自身素质,提高战略思维能力,这在今天比以往任何时候都更加具有重要性和紧迫性.如何提高自身的战略思维能力?一要努力学习和掌握马克思主义的世界观和方法论.战略思维能力本质上是一种理论思维能力,需要深厚的理论功底.领导干部特别是年轻领导干部必须高度重视和不断加强唯物辩证法和历史唯物论的学习和研究,以期提高自己理论思维的素养和水平.二要自觉加强党性修养.战略思维主要管的是方向性、宏观性的问题和长远性、发展目标性的大事,因此不能不讲政治.讲政治才能够看清目标、顾全大局,正确处理局部和全局的关系,妥善解决眼前利益和长远利益的矛盾,维护国家和民族的根本利益和整体利益,排除各种诱惑和干扰,在战略选择面前作出正确的决断.三要努力扩大知识面.战略思维作为较高层次的综合性思维形式,要求领导干部具有比较广博的科学文化知识结构.我们的年轻干部不但应当具有胜任工作的专业知识,还应当尽可能多地拥有一些哲学、历史、政治、经济、文学、科技、法律等方面的学识.四要善于总结实践经验.实践可以使我们获得丰富的阅历,因而见多识广,眼界开阔.战略思维能力不是人天生具有的,它离不开向实践学习.领导干部特别是年轻领导干部应当注重实践,善于在实践中锻炼,在实践中总结经验.只有从丰富的实践经验中汲取营养,不断从感性认识上升到理性认识,才能把握客观事物的规律,从而获得高超的战略思维能力. 辩证思维也称矛盾思维,是指按照辩证逻辑的规律,即唯物辩证法的规律进行的思维活动.是一种以概念本性为研究对象的逻辑理论思维形式. 最主要的特征是,事物普遍联系的观点、发展变化的观点和对立统一的观点. 辩证思维的作用： 1、 统帅作用.辩证思维是高级思维活动.它根据唯物辩证法来认识客观事物,能够反映事物的本来面目,揭露事物内部的深层次矛盾.它从哲学的高度为我们提供世界观和方法论,所以,它在更高层次上对其它思维方式有指导和统帅作用. 2、 突破作用.在活动中经常遇到困难,不是发现不了主要问题,就是因提供不出解决问题的有效方案而导致“僵局”,往往在此时,辩证思维就成了我们打破僵局的有力武器.3、 提升作用.人类对事物的认识总有一个由浅入深,有感性认识到理性认识的过程,上升为理论,这就需要辩证思维帮助我们全面总结思维成果,提升成果的认识价值.系统思维是一种逻辑抽象能力,也可以称为整体观、全局观. 系统思维,简单来说就是对事情全面思考,不只就事论事.是把想要达到的结果、实现该结果的过程、过程优化以及对未来的影响等一系列问题作为一个整体系统进行研究.系统思维,是在考虑解决某一问题时,不是把它当作一个孤立、分割的问题来处理,而是当作一个有机关联的系统来处理.掌握系统思维方法,是当代天才最需要的基本功之一.宋代符详年间,皇宫中发生火灾,要进行皇宫修复工程.当时需要解决"取土"、"外地材料的运送"、"被烧坏皇宫的瓦砾处理"等三大问题. 主管该工程的是大臣丁谓.他便在皇宫前的大街上挖沟取土,免去到很远的地方取土；很快,路就挖成了大沟,又让汴河决口,将水引进壕沟.于是各地运来的竹木都被编成筏子,连同船运来 各种材料,都通过这条水路运进来.皇宫修复后,他又让大家将拆下来的碎砖瓦连同火烧过的灰,都填进沟里,重新修成大路.经过这一处理,不仅节约了大量时间,还节省了上亿的经费.丁谓智修皇宫,就是充分把握要素之间的相生关系,使系统往有序和互相促进的方向发展,同时又把握了系统要素的相克性质,促使其向反面演化,最终达到最理想的效果.创新思维就是指发散性思维,这种思维方式,遇到问题时,能从多角度、多侧面、多层次、多结构去思考,去寻找答案.既不受现有知识的限制,也不受传统方法的束缚,思维路线是开放性、扩散性的.它解决问题的方法不是单一的,而是在多种方案、多种途径中去探索,去选择.创造性思维具有广阔性,深刻性、独特性、批判性、敏捷性和灵活性等特点.创新思维,最大的特点是相异性、差异性.同样一个问题,不同的人他有不同的思维,不同的人他有不同的思维,同样一件事,不同的人他有不同思维的.我们举一个案例,两个推销人员到一个岛屿上去推销鞋.一个推销员到了岛屿上之后,气得不得了,就发现这个岛屿上每个人都是赤脚.我们重庆话叫做打光脚板,赤着脚没有穿鞋的.他气馁了,没有穿鞋的,推销鞋怎么行,这个岛屿上是没有穿鞋的习惯的.马上发电报回去,打手机回去,鞋不要运来了,这个岛上没有销路的,每个人都不穿鞋的,这是第一个推销员.第二个推销员来了,高兴得几乎昏过去了,不得了,这个岛屿上的鞋的销售市场太大了,每一个人都不穿鞋啊,要是一个人穿一双鞋,不得了.那要销出多少双鞋出去,马上打电报,空运鞋来,赶快空运鞋.同样一个问题,你看,不同的思维得出的结论是不同的.如何在部队建设的实践中提高创新思维能力?首先,必须具有强烈的事业心和责任感.具有高度使命感的人,才会有强烈的忧患意识,才能“先天下之忧而忧”,战胜自我,不断寻求新的突破.不可想象,一个对自己所从事的工作毫无责任心的人,会积极主动地开动思维机器,创造性地解决遇到的问题；其次,必须用人类的文明成果武装自己的头脑.任何创造都是对知识的综合运用.创造性思维作为一种思维创新活动,必然要以知识的占有作为前提条件.没有丰富的知识作基础,思维就不可能产生联想,不可能利用知识的相似点、交叉点、结合点引发思维转向,不可能由一条思维路线转移到另一条思维路线,实现思维创新；第三,必须坚持思维的相对独立性.当前,阻碍部队现代化建设实现跨越式发展的原因很多,缺乏创新思维是一个重要因素.从实际情况来看,一些单位的工作和建设之所以难有大的突破,发展步伐不快,一个重要原因也是因为思维方式陈旧,缺乏创造性思维.比如,有的人一遇到问题,就去翻本本,本本上没有说,前人没有做,就不敢想,不敢做.有的受传统观念的影响,思维陷入定势,常常是固守常规,遇事总是习惯用固定的思维方式去分析事物和寻求解决问题的方法和途径.还有的过于盲从,不善于独立思考,人云亦云,抱残守缺.新形势、新任务要求我们必须解放思想,与时俱进,冲破因循守旧、抱残守缺的思想观念,牢固树立创造性的思维观,运用突破传统思维定势的新方法去研究新情况,解决新问题.以思维创新带动理论、制度和体制的创新,开创改革的新局面,开辟发展的新境界.思维的相对独立性是创造性思维的必备前提.爱因斯坦说过,应当把发展独立思考和独立判断的一般能力放在首位.

Home > 创造之路 > 思维致胜：掌握思维方法的九个基本原则
思维致胜：掌握思维方法的九个基本原则

2010-01-15 | 发布： 左岸 | 分类：创造之路 | 标签：创造+原则+思维+方法 | 阅读: 16,812 VIEWS


来自:人月神话的BLOG
原文:思维致胜：掌握思维方法的九个基本原则-(原文古老虾)

读书可以让人变得智慧，书是某一领域深有研究人士的体会，读一本好书，正如站在巨人的肩膀前进一样，好书是更高的起点，不用重复发明轮子。本人除 却关注经济、管理、历史、国学、E化主题外，新近系列化研究佛教、心理、修炼和成长主题，我把她叫做灵修。其中很重要的一部分内容就是思维模式，前期我就 习惯、思维方式等主题也发表了评论，现就思维方法主题编写读书评论，以飨读者。

一、思维的前提

自然世界和人类世界是极其复杂的，在极其复杂的背后，隐藏着简单的一面，这就是与现象对应的本质。通过本质来了解现象，是思维的前提。一个人思想必然以自身为思考起点。因此，世界上不同的人，必然会有不同的意见。一个观点对于我们来说是正确的，但是，对于其他的人未必尽然。宇宙的物质世界是客观存在的，我们考虑的时空是常规的。时间是不可逆的，我们生活在当下，在现在，而不能生活在过去和未来。(思维过程应该体现时间学和空间性，空间性又需要体现整体和局部。)

思维的内部涵义由平衡法则、人本法则和智慧法则来说明，借由三个法则，可以理清思想究竟是什么的某种结论。归纳地讲，思维就是围绕着平衡的指向、通过计算 力的“智”和感悟力的“慧”来探究人与自然、人与社会及人与自身精神世界规律和秘密的思想活动，他是我们所有判断和行为依据的根源所在。

二、思维的总指向：平衡的法则

人生是不同目标的平衡过程。人生表面上看是看谁能够获得更高的目标，实际上是看靠近目标的过程当中，谁的平衡做得好，这一过程总要经受看得见和看不见的平 衡因素的影响，厘清各种因素的存在状态和作用方式，这就是平衡的法则。平衡是相对的，是前进中的平衡，变化中的平衡，动态的平衡。平衡是不平衡的特例，不 平衡也是平衡的特例。平衡有阶段性，分旧平衡和新平衡，我们要善于发现旧平衡里面的积极因素，克服消极因素，推进平衡的发展。平衡也有大小区分，同一系统 内，小平衡要受大平衡的影响和制约，比如小局服从大局。大平衡总是指引小平衡的生存和发展方向，所以，做事眼光要放远。

不平衡是平衡的需要，平衡是不平衡的趋势。遇事要根据事情的不同性质注意判断和预设不同的平衡点。注意保持和远离平衡与不平衡的限度。注意分阶段保持平衡。注意小平衡要服从大平衡。注意平衡与不平衡之间的辩证关系。(静态没有绝对的平衡，平衡是动态的，而动态平衡则是系统思维之基础。)

三、思维的总内容：人本的法则

人在社会上生存，都离不开三件事情，即找准定位、理清关系、反省提升。人是人的思维活动的起点和终点。一件事情让你做选择，首先是根据实情性质不同，决定自己是选择还是不选择或者让出选择权。

人的思维内容包括人与物质世界、人与人及人与精神世界关系三方面，即天人关系、社会关系和本我关系。记着自己该得到的，也不要忘记人家该得到的。人与自然之间应多用趋势，少用提醒。多用与少用，要看人打破人与自然平衡以后要多长时间是否有办法建立新的平衡。

人与人之间关系处理一是要认识当时当地的正确位置，也就是说对自己的定位要很清楚，二是定位清楚后调整各种各样的距离。定位和距离要根据不同条件变化而调整，距离的远近只是一种表现，根本在于沟通与理解。如果没有沟通和理解，任何何距离都是假的。

人与本我关系主要集中两个方面，一方面是合理调整自己的欲望，另外一方面是审美趣味的提升。学习是进步的阶梯，是知识和人脉的双重阶梯。学习也是社会发展的要求，自身眼界开阔的需要。

四、思维的总方式：智慧法则

思维的最基本形式是“智“、”慧”，世界上很多事情很难用一种方式去衡量，有些可以通过量化，有些必须通过感觉，感觉到什么程度，那就是智慧。生活的价值很难用一把尺度去衡量，每个人对生命和生活的意义的理解都是不一样的。对每一件事情的具体计算不能代替对生命的感悟！

思维方式都是基于计算和感悟两个维度作为根本的思想方式。计算就是可以根据已知条件，推算出想要得出的结论，是一种对事物的精确把握能力。感悟就是抛开精 确尺度而依靠综合的感悟能力来获得某种结论。感悟是带整体性的、不确定的和超脱感的；计算是带局部性的、精确性的和可控性的，如中国古人说的那样，做人就 要“外圆内方”，外圆是感悟，内方是计算。感悟和计算在任何时候都是并存，感悟往往大于计算，感悟和计算具有不同的运用手法。感悟主要是扩大视角，是宽，是容，是合，主要指向大的方面，由大入小，把面得范畴照顾到，减少摩擦、减少损耗，把正向的方向搞清楚，以利于不败之地。计算主要是集中视角，是窄，是细，是分，在感悟的统筹下，把细部关系算清楚。要细就要细到相当的程度才算数，算不细，没有算到实处，算了也是白算，反而会坏事。(思维只有两种方式，一种是偏经验和主观的感性思维；一种是偏数据和客观的理性逻辑思维。感性思维更多要依赖于情商，而理性思维更多依赖于智商。)

出了问题，要果断、及时地处理，不然损失会更大。看似吃了亏，其实有更大的利益原则，对别人有高度负责的态度，总是会得到回报。对问题的得与失要有清醒的 分析，眼光要放远一些。人与人之间常常因为一些彼此无法释怀的坚持，而造成永远的伤害。因此，我们必须要从自己做起，开始宽容地看待他人，帮别人开启一扇 窗，也就是让自己看到更完整的天空。

五、思维的总高度：超越法则

我们每个人做事情都有自己原来的心理底线，尤其是涉世不深的年轻人，要常常记得打破自己的感觉底线，因为这个底线实际上没有到底。

超越就是超越相对层次，唯有了解他，才能超越他，唯有超越他，才能了解他。要想超越先要不超越，首先要了解事情所涉及的不同层次弄清楚，把某一层弄清楚 了，才能跳到更高的层次。要想超越必须先养成不同层次看问题的习惯。超越的相对层次的真正含义是能够在各种层次中主动、自由的出入和变化。

面对一件事情，首先要进入事物的相对层次中去，而不要贸然肯定或者否定事物的相对面。声音喊得响的人，也许有本事，也许没本事，但是没有本事的人居多。真正有本事的人会有适当的方法展示自己。(超越法则的体现就是知识和技能通过思维能力的提升转化为方法论和智慧。)

六、思维的总维度：时空法则

任何事情都要时间的保证和空间的容纳。时间的消长和空间的收缩往往互为因果关系。时间即阶段性把握，空间即分布性把握。时间要求我们正确认识所处阶段的特 点，做恰当的事情，如人生发展所处初级阶段，就要做初级阶段的事情，高级阶段，就要做高级阶段的事情。空间要求我们弄清楚事情的自身范围，要划一个参照 系。

时间和空间可以在多个层面交叉和转换。根据需要不同和条件不同，我们有些时候是拿时间换空间，有些时候是拿空间换时间。如果有必要，首先可以选择拿空间换时间。同时想干好很多事情，往往干不好，人的精力和时间生命是有限的。

七、思维的总尺度：紧张度法则

我们平时在乎什么，不在乎什么，都是指一个关注度，进而表现紧张度。我们对任何事情都有一个紧张度的基本格局，而她最终影响思维的基本尺度。一个人的态度 不同，格局也就不同。除却少数特别迫不得已的事情，多数情况下，紧张程度是由自己造成的。在感觉紧张与难于排解的时候，也许我们已经失去自我的主导权。

紧张度是事物相关因素之间的关联程度、重视程度、影响程度等松和紧的问题。对事物基本关系因素紧张度的根本判断，决定思考和行为的根本战略，也是一切判断 的前提和基础。影响紧张度判断有主观和客观两方面，主观来讲，调节紧张度和学识修养等有关。客观来讲，要看外部情况而定，如经济形势等。

紧张和放松可以同时存在，紧张的时候可以想到放松，放松的时候可以想到紧张。对于紧张度的把握要尽可能地变被动为主动。光说是不管用的，得有办法，多学习，多掌握情况，多思考，多增加能力。

八、思维的总变化：矛盾法则

事物变化的基本矛盾的思考是我们思维的基础之一。就如河水和河堤可以看做一对矛盾，相安无事和冲突都是一种局面。矛盾法则是事物变化的总规律，就如古人说 的阴阳互变趋中。矛盾或阴阳都是以事物的一分为二观念为基础的，一分为二是世界的基本特征，凡是一切变化都是以此为基础。一分为二，合二为一，是万事万物 属性和运动的根本特征。

任何事情无论大小性质不同，总能找到它的对立面。要有变化角度看问题的习惯。要分清楚一面和对立面哪一个是更主要的，根据平衡法则判断它的运动趋向。矛盾有主要、次要矛盾，还有一个系统内的矛盾主要方面和次要方面，主次矛盾会相互转换。矛盾方面的统一是基本的，但永远有差别，对立是暂时的，但永不消失。统一是趋势，对立同样也是趋势，要视条件不同而已。(系统思维= 平衡法则 + 矛盾法则)

不管对谁，都不一定要把心里话说得那么透底，每个人的立场和出发点都有不一样的时候。判断别人是否对你真好，最好不要凭表现现象下结论，要看实在的东西， 自己要有对真实程度认识的主观意识。好事会变成坏事，坏事也会变成好事，任何事情都具有两面性，能够清楚认识到转化条件，那就是高手。

九、思维的总态度：实践法则

实践是检验真理的唯一标准。思维需要一个落地的过程，这就是实践法则。眼见不一定为实，耳听不一定为虚，心想也不一定为成。做得结果，唯一一个就是看是否管用。要做到实事求是，需要通过对比的方法来完成。

“任何历史都是当代史”，任何事物都有现代进行时的当代属性，强调要考虑事情的特殊性，要把当时、当地、当事的特殊条件看清楚，特殊是相对联系而言的。

看待事物的角度可以无穷多个，哪怕同一件事情，不同的人，在不同层面，不同角度，对事实的描述不一样，由此得出的看法、判断也不太一样。因此，对事实的说明，一定要从最基本，最少分歧的层面和角度比较较好。

从实践意义上讲，我们必须有随时随地准备对付新发生的事情的意识。前一刻和后一刻的事情都会有所不同，时刻注意这一点，不要僵化。现实中首先需要弄清楚解 决实际问题的目的，没有目的，实践就没有意义。针对问题做深刻的调查研究，关键要细致，如果不细致，等于没有做调查研究。

现实中，即使是再十拿九稳的事情也会有变数，要有充足的准备，把意外当做必然。高学历不等于一切，工作能力=做事+做人。实事求是是一个人成熟的标志！知识打基本，实践出能力，实践过程是人的能力最终形成的不二法门。

十、思维的总过程：循环法则

宇宙最基本的循环是从有序到无序，从可测到不可测的循环。事物总是在有序和无序，可测和不可测之间摇摆。思考问题的时候，有些事可控的，总也有不可控的。

循环的基本涵义是淡化结果，重视过程。读书是为了获得一种学习能力和拓展能力。人的一辈子完全可能做比现在做的多得多，也更精彩得多的事情。人的潜能很大，人生的圈子可以滑得更大，生命的精彩不止一种或两种。

总结：高妙的思想方法来自于深刻的哲学修养，深刻的哲学修养来自于独立自由的人格精神。所以，凡事都要立定脚跟，要有独立自由的思想精神。

第一看位置，前后与左右，根据何而来，要往去哪里。时间和空间，就是两条线，目的和对象，分明是界限。
第二看动机，矛盾是根源。一分都为二，要好也热闹。才有不平事，立刻起波浪。前因和后果，解决靠实践。
第三看尺度，平衡是关键。快慢有节奏，松紧不能断。条件会变化，他变我也变，流水不争先，和谐是真言。
第四看层面，角度千千万。里看外也看，眼光要常换。登高能望远，秋毫也能见。一层又一层，进出都自在。
第五看途径，办法有很多。大处来着眼，小处要细算。发散与聚合，顺逆都能得。巧未必胜拙，胸中有定见。天地有奥妙，万物皆循环。



如何才能真正的提高自己，成为一名出色的架构师？
想成为一个出色的架构师，但是学得知识不是很系统。
目前属于自学，设计模式，算法导论，编译原理，UML2.0等都在看。
自学可想而知，肯定不够系统，不够全面，也不科学。

身边也没什么人可以在这方面教导我，工作已经3年了，每次换工作都是呆在小公司，技术这块的基本自己来抗，很多东西都自己摸索的。去年开始到现在完成了算是从头到尾自己全权负责的项目（PHP-MYSQL-PYTHON，PHP的MVC框架自己写的），做下来发现自己有很多的不足。

除了看书，自学，看看MIT的公开课，还有什么办法可以让自己有很大的提升空间？
2 条评论  分享
按投票排序
按时间排序
24 个回答

赞同
158

deviJi，喜欢探险，喜欢计算机界的一切新技术
Lei Mou、知乎用户、WindLife 等人赞同
架构师是一个充满挑战的职业，知识面的宽窄往往决定着一个架构师的架构能力，所以在这一点上我比较赞成你的学习方式，就是要阅读大量的技术书籍，但我希望你不要仅限于软件相关的书籍，经常泡技术论坛，一方面可以结交朋友，一方面可以增加自己的知识面。
公司的大小往往决定了所做的项目规模，一般的大项目不太可能直接总包给小公司去做，但这并不妨碍小公司可以分包到大项目的一部分。在做小项目的同时也可以积累丰富的经验，我自己就是一个这样的例子。
我在小公司混迹了5年多，其中也偶尔有1两个大公司，比如大唐电信，但是基本上都是小公司，从基层的程序要到公司的开发总监都做过，甚至自己还设计过包括LED显示屏，密码键盘在内的收费系统，自己联系厂家OEM，当然这些今天已经广泛应用了，当时我们的客户用上之后还是非常震撼的。
知识面的宽广对于一名出色的架构师来说是必不可少的技能，也许很多人对架构的理解还停留在设计模式，重构，SOA等等的软件层面，然而这仅仅是非常基本的东西，架构师的脑子里不光需要知道让软件如何高效的运行，还需要知道如何去结合网络，存储，甚至一些文件系统的特性，比如GFS，NFS，XFS，NTFS等等，而且架构师还需要知道一些编程语言的特性，C，C++，Java，PHP，Python，Lisp，JS等等，现在是一个混合编程的时代，只了解一种语言，即使再精通也会使你在架构系统的时候受到很大的局限性。
再有一点，架构师需要对数据库技术有深刻的认识，因为现今是一个信息时代，大量的信息都是需要存储并检索的，数据库设计的不好，将会严重影响系统的性能，而这一点往往会被我们的设计人员忽略，他们只知道遵守那些范式而不会结合数据的特性去设计数据库。
看你的编程情况，你好像做PHP开发比较多，PHP比较适合B/S结构的应用开发，这会限制一个架构师的思路，我建议你再学习一门适合做C/S开发的语言，拓宽自己的视野。
从一个程序员到架构师是一个很大的变化，架构师需要从大的方面考虑，而不只是考虑这个模块该用哪种设计模式去开发。不能急于求成，也许是我自己变化的比较慢，我用了10年的时间，这10年里，我使用超过一年的编程语言包括了delphi，C++，Java，python，使用的数据库包括了oracle，infomix，sybase，sqlserver，mysql，javadb，sqlite等等，使用过大型机，小型机，服务器。unix，linux，windows都至少做过两年以上的开发，这些使用和开发的经历会大大增强一个人在做架构师这个职业时的技术素养。
总之，想要成为架构师，需要有耐心，不断学习，拓宽自己的视野，不仅仅局限于自己眼前的项目，关注开源技术，关注热门技术社区的新动向。



知乎用户，IT领域，网名人月神话。微信公众号: hemi…
刘颜彬、陈续缘、zf zhu 等人赞同
06年写的如何循序渐进向dotnet架构师发展，可参考：


微软的DotNet开发绝对是属于那种入门容易提高难的技术。而要能够成为DotNet架构师没有三年或更长时间的编码积累基本上是不可能的。特别是在大 型软件项目中，架构师是项目核心成员，承上启下，因此RUP方法论也认同以架构为核心，体现4+1视图在整个软件开发过程中的重要作用。架构人员既要精通 技术，又要熟悉业务，而且基本对软件生命周期各阶段的相关技术都需要有相关的积累和知识储备，而这些不经过多年的磨练是很难达到这个高度的。

要成为一个合格的架构师首先必须是一个合格或优秀的编码人员，对于开发来讲编码始终都是最重要的一项技能，在编码过程中只要自己善于去思考和分析问题，就 可以多学到很多相关的知识和技术。所以我们在开发过程中一定要注意新知识和新技术的学习，前人经验和成果的学习。编码过程中应该去思考的一些问题有：

1.在编码过程中自己是否做单元测试，是否使用相关工具做单元测试，如果没有的话是什么原因无法把单元测试做起来？
2.自己编码的泄露率情况，编码泄露的BUG的原因分析
3.是否有意识的对代码进行重构，重构过程中是否引入了相关设计模式的思想？
4.是否对C#语言的一些高级特性进行学习，如反射调用，异步处理等。
5.是否对Remoting和WebService两种分布式技术做过研究和对比分析？
6.是否经常研究开源项目和开源代码，如Duwamish，PetShop，NUnit,Enterprise Library，Nant等
7.是否对对象持久化机制和O/R Mapping等相关技术做过相关的研究
8.平时在编码过程中是否注重公用组件和公用类的复用和抽取
9.自己在平时工作和学习中是否经常开发些小工具提高工作效率，巩固学习知识

设计和编码其实是密切而不可分的，对于严格将设计和编码分开的瀑布模型一般也仅仅在大型项目中应用。而及时编码和设计分离，也不是将编码人员不需要思考， 编码活动始终是一项创造性的劳动，如果否定这个观点那就代表编码过程完全不需要人员介入而可以完全自动化。因此在这里谈设计主要还是指设计人员的系统化思 维能力，设计人员应该比开发人员站高一个层次来分析和思考问题。设计人员最重要的一个技能就是现实->抽象的转换，而这个就需要谈到方法论的问题 了，技术人员需要积累面对对象分析和设计或结构化分析知识的积累，需要有较强的数据库分析和设计能力。一个设计能否成为很好的架构师关键就在这种积累的深 度和广度上面了。

因此在设计过程中应该考虑的问题有：
1.你现在分析和设计能力能否胜任大中型的应用系统还是只是独立功能分析和设计？
2.设计过程中是否有意识的考虑到组件的复用和相关接口设计准则。是否能够很自然的将分析模式，设计模式的相关内容应用到自己的设计过程中。
3.是否对XP，RUP，面向对象，结构化等方法论都有过较系统化的学习和思考。
4.是否真正理解系统功能需求和非功能需求对系统设计的不同的指导作用。
5.对自己设计的功能是否会根据后期的变更来反思自己的设计为何不能很好的适应变更？
6.是否在设计过程中经常自己开发些原型来对自己的设计思路进行验证？
7.是否专注技术的同时开始专业业务流程的分析，关注业务建模？

如果我们在设计和开发过程中经常关注这些知识和技能的话，成为一个合格的架构师是早晚的事情。平时能够胜任工作开发用到的知识和技能是微不足道的，如果自 己不是有意识的去学习这些知识的话，那技能是很难得到进一步提高的。我参加过两次微软的架构师培训，在北京的微软架构峰会上也有机会专门参加了 P&P Workshop的学习，培训老师是微软总部SmartClient Architecture and Design Guide一书的作者Edward A.Jezieski，让我感受最深是老外深刻的技术底蕴，对程序开发的执著。

对于DotNet架构经常用到的知识和技能储备有
1.RUP方法论，4+1视图。用例驱动业务建模->分析模型->设计模型
2.用例模式->分析模式->设计模式
3.常用的分布式技术
4.对安全，异常，日志，性能等非功能性需求的关注
5.对应用系统整体业务的关注

相关的一些参考书籍(微软网站和电驴都可以下载到)

微软网站提供的参考书籍
Enterprise Solution Patterns Using Microsoft .NET
.NET Data AccessArchitecture Guide
Application Architecture for .NET:Designing Applications and Services
Caching Architecture Guide for .NET Framework Applications
Designing Application-Managed Authorization
Smart Client Architecture and Design Guide

其它架构方面的参考书籍
Software Architecture In Practice
Pattern-Oriented Software Architecture
The Art Of Software Architecture
Beyond Software Architecture

模式方面的书籍
Analysis Patterns
Design Patterns - Elements of Reusable Object-Oriented Software
Applying UML and Patterns
Design Patterns Explained
发布于 2012-01-16  3 条评论

赞同
23

陈甫鸼，生长于闽，求学入秦，漂泊适燕，实秦人也。
Lei Mou、知乎用户、红浪枫林 等人赞同
从楼主题目里描述的背景出发，我的建议是这样的：
对计算机这种工程学科，自学不一定不科学，但是要保持大量的实践。
为一个成型的产品Troubleshooting是进入架构领域的好办法。有一点必须强调：它不一定得是优秀的成熟产品。对善于总结的人来说，烂产品提供的反面教材从某种角度上看更加珍贵。
无论Troubleshooting经验如何丰富，最终我们必须要得到自己设计的机会。这是从经验积累落实到架构能力的唯一方法。如果条件许可，参与开源产品其实是个很好的机会（当然有的公司明令员工除非特许否则禁止参与开源项目，比如微软）。
具体用什么技术前面很多朋友都有精彩论述，我一做驱动的，就不多啰嗦了。

还有一点必须指出的是，尽管我也认同架构的重要性，但从楼主自己说的自学内容（目前属于自学，设计模式，算法导论，编译原理，UML2.0等都在看）来看，我感觉楼主还没搞明白架构师究竟是什么。如今业界人人都在讲架构，但所谓架构师细分起来实际上有很多种，即便只是算软件行业经常要打交道的（也就是说芯片架构师不算），我见过的情况就包括如下：
网站基础设施设计师。比如一个能承受百万级访问量的网站该如何配置服务器等。这种架构师关注的是如何配置异地服务器，如何分流请求，如果做负载均衡、备份和同步等等。
IT基础设施设计师。这种架构师和网站基础设施的架构师有一定交集，除此之外经常还需要考虑跟硬件有关的话题，比如机房空调温度，UPS，带宽升级等等。
软件设施设计师。这种架构师经常要负责对软件系统使用的部件做选择，比如安全系统上使用的是Kerbero还是SSH，图形系统选择本地UI还是跨平台库，网络协议或文件格式使用公开的标准还是自己设计等等。此类人往往还关心许多诸如性能、兼容性等方面的话题。
框架狂热综合症患者。此类“架构师”最喜欢的就是在一个项目里搞个所谓的类库，里面写上一堆抽象类和接口，然后到处宣称其类库设计极其便于扩展云云并强迫同事负责实现其具体功能。另外，此类人的一个显著特征是对各种新框架或语言特性异乎寻常地热衷，却从不屑于实现一个真正具有能用功能的部件。
楼主希望自己成为架构师，这本身很好。但作为善意的提醒，我想楼主现在更需要搞清楚的是自己究竟希望成为哪一种架构师（我猜测更可能是第一种），然后才能针对性地去学习。无论如何，前三类架构师的共同特征是他们都具备对各种实际功能代码或硬件优缺点的知识，并且懂得如何根据项目需求（而非个人喜好）选择合理的技术完成任务。甚至有时候一个顶尖的架构师必须同时理解三个不同的方向——换言之，架构师的知识广度必须超过普通程序员。而至于第四种“架构师”， 可能大家已经注意到我说到此类人时用了引号，因为恕我直言，在我看来他们只由两类人组成：只会招摇撞骗的骗子，或是半桶水却不自知的可怜虫。

当然了，要做第四种显然最容易，哈哈。
编辑于 2012-01-18  2 条评论

赞同
6

李遥，A Programmer
范宝波、知乎用户、天猪(刘勇) 等人赞同
一句话概括的话，就是得犯过足够多、足够深刻的错误才行

稍微具体而言的话，架构设计一般有两个层次
设计性能不敏感、或是低计算量的应用：这是个初级层级，在这个层次上的普遍思路是分解问题，然后通过组合各种“solver”来解决。架构师可以随便翩翩起舞，使用各种“框架”、“类库”，借鉴各种“模式”，发明各种“概念”（这些全部都是solver）。由于计算量低，所以最后总能“条条大路通罗马”
性能极端敏感，计算密集的应用：这时候初级层次的很多经验反而起反作用了。因为组合“solver”只能解决计算正确性目标，但不能解决性能目标。所以架构师需要能“脑内模拟”业务需要的必要数据流，然后充分利用（exploit）数据流的特性来尽可能地削减计算、避免瓶颈。这时算法功底就尤为重要，很多第三方的“框架”、“库”只有拆解以后“白盒利用”的意义。性能设计要优先于“代码的封装性”、“可读性”、“可测试性”、“可管理性”以及“团队可分工/协作性”（基本上软件工程里的原则都要让位于性能设计）
编辑于 2013-05-17  添加评论

赞同
10

李德逸，关注移动互联网和企业应用
范宝波、RC CAI、白乔 等人赞同
要想成为一名架构师，你需要具备几点素质，并且保持平衡。
1、技术能力，有一个方面很深入，然后又要有广度。这点很重要，因为架构师所面临的都是各种别人遇不到或待解决的场景。深度保证你能在某个方面是专家并能举一反三的去保证你对其他技术方面理解和见解，广度保证你的视野。切勿技术崇拜，Java\.Net\C++ ，MS\IBM 都是在不同的方面你要了解的内容和工具。
2、管理能力，通常你要运用一个Team的能力去实现的架构，并保证。很好的计划、组织、沟通是必备的。越高的架构职位，这方面就越重要。我们所说的主架则是技术和管理的最佳结合。
3、高情商，不要期待技术完美的架构。会有很多人、资金、现实情况的因素来决定你的架构，如果是技术唯论，通常你的架构是无效的。你会很郁闷，并且无法实现。架构师的技术上最牛的地方就是综合所有因素让方案按照你的设想去实现，又让所有人满意。这意味着你是一个高情商的人。
4、最后如果作为一名应用架构师的话，首先你要做到业务专家，才能成为应用架构师。
所以呢，通常没有8-10年你很难做到。只要你持续努力，自然水到渠成。
发布于 2012-03-07  1 条评论

赞同
3

汪周洋
mar ncr、fleuria、黄不成器 赞同
首先真正的架构师没有几个，都是一般半桶水给自己脸上贴金，或者一些不入流的公司也要搞这种职位，先老老实实的在一线工作十年在说吧，而且工作内容还要涉及各个领域的，才有资格
发布于 2015-04-08  添加评论

赞同
12

锦瑟，舊歡洳儚
非装业程序猿、gyou ou、知乎用户 等人赞同
让现任架构师来告诉你吧：
首先，你要付出你所有的业余时间，用在阅读大量书籍和钻研最新技术上面，你要去掉你80%的兴趣爱好，因为架构师是一个和世界IT新技术赛跑的疯狂的职业。如果你每天下班后用于研究技术的时间少于2小时，那么你必然无法成为一个优秀的架构师。先有了这个觉悟，至于后面具体学习些什么，学习的顺序，那都是次要的问题，上面各位说的都很全面了。

其次，你现在最需要做的就是找一个女朋友。因为如果你走上架构师这条路，你很可能没有时间找女朋友了。
发布于 2015-03-29  1 条评论

赞同
11

林涛，隐身中
yuji Xu、Wendel Stock、Harry Zhu 等人赞同
技术人员，最大的通病，就是就技术而技术，这个在初级阶段很实用，也高效，但是，想真正做好架构师这个职位，一定要清楚产品，甚至如何运营，一个好的架构，一定是符合当下并可以在一定时间内不用重构的架构（最少为半年，互联网的特点，不可能不重构，twitter之前披露的资料显示他们平均半年重构一次架构）。
关于混合语言的问题。这个问题我觉得要辩证的看，混合不一定好，也不一定不好，关键是要看团队的接受能力，单一语言的特点是整个团队的执行效率高，维护成本低；混合语言的特点是软件整体优，但维护成本和整个团队的执行成本就会很高，架构师也应该有这方面的考虑。
学习，保持好奇心，按着“1000”考虑问题，按着“1024”设计架构，总有一天，会成长起来的
发布于 2012-01-17  4 条评论

赞同
2

觉浅，老程序员
吴清泉、gyou ou 赞同
个人意见：作为一个“架构师”，最重要的两点：
第一，也是最重要的一点是深刻理解业务规则和业务特点。忽略了这一点，做不出好软件。
其次，是技术视野必须要宽，宽度甚至比深度更重要。不是用某种你谙熟的技术去解决业务问题，而是根据业务问题选择合适的技术。
发布于 2012-01-18  1 条评论

赞同
5

刘夏，真的要 “大” 才好吗？
叶新建、CHENG WALLACE、张健飞 等人赞同
1. 心理准备：小公司可以作为实践的最佳平台，大集团可以作为学习的平台。不要灰心。
2. 从小事做起：仅仅从狭隘的软件系统架构来说，全部出自于实践和对每一个细微环节的设计：小的设计组成大的架构，而这些小的设计有很多模式可以帮助你（设计模式）。因此即便你只是编写一个计算器，也最好花精力去分析，设计。
3. 架构不是大而空的：面试的时候很多面试者都认为软件三层架构就是架构了，实际上这很片面。架构实际上是由需求，团队能力，开发周期（资金支持），版权限制等一系列因素叠加影响的，没有万能架构，只有针对一个具体项目的架构，因此应当从以上的诸多方面去分析，我需要什么样子的设计。

举个例子吧（当然，仍是相当笼统）。我有一个小的项目，就是一个基于 Web 的加减乘除计算器。首先这个需求很简单，操作非常有限（10个左右），开发人员可能1-2个，今后可能追加其他操作，但是这些其他操作和现有操作关系不大。5天之内完成上线。
（1）那么我会基于这些因素采用事务脚本的设计（请参见P of EAA）：
（1.1）这种设计的优点就是简洁，开发速度快。容易处理这种数量不多，耦合不强的需求。这正适合我们。
（1.2）其缺点是在需求不断增多的情况下容易产生冗余代码，由于我们对今后的需求和现阶段的功能有所估计（数量有限，耦合不强），认为这个问题对此项目影响不大，于是这样足以。
（2）而对于事物脚本的每一个操作，可以采用命令模式（Command Pattern）进行详细设计。
（3）我的团队开发人员均熟悉 .NET 下的开发，那么我们从语言上选择 C#， Framework 上可以选择 http://ASP.NET MVC。
（4）这个项目的数据存储要求非常有限，我们可以选择用 MySQL 或者 SQLite 作为解决方案。

View(JQuery-UI, JQuery-UI mobile)
---------(JSON)-------
Controller (事务脚本支持->命令模式)
---------(http://ADO.NET Provider)---
Storage(MySQL, SQLite)

这个例子的每一个部分都可以再详细划分，最终形成一个整体的决策。

总之，请不要灰心浮躁，不论多大（多小）的软件，每一个部分都影响着架构设计。设计好软件的每一个部分即可。
发布于 2012-01-15  添加评论

赞同
5

王贤斌，牛逼哄哄——什么都懂
范宝波、李宇、夏梁峰 等人赞同
个人觉得，有些方面的能力是天生的。
如果你想成为一个好的架构师，不是看几本书，读几年书就能成为的。


我觉得好的架构师需要2个根本的，比较天生的能力（相对比较天生，但也是日积月累出来的）。

1、在项目的开发过程中，能很快的感觉到问题会发生在哪个环节。

当然，要做到这点，最主要靠的是经验，其次才是意识，这个能力是必须的。不管什么项目，对于进度影响最大的其实就是当问题突然的出现。我们或许规避不了问题，但我们可以有准备，在前期编码，或下层代码的开发过程中，针对可能出现的问题，做一些预备工作。


2、对于每个项目的责任心。


或许，这个是做任何事情都需要的一种，人身上必须要有的要素。
当问题发生时，第一时间，和同事一起去找问题，而不是推卸自身的责任。当你的同事，在架构内，开发进度缓慢、bug数量增加、经常抱怨时，你是否需要去询问一下问题，分析一下是否是架构导致以上原因。






当然，架构师必须的当然是，写上N年的代码，这个谁都知道，就不必多说了。其他的，以上几位已经讲的很多了。


笨人拙见，祝我们一起奔向自己的未来。


梁涛，模仿是恭维的最危险形式
李遥 赞同
知道什么可为不是要点，要点是知道什么不可为。
发布于 2013-05-17  1 条评论



程东辉，懂rails/知道敏捷方法/爱写程序/三十多岁…
叶新建、欧阳婕、不安 等人赞同
不要太在意【架构师】这个字眼，在技术行业，保持对新技术的探索、求知欲望、积极的去思考，脚踏实地的去做产品（或项目），你会发现，原来所谓的架构师，不过如此
发布于 2012-01-16  添加评论



李智慧，大型网站技术架构http://item.jd.com/11322972.html
1 程序员不会因为写了很多代码就成为架构师，程序员和架构师之间有一道巨大的鸿沟。
2 如何填补这条鸿沟，先占个坑。
====================================
还是讲个故事吧。

故事发生在十年前，故事的主人公就叫老L吧，老L现在名副其实了，但是当时还不老，从一个和计算机毫不沾边的专业跨行到一家做对日软件外包的小公司做程序员已两年。
和所有的外包公司中的低级程序员一样，老L每天的工作就是对照着日文的式样书需求写代码，代码没有什么难度，对照着需求文档和样例代码照葫芦画瓢就可以了。

老L之所以转行做程序员、
一则是因为本专业找工作实在是比较困难，
二则是老L在学校的时候刚好赶上第一波互联网热，后来互联网泡沫破裂了，但是编程改变人生，互联网改变世界的念头却在老L的心中扎下根，念念不忘。
老L那时候的偶像是求伯君，是雷军。
雷军那时候还是个程序员，人们也不叫他雷布斯，雷军笑的时候很腼腆，老L觉得雷军笑的时候象自己，老L觉得雷军很酷，老L觉得自己应该也去做程序员。

为了顺利转行，老L在学校里选修了好几门计算机软件专业课，
但是工作以后，每天都是重复而简单的代码，连最基本的数据结构都很难用到。
日子就这样过了两年，老L已经忘了雷军，忘了编程改变命运，老L觉得程序员就是这个样子，编程就是这样，工作就是这样，忙碌着重复，重复着忙碌。


然而，有些东西，只要曾经惦记过，即使后来自己都遗忘了，命运之神也会在某个不经意的时候去提醒你。
多年以后，老L在一部电影里看到一句台词“念念不忘，必有回响”，
老L一瞬间就想到2005年的那个春天。


匿名用户
赵辉、文遥 赞同
@程东辉 同学说的对。太介意title没有必要，每个公司的jgs其实做的事情从打杂到ceo都有，差异太大，不值得为一个title去纠结甚么。

很多同学已经回答了这个问题，说的都很对，读书，敬业，钻研——从业务的专业性上来讲，这些很对，也很必要，未尝有美食家不沾水火可做主厨的，chef不能缺了executive。
但，我想这个问题也没必要转变成“一个优秀的技术人员（软件工程师）是如何养成的”。——这个问题意思不大，环境啦，机遇啦，跟对人啦，苦读啦，兴趣啦，驱动力啦……blahblah，都是废话啦。
技术不牛谈什么架构师？不牛就先把技术做牛了再说。

～～～对绝大多数技术人员来说，看到这里可以了，去吧去吧，学习去吧，乖。

现在假设真的有技术专家看到这里了，好吧，我们看看什么是CSA，一个通用定义在这里。
Software architect
CSA的工作职责，业务发展决策支持，技术团队的可行性搭建，等等见上面链接
——nononono，这些是CEO（薪水是他给的！）对你的定义，你的工作并不是这样的。
CSA要解决的问题，我随便说说，别太较真的话，大概是这些：复杂性，不确定性，技术差异化价值。

先打个比方：
称职的架构师，像是一个后厨的主厨（executive chef)，负责一个技术团队的分工合作可行性框架搭建（上百桌的单如何出菜），以及团队的技术方案、风格（口味，卫生，采买流程等）技术价值，当然，偶尔还要为贵宾做点专业绝活儿。

复杂性：上面说了，组织起来二三十个厨子分工流水出菜，不仅要了解每个工序，还要了解并行，和关联，而软件行业的行为多样性，变化剧烈方面，比厨师的稳定成熟，可差老远了，技术方案要能产出业务，需要了解并有（技术的和关于技术的）能力去应对这种复杂性。
不确定性：软件（及其技术应用的相关产业）业务，几十年来一直处在快速的变革中，业务的市场前瞻性，技术前瞻性事关成败，有一定视野宽度+深度的专家，能够结合团队的技术条件，才能给业务提供技术侧发展的决策支持。
技术差异化价值：这个不是必选，“能人所之不能”是一部分架构师能够给业务带来竞争力的地方。
在软件和其它领域提供了类似CSA价值的历史人物吧：奥本海默，托马斯杰斐逊，Dave Cutler，至于建筑师什么的就不用举例了。

架构师需要能做到技术团队管理者能做到的一切，只是忙于技术侧的工作，没时间去管理行政事务而已。

匿了是不想跟人因为无聊的问题比拼资历。
发布于 2013-05-16  添加评论


闷骚乔巴，闷骚乔巴

1. 沟通，没有良好的沟通能力，很难去推动和做好事情。
2. 分享，不只是将技能劳劳控制，掌握在自己手里。而是多分享，将知识和经验分享出来，并且调动大家的积极性，共同创造。
3. 专业，技术能力扎实，首先架构师肯定是位优秀的程序员。并且知识面广，懂业务。能够寻找和辨别工具解决业务问题。现在开源工具如此之多，不需要反复的重新造轮子。


饶磊，软件工程师
花大量时间去专研，多关注开源，多上论坛，多结交技术朋友，多参考互联网上一些大公司的技术分享方案
优秀架构师的绝大部分生活就是跟笔记本打交道的，哈哈，笔记本最好形影不离
还有一点就是不要太功利，如果做架构师一心只想赚大钱肯定做不好架构师，哈哈，不过真成为了优秀架构师，money自然会来的



Dylan，伪互联网架构师
看不同的公司，不同的岗位需求。有些公司对架构师分的很细的，听起来有点忽悠人。
例如，大致有“业务架构师”，“技术架构师”这两种。业务架构师，又有“解决方案架构师”，“平台架构师”。而技术架构师，又分为“安全架构师”，“系统架构师”，“前端架构师”，“数据库架构师”，
“软件架构师”......
很多人对架构的理解，还仅仅停留在“设计模式、SOA”这些纯软件架构的概念上。
从一般的互联网企业的架构师来讲，可能不会分的很细。
要想既是“通才”又是“专才”几乎是不可能，所以有些时候往往是停留在了解但不实际参与的层次。
第一是要求软件架构方面的架构和设计能力（偏软件），第二是基础(系统)架构方面（偏运维）的。



陈大明，IT
看了前面所有答复，小结一个：
1. 宽广的知识面（业务知识、相关领域技术知识、风险预判）
2. 管理能力（任务分派、高情商的小组沟通）


程序设计流程：
需求 UML 原型设计 html js 界面 Action Manager Dao 数据库

前端技术选型

虽然jqueryui的样式太难看，但是它还是很好控制的，方法和事件也很丰富。样式难看可以找美工修改这不是大问题。
至于jqueryui没有的那些组件主要是tree、grid、layout、form、menu，前三个都在网上找到了专门的插件，后面两个准备自己实现。
tree推荐使用ztree，中国人自己开发的，网上评价很好，更新也很快。缺点是每次更新，api变化都挺大，一般不敢在项目中升级，否则恐怕要在用到ztree的地方改好多东西。
grid推荐使用jqGrid，大版本号已经升到4，搜索jquery grid、jquery datagrid排名第一，功能丰富，提供普通的datagrid treegrid和分组grid，还有分页条功能。
layout推荐使用jquery.layout。模仿ext的borderlayout实现，但是有很多差异。支持嵌套。样式比较难看，不过修改比较容易。
所有程序员恐怕可以粗略的划分为这五种状态

1.不爱，但是迫于生计
2.无感，反正亦步亦趋
3.热爱，但却身心俱疲
4.狂热，打了鸡血一般
5.欢喜，毕竟乐在其中

系统问题：
数据不一致 数据有错误 数据不符合实际需求 需要筛选


------------------------

弄清整体架构流程
搞清楚步骤流程
保持专注
目标导向
做好记录
小规模测试
节点有故障  executor 尽量少
考虑极端情况

造测试数据
程序的先后顺序

无法debug 就一步步排除

------------

宏观上
1.技术广度方面
至少要精通多门开源技术吧，研究过strutsspring等的源码。
2.项目经验方面
从头到尾跟过几个大项目，头是指需求阶段，包括需求调研。
尾是指上线交付之后，包括维护阶段。
3.架构经验方面
有过分布式系统的架构和开发经验。对于跨系统的结构优化，数据存储的性能指标等有丰富经验。什么缓存啊、数据库的垂直切分什么的，业务的抽象和水平拆分啊，这些应该都轻车熟路吧。
4.行业领域方面
最起码得精通一到两门业务吧，所谓精通，就是比如做金融证券业务的，至少等当半个经融分析师。做电力业务的，至少等当半个电力工程师。
5.个人修为
有自己一些独到的见解，不会人云亦云啦。
微观上
1. 精通面向对象分析与设计(OOA/OOD)、涉及模式(GOF，J2EEDP)以及综合模式。你应该十分了解UML，尤其是class，object，interaction以及statediagrams。
2. 学习JAVA语言的基础知识以及它的核心类库(collections，serialization，streams，networking， multithreading，reflection，event，handling，NIO，localization，以及其他)。
3. 了解JVM，classloaders，classreflect，以及垃圾回收的基本工作机制等。你应该有能力反编译一个类文件并且明白一些基本的汇编指令。
4. 如果你将要写客户端程序，你需要学习WEB的小应用程序(applet)，必需掌握GUI设计的思想和方法，以及桌面程序的SWING，AWT， SWT。你还应该对UI部件的JAVABEAN组件模式有所了解。JAVABEANS也被应用在JSP中以把业务逻辑从表现层中分离出来。
5. 学习java数据库技术，如JDBCAPI并且会使用至少一种persistence/ORM构架，例如Hibernate，JDO， CocoBase，TopLink，InsideLiberator(国产JDO红工厂软件)或者iBatis。
6. 应该了解对象关系的阻抗失配的含义，以及它是如何影响业务对象的与关系型数据库的交互，和它的运行结果，还需要掌握不同的数据库产品运用，比如racle，mysql，mssqlserver。
7. 学习JAVA的沙盒安全模式(classloaders，bytecodeverification，managers，policyandpermissions，codesigning， digitalsignatures，cryptography，certification，Kerberos，以及其他)还有不同的安全/认证 API，例如JAAS(JavaAuthenticationandAuthorizationService)，JCE (JavaCryptographyExtension)，JSSE(JavaSecureSocketExtension)，以及JGSS (JavaGeneralSecurityService)。
8. 熟悉主流的网页框架，例如JSF，Struts，Tapestry，Cocoon，WebWork，以及他们下面的涉及模式，如MVC/MODEL2。
9. 学习Servlets，JSP，以及JSTL(StandardTagLibraries)和可以选择的第三方TagLibraries。
10. 学习如何使用及管理WEB服务器，例如tomcat，resin，Jrun，并且知道如何在其基础上扩展和维护WEB程序。
11. 学习分布式对象以及远程API，例如RMI和RMI/IIOP。
12. 掌握各种流行中间件技术标准和与java结合实现，比如Tuxedo、CROBA，当然也包括javaEE本身。
13. 要学习最少一种的XMLAPI，例如JAXP(JavaAPIforXMLProcessing)，JDOM(JavaforXMLDocumentObjectModel)，DOM4J，或JAXR(JavaAPIforXMLRegistries)。
14. 学习一门轻量级应用程序框架，例如Spring，PicoContainer，Avalon，以及它们的IoC/DI风格(setter，constructor，interfaceinjection)。
15. 学习如何利用JAVAAPI和工具来构建WebService。例如JAX-RPC(JavaAPIforXML/RPC)，SAAJ (SOAPwithAttachmentsAPIforJava)，JAXB(JavaArchitectureforXMLBinding)，JAXM(JavaAPIforXMLMessaging)， JAXR(JavaAPIforXMLRegistries)，或者JWSDP(JavaWebServicesDeveloperPack)。
16. 熟悉不同的J2EE技术，例如JNDI(JavaNamingandDirectoryInterface)，JMS (JavaMessageService)，JTA/JTS(JavaTransactionAPI/JavaTransactionService)，JMX (JavaManagementeXtensions)，以及JavaMail。
17. 学习企业级JavaBeans(EJB)以及它们的不同组件模式：Stateless/StatefulSessionBeans，EntityBeans(包含Bean- ManagedPersistence[BMP]或者Container-ManagedPersistence[CMP]和它的EJB-QL)，或者 Message-DrivenBeans(MDB)。
18. 学习如何管理与配置一个J2EE应用程序服务器，如WebLogic，JBoss等，并且利用它的附加服务，例如簇类，连接池以及分布式处理支援。你还需要了解如何在它上面封装和配置应用程序并且能够监控、调整它的性能。
19. 熟悉对不同有用的API和frame work等来为你服务。例如Log4J(logging/tracing)，Quartz (scheduling)，JGroups(networkgroupcommunication)，JCache(distributedcaching)， Lucene(full-textsearch)，JakartaCommons等等。
20. 熟悉面向方面的程序设计以及面向属性的程序设计(这两个都被很容易混淆的缩写为AOP)，以及他们的主流JAVA规格和执行。例如AspectJ和AspectWerkz。
21. 如果你将要对接或者正和旧的系统或者本地平台，你需要学习JNI (JavaNativeInterface) and JCA (JavaConnectorArchitecture)。
22. 熟悉JINI技术以及与它相关的分布式系统，比如掌握CROBA。
23. JavaCommunityProcess(JCP)以及他的不同JavaSpecificationRequests(JSRs)，例如Portlets(168)，JOLAP(69)，DataMiningAPI(73)，等等。
24. 熟练掌握一种JAVAIDE例如sunOne，netBeans，IntelliJIDEA或者Eclipse。(有些人更喜欢VI或EMACS来编写文件。随便你用什么了：)
25. JAVA(精确的说是有些配置)是冗长的，它需要很多的人工代码(例如EJB)，所以你需要熟悉代码生成工具，例如XDoclet。
26. 熟悉一种单元测试体系(JNunit)，并且学习不同的生成、部署工具(Ant，Maven)。
27.  能够深入了解加熟练操作和配置不同的操作系统，比如GNU/linux，sunsolaris，macOS等，做为跨平台软件的开发者。
28. 熟悉一些在JAVA开发中经常用到的软件工程过程。例如RUP(RationalUnifiedProcess)andAgilemethodologies。
29. 紧跟java发展的步伐，比如现在可以深入的学习javaME，以及各种java新规范，技术的运用，如新起的web富客户端技术。
30. 对opensource有所了解，因为至少java的很多技术直接是靠开源来驱动发展的，如java3D技术。
如果以上的知识你还不认识，还不能够熟悉的掌握，可以来找我。而现在我就有一个平台可以提供给你们学习，你想拿高薪的，想学习的，想就业前景好的，想跟别人竞争能取得优势的，想进阿里面试但担心面试不过的，你都可以来，群号为：654285701
注：加群要求
1、具有1-5工作经验的，面对目前流行的技术不知从何下手，需要突破技术瓶颈的可以加。
2、在公司待久了，过得很安逸，但跳槽时面试碰壁。需要在短时间内进修、跳槽拿高薪的可以加。
3、如果没有工作经验，但基础非常扎实，对java工作机制，常用设计思想，常用java开发框架掌握熟练的，可以加。
4、觉得自己很牛B，一般需求都能搞定。但是所学的知识点没有系统化，很难在技术领域继续突破的可以加。
5.阿里Java高级大牛直播讲解知识点，分享知识，多年工作经验的梳理和总结，带着大家全面、科学地建立自己的技术体系和技术认知！

========================


1.在我们进行数据分析之前要对数据进行检测，数据质量是保证数据应用的基础，它的评估标准主要包括四个方面：完整性、一致性、准确性、及时性。评估数据是否达到预期设定的质量要求，就可以通过这四个方面来进行判断。

2.完整性指的是数据信息是否存在缺失的状况，数据缺失的情况可能是整个数据记录缺失，也可能是数据中某个字段信息的记录缺失。不完整数据的价值就会大大降低，也是数据质量最为基础的一项评估标准。数据质量的完整性比较容易去评估，一般可以通过数据统计中的记录值和唯一值进行评估，例如：通过日志访问量数据得到平时日平均访问量在500万左右，某一天突然降低到50万，这是就要检查一下数据是否存在缺失了，再例如，网站统计地域分布情况的每一个地区名就是一个唯一值，我国包括了 32 个省和直辖市，如果统计得到的唯一值小于 32，则可以判断数据有可能存在缺失。

3.一致性是指数据是否遵循了统一的规范，数据集合是否保持了统一的格式。数据质量的一致性主要体现在数据记录的规范和数据是否符合逻辑。规范指的是，一项数据存在它特定的格式，例如手机号码一定是 11 位的数字，IP 地址一定是由 4 个 0 到 255 间的数字加上.组成的。逻辑指的是，多项数据间存在着固定的逻辑关系，例如 PV（页面访问量） 一定是大于等于 UV（用户唯一访问量） 的，跳出率一定是在 0 到 1 之间的。

4.准确性是指数据记录的信息是否存在异常或错误。存在准确性问题的数据不仅仅只是规则上的不一致。最为常见的数据准确性错误如乱码。其次，异常的大或者小的数据也是不符合条件的数据。数据质量的准确性可能存在于个别记录，也可能存在于整个数据集，例如数量级记录错误。这类错误则可以使用最大值和最小值的统计量去审核。

一般数据都符合正态分布的规律，如果一些占比少的数据存在问题，则可以通过比较其他数量少的数据比例，来做出判断，如果一些少量数据存在明显的准确性问题以及明显的格式字段缺失我们则要考虑把这些数据删除。

5.及时性是指数据从产生到可以查看的时间间隔，也叫数据的延时时长。及时性对于数据分析本身要求并不高，但如果数据分析周期加上数据建立的时间过长，就可能导致分析得出的结论失去了借鉴意义，及时性在大数据离线项目里面影响关系不大，但是对于大数据实时的项目则有很大的影响。

======================

 最近在做一个数据项目，采集到大量的数据，对数据进行了各种分类和预处理分析。但是当我回过头来对项目数据质量做一个可量化的评估的时候，一直没有一个合适的框架来承载。基于自己实际的项目经验，按照以下维度做了一个评估。

数据齐全
数据有效（数据的类型，范围是否满足物理量定义，满足算法需求）
数据在时间上面的稳定性（是否存在数据缺失情况）
数据的准确性（是实际采集的物理量保持一致几个维度去衡量项目数据）
    毕竟都是自己想的，没有权威从方法论上保证自己的维度和评估方式是准确可靠。特意上网做了一个调研，找到一个数据质量评估六维度文档，觉得不错。分享给大家。

链接: https://pan.baidu.com/s/1R12E3qQ2GSMnWXoXAMDwAQ 密码: ukhq

========================

1. 重复值检查
1.1 什么是重复值
重复值的检查首先要明确一点，即重复值的定义。对于一份二维表形式的数据集来说，什么是重复值？主要有两个层次：
① 关键字段出现重复记录，比如主索引字段出现重复；
② 所有字段出现重复记录。
第一个层次是否是重复，必须从这份数据的业务含义进行确定。比如一张表，从业务上讲，一个用户应该只会有一条记录，那么如果某个用户出现了超过一条的记录，那么这就是重复值。第二个层次，就一定是重复值了。

1.2 重复值产生的原因
重复值的产生主要有两个原因，一是上游源数据造成的，二是数据准备脚本中的数据关联造成的。从数据准备角度来看，首先检查数据准备的脚本，判断使用的源表是否有重复记录，同时检查关联语句的正确性和严谨性，比如关联条件是否合理、是否有限定数据周期等等。
比如：检查源表数据是否重复的SQL：

SELECT MON_ID,COUNT(*),COUNT(DISTINCT USER_ID)
FROM TABLE_NAME
GROUP BY MON_ID;
如果是上游源数据出现重复，那么应该及时反映给上游进行修正；如果是脚本关联造成的，修改脚本，重新生成数据即可。
还有一份情况，这份数据集是一份单独的数据集，并不是在数据仓库中开发得到的数据，既没有上游源数据，也不存在生成数据的脚本，比如公开数据集，那么如何处理其中的重复值？一般的处理方式就是直接删除重复值。

import pandas as pd
dataset = pd.read_excel("/labcenter/python/dataset.xlsx")
#判断重复数据
dataset.duplicated()    #全部字段重复是重复数据
dataset.duplicated(['col2'])    #col2字段重复是重复数据
#删除重复数据
dataset.drop_duplicates()     #全部字段重复是重复数据
dataset.drop_duplicates(['col2'])   #col2字段重复是重复数据
附：本文数据集：dataset.xlsx




2. 缺失值检查
缺失值主要是指数据集中部分记录存在部分字段的信息缺失。

2.1 缺失值出现的原因
出现趋势值主要有三种原因：
① 上游源系统因为技术或者成本原因无法完全获取到这一信息，比如对用户手机APP上网记录的解析；
② 从业务上讲，这一信息本来就不存在，比如一个学生的收入，一个未婚者的配偶姓名；
③ 数据准备脚本开发中的错误造成的。
第一种原因，短期内无法解决；第二种原因，数据的缺失并不是错误，无法避免；第三种原因，则只需通过查证修改脚本即可。
缺失值的存在既代表了某一部分信息的丢失，也影响了挖掘分析结论的可靠性与稳定性，因此，必须对缺失值进行处理。
如果缺失值记录数超过了全部记录数的50%，则应该从数据集中直接剔除掉该字段，尝试从业务上寻找替代字段；
如果缺失值记录数没有超过50%，则应该首先看这个字段在业务上是否有替代字段，如果有，则直接剔除掉该字段，如果没有，则必须对其进行处理。

#查看哪些字段有缺失值
dataset.isnull().any()    #获取含有NaN的字段
#统计各字段的缺失值个数
dataset.isnull().apply(pd.value_counts)
#删除含有缺失值的字段
nan_col = dataset.isnull().any()
dataset.drop(nan_col[nan_col].index,axis=1)
2.2 缺失值的处理
缺失值的处理主要有两种方式：过滤和填充。

（1）缺失值的过滤
直接删除含有缺失值的记录，总体上会影响样本个数，如果删除样本过多或者数据集本来就是小数据集时，这种方式并不建议采用。

#删除含有缺失值的记录
dataset.dropna()
（2）缺失值的填充
缺失值的填充主要三种方法：
① 方法一：使用特定值填充
使用缺失值字段的平均值、中位数、众数等统计量填充。
优点：简单、快速
缺点：容易产生数据倾斜
② 方法二：使用算法预测填充
将缺失值字段作为因变量，将没有缺失值字段作为自变量，使用决策树、随机森林、KNN、回归等预测算法进行缺失值的预测，用预测结果进行填充。
优点：相对精确
缺点：效率低，如果缺失值字段与其他字段相关性不大，预测效果差
③ 方法三：将缺失值单独作为一个分组，指定值进行填充
从业务上选择一个单独的值进行填充，使缺失值区别于其他值而作为一个分组，从而不影响算法计算。
优点：简单，实用
缺点：效率低

#使用Pandas进行特定值填充
dataset.fillna(0)   #不同字段的缺失值都用0填充
dataset.fillna({'col2':20,'col5':0})    #不同字段使用不同的填充值
dataset.fillna(dataset.mean())   #分别使用各字段的平均值填充
dataset.fillna(dataset.median())     #分别使用个字段的中位数填充

#使用sklearn中的预处理方法进行缺失值填充(只适用于连续型字段)
from sklearn.preprocessing import Imputer
dataset2 = dataset.drop(['col4'],axis=1)
colsets = dataset2.columns
nan_rule1 = Imputer(missing_values='NaN',strategy='mean',axis=0)    #创建填充规则(平均值填充)
pd.DataFrame(nan_rule1.fit_transform(dataset2),columns=colsets)    #应用规则
nan_rule2 = Imputer(missing_values='median',strategy='mean',axis=0) #创建填充规则(中位数填充)
pd.DataFrame(nan_rule2.fit_transform(dataset2),columns=colsets)    #应用规则
nan_rule3 = Imputer(missing_values='most_frequent',strategy='mean',axis=0)  #创建填充规则(众数填充)
pd.DataFrame(nan_rule3.fit_transform(dataset2),columns=colsets)    #应用规则


3. 数据倾斜问题
数据倾斜是指字段的取值分布主要集中在某个特定类别或者特定区间。

3.1 数据倾斜问题的原因
出现这一问题的原因主要有三种：
① 上游源数据存在问题；
② 数据准备脚本的问题；
③ 数据本身的分布就是如此。
如果某个字段出现数据倾斜问题，必须首先排查上述第一、二种原因，如果都没有问题或者无法检查（如：单独的数据集），那么就要考虑这个字段对后续的分析建模是否有价值。一般来说，有严重的数据倾斜的字段对目标变量的区分能力很弱，对分析建模的价值不大，应该直接剔除掉。

3.2 如何衡量数据的倾斜程度
衡量数据的倾斜程度，主要采用频数分析方法，但因数据类别的不同而有所差异：
① 针对连续型字段，需要首先采用等宽分箱方式进行离散化，然后计算各分箱的记录数分布；
② 针对离散型字段，直接计算各类别的记录数分布。
一般来说，如果某个字段90%以上的记录数，主要集中在某个特定类别或者特定区间，那么这个字段就存在严重的数据倾斜问题。

#对于连续型变量进行等宽分箱
pd.value_counts(pd.cut(dataset['col3'],5))  #分成5箱
#对于离散型变量进行频数统计
pd.value_counts(dataset['col4'])


4. 异常值检查
异常值是指数据中出现了处于特定分布、范围或者趋势之外的数据，这些数据一般会被成为异常值、离群点、噪音等。

4.1 异常值产生的原因
异常值的产生主要有两类原因：
① 数据采集、生成或者传递过程中发生的错误；
② 业务运营过程出现的一些特殊情况。
将第一种原因产生的异常值称为统计上的异常，这是错误带来的数据问题，需要解决；将第二种原因产生的异常值称为业务上的异常，反映了业务运营过程的某种特殊结果，它不是错误，但需要深究，在数据挖掘中的一种典型应用就是异常检测模型，比如信用卡欺诈，网络入侵检测、客户异动行为识别等等。

4.2 异常值的识别方法
异常值的识别方法主要有以下几种：

（1）极值检查
主要检查字段的取值是否超出了合理的值域范围。
① 方法一：最大值最小值
使用最大值、最小值进行判断。比如客户年龄的最大值为199岁，客户账单的最小费用为-20，这些都明显存在异常。
② 方法二：3σ原则
如果数据服从正态分布，在3σ原则下，异常值被定义为与平均值的偏差超过了3倍标准差的值。这是因为，在正态分布的假设下，具体平均值3倍标准差之外的值出现的概率低于0.003，属于极个别的小概率事件。
③ 方法三：箱线图分析
箱线图提供了识别异常的标准：异常值被定义为小于下四分位-1.5倍的四分位间距，或者大于上四分位+1.5倍的四分位间距的值。
箱线图分析不要求数据服从任何分布，因此对异常值的识别比较客观。

#计算相关统计指标
statDF = dataset2.describe()  #获取描述性统计量
statDF.loc['mean+3std'] = statDF.loc['mean'] + 3 * statDF.loc['std']  #计算平均值+3倍标准差
statDF.loc['mean-3std'] = statDF.loc['mean'] - 3 * statDF.loc['std']  #计算平均值-3倍标准差
statDF.loc['75%+1.5dist'] = statDF.loc['75%'] + 1.5 * (statDF.loc['75%'] - statDF.loc['25%'])  #计算上四分位+1.5倍的四分位间距
statDF.loc['25%-1.5dist'] = statDF.loc['25%'] - 1.5 * (statDF.loc['75%'] - statDF.loc['25%'])  #计算下四分位-1.5倍的四分位间距
#获取各字段最大值、最小值
statDF.loc[['max','min']]
#判断取值是否大于平均值+3倍标准差
dataset3 = dataset2 - statDF.loc['mean+3std']
dataset3[dataset3>0]
#判断取值是否小于平均值-3倍标准差
dataset4 = dataset2 - statDF.loc['mean-3std']
dataset4[dataset4<0]
#判断取值是否大于上四分位+1.5倍的四分位间距
dataset5 = dataset2 - statDF.loc['75%+1.5dist']
dataset5[dataset5>0]
#判断取值是否小于下四分位-1.5倍的四分位间距
dataset6 = dataset2 - statDF.loc['25%-1.5dist']
dataset6[dataset6<0]
（2）记录数分布检查
主要检查字段的记录数分布是否超出合理的分布范围，包括三个指标：零值记录数、正值记录数、负值记录数。

（3）波动检查
波动检查主要适用于有监督的数据，用于检查随着自变量的变化，因变量是否发生明显的波动情况。
以上异常值的识别方法主要针对连续型的字段，而对于离散型的字段的异常识别主要通过检查类别出现是否出现了合理阈值外的数据，比如苹果终端型号字段，出现了“P20”的取值。

4.3 异常值的处理
对于统计上的异常值的处理，主要采取两种方式：剔除或者替换。剔除是指直接将被标记为异常值的记录从数据集中删除掉，而替换是指将异常值用一个非异常值进行替换，比如边界值，或者有监督情况下的目标变量表征相似的某个值。
对于业务上的异常值的处理，原则就是进行深入探索分析，查找出现这一特殊情况的根本原因。



5.参考与感谢
[1] Python数据分析与数据化运营

[2] Python数据分析与数据挖掘实战

http://www.evv5980.cn/
http://www.nat5354.cn/
http://www.nkc4539.cn/
http://www.jal3249.cn/
http://www.ppr6189.cn/
http://www.xnw9449.cn/
http://www.jwv1856.cn/
http://www.ddh4684.cn/
http://www.ymu2666.cn/
http://www.kdz0246.cn/
http://www.sph9900.cn/
http://www.fmh8265.cn/
http://www.igf1400.cn/
http://www.toy2618.cn/
http://www.xjh6427.cn/
http://www.cce2139.cn/
http://www.vzx2078.cn/
http://www.fhw1039.cn/
http://www.dwd9016.cn/
http://www.wqr1047.cn/
http://www.nyc9430.cn/
http://www.bks4017.cn/
http://www.iru8567.cn/
http://www.dyq9159.cn/
http://www.ece1729.cn/
http://www.zpp0623.cn/
http://www.ymg3874.cn/
http://www.jaf1308.cn/
http://www.djz1658.cn/
http://www.jlh2124.cn/
http://www.acj2609.cn/
http://www.per1537.cn/
http://www.jxa6372.cn/
http://www.dja2819.cn/
http://www.sml6389.cn/
http://www.hgh3722.cn/
http://www.ntd5264.cn/
http://www.esn7121.cn/
http://www.oee2689.cn/
http://www.pdh7765.cn/
http://www.qsv0141.cn/
http://www.mar4014.cn/
http://www.rcd9187.cn/
http://www.unw3900.cn/
http://www.tmo9604.cn/
http://www.eko5785.cn/
http://www.eqn5017.cn/
http://www.oek0353.cn/
http://www.hmw0652.cn/
http://www.tub1546.cn/
http://www.taj7240.cn/
http://www.dto7731.cn/
http://www.tox1106.cn/
http://www.pzx0011.cn/
http://www.kdd4058.cn/
http://www.bti6873.cn/
http://www.nvg6571.cn/
http://www.krr6354.cn/
http://www.uym8620.cn/



