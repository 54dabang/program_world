第1章 Kubernetes入门 1
1.1 Kubernetes是什么 1
1.2 为什么要用Kubernetes 4
1.3 从一个简单的例子开始 5
1.3.1 环境准备 6
1.3.2 启动MySQL服务 6
1.3.3 启动Tomcat应用 9
1.3.4 通过浏览器访问网页 10
1.4 Kubernetes基本概念和术语 12
1.4.1 Master 12
1.4.2 Node 12
1.4.3 Pod 15
1.4.4 Label（标签） 18
1.4.5 Replication Controller 22
1.4.6 Deployment 26
1.4.7 Horizontal Pod Autoscaler 28
1.4.8 StatefulSet 29
1.4.9 Service（服务） 30
1.4.10 Volume（存储卷） 37
1.4.11 Persistent Volume 41
1.4.12 Namespace（命名空间） 42
1.4.13 Annotation（注解） 43
1.4.14 小结 44
第2章 Kubernetes实践指南 45
2.1 Kubernetes安装与配置 45
2.1.1 系统要求 45
2.1.2 使用kubeadm工具快速安装Kubernetes集群 46
2.1.3 以二进制文件方式安装Kubernetes集群 51
2.1.4 Kubernetes集群的安全设置 59
2.1.5 Kubernetes集群的网络配置 64
2.1.6 内网中的Kubernetes相关配置 64
2.1.7 Kubernetes的版本升级 65
2.1.8 Kubernetes核心服务配置详解 66
2.2 kubectl命令行工具用法详解 86
2.2.1 kubectl用法概述 86
2.2.2 kubectl子命令详解 88
2.2.3 kubectl参数列表 90
2.2.4 kubectl输出格式 90
2.2.5 kubectl操作示例 92
2.3 深入掌握Pod 93
2.3.1 Pod定义详解 93
2.3.2 Pod的基本用法 98
2.3.3 静态Pod 103
2.3.4 Pod容器共享Volume 104
2.3.5 Pod的配置管理 106
2.3.6 在容器内获取Pod信息（Downward API） 119
2.3.7 Pod生命周期和重启策略 124
2.3.8 Pod健康检查 125
2.3.9 玩转Pod调度 127
2.3.10 Init Container（初始化容器） 149
2.3.11 Pod的升级和回滚 152
2.3.12 Pod的扩容和缩容 166
2.3.13 使用StatefulSet搭建MongoDB集群 171
2.4 深入掌握Service 180
2.4.1 Service定义详解 181
2.4.2 Service基本用法 182
2.4.3 Headless Service 187
2.4.4 集群外部访问Pod或Service 192
2.4.5 DNS服务搭建指南 196
2.4.6 自定义DNS和上游DNS服务器 204
2.4.7 Ingress：HTTP 7层路由机制 208
第3章 Kubernetes核心原理 226
3.1 Kubernetes API Server 原理分析 226
3.1.1 Kubernetes API Server概述 226
3.1.2 独特的Kubernetes Proxy API接口 229
3.1.3 集群功能模块之间的通信 230
3.2 Controller Manager 原理分析 231
3.2.1 Replication Controller 232
3.2.2 Node Controller 234
3.2.3 ResourceQuota Controller 235
3.2.4 Namespace Controller 237
3.2.5 Service Controller与Endpoint Controller 237
3.3 Scheduler原理分析 238
3.4 kubelet运行机制分析 242
3.4.1 节点管理 242
3.4.2 Pod管理 243
3.4.3 容器健康检查 244
3.4.4 cAdvisor资源监控 245
3.5 kube-proxy 运行机制分析 247
3.6 深入分析集群安全机制 251
3.6.1 API Server认证管理（Authentication） 251
3.6.2 API Server授木又管理（Authorization） 253
3.6.3 Admission Control（准入控制） 272
3.6.4 Service Account 274
3.6.5 Secret私密凭据 279
3.7 网络原理 282
3.7.1 Kubernetes网络模型 282
3.7.2 Docker的网络基础 284
3.7.3 Docker的网络实现 296
3.7.4 Kubernetes的网络实现 304
3.7.5 Pod和Service网络实战 308
3.7.6 CNI网络模型 321
3.7.7 Kubernetes网络策略 331
3.7.8 开源的网络组件 333
3.8 共享存储原理 363
3.8.1 共享存储机制概述 363
3.8.2 PV详解 364
3.8.3 PVC详解 368
3.8.4 PV和PVC的生命周期 370
3.8.5 StorageClass详解 373
3.8.6 动态存储管理实战：GlusterFS 376
第4章 Kubernetes开发指南 388
4.1 REST简述 388
4.2 Kubernetes API详解 390
4.2.1 Kubernetes API概述 390
4.2.2 API版本 395
4.2.3 API Groups（API组） 395
4.2.4 API方法说明 397
4.2.5 API响应说明 398
4.3 使用Java程序访问Kubernetes API 400
4.3.1 Jersey 401
4.3.2 Fabric8 412
4.3.3 使用说明 413
第5章 Kubernetes运维指南 434
5.1 Kubernetes集群管理指南 434
5.1.1 Node的管理 434
5.1.2 更新资源对象的Label 436
5.1.3 Namespace：集群环境共享与隔离 437
5.1.4 Kubernetes资源管理 441
5.1.5 资源紧缺时的Pod驱逐机制 475
5.1.6 Pod Disruption Budget（主动驱逐保护） 483
5.1.7 Kubernetes集群的高可用部署方案 485
5.1.8 Kubernetes集群监控 496
5.1.9 集群统一日志管理 513
5.1.10 Kubernetes审计日志（Audit Log） 522
5.1.11 使用Web UI（Dashboard）管理集群 523
5.1.12 Helm：Kubernetes应用包管理工具 527
5.2 Trouble Shooting指导 538
5.2.1 查看系统Event事件 538
5.2.2 查看容器日志 540
5.2.3 查看Kubernetes服务日志 541
5.2.4 常见问题 542
5.2.5 寻求帮助 546
5.3 Kubernetes开发中的新功能 546
5.3.1 Pod Preset（运行时参数注入策略） 546
5.3.2 Cluster Federation（集群联邦） 553
5.3.3 容器运行时接口（Container Runtime Interface-CRI） 557
5.3.4 对GPU的支持 561
5.3.5 Kubernetes的演进路线（Roadmap）和开发模式 565
第6章 Kubernetes源码导读 568
6.1 Kubernetes源码结构和编译步骤 568
6.2 kube-apiserver进程源码分析 572
6.2.1 进程启动过程 572
6.2.2 关键代码分析 574
6.2.3 设计总结 589
6.3 kube-controller-manager进程源码分析 592
6.3.1 进程启动过程 592
6.3.2 关键代码分析 595
6.3.3 设计总结 603
6.4 kube-scheduler进程源码分析 605
6.4.1 进程启动过程 605
6.4.2 关键代码分析 610
6.4.3 设计总结 617
6.5 kubelet进程源码分析 619
6.5.1 进程启动过程 619
6.5.2 关键代码分析 624
6.5.3 设计总结 647
6.6 kube-proxy进程源码分析 648
6.6.1 进程启动过程 648
6.6.2 关键代码分析 650
6.6.3 设计总结 665
6.7 kubectl进程源码分析 666
6.7.1 kubectl create命令 667
6.7.2 rolling-update命令 671

1 　Kubernetes 介绍1

1.1　Kubernetes 系统的需求 2

1.1.1　从单体应用到微服务 2

1.1.2　为应用程序提供一个一致的环境 5

1.1.3　迈向持续交付 ：DevOps 和无运维 6

1.2　介绍容器技术 7

1.2.1　什么是容器 7

1.2.2　Docker 容器平台介绍 11

1.2.3　rkt——一个 Docker 的替代方案 14

1.3　Kubernetes 介绍 15

1.3.1　初衷 15

1.3.2　深入浅出地了解 Kubernetes 15

1.3.3　Kubernetes 集群架构 17

1.3.4　在 Kubernetes 中运行应用 18

1.3.5　使用 Kubernetes 的好处 20

1.4　本章小结 22

2 　开始使用 Kubernetes 和 Docker 23

2.1　创建、运行及共享容器镜像 23

2.1.1　安装 Docker 并运行 Hello World 容器 24

2.1.2　创建一个简单的 Node.js 应用 26

2.1.3　为镜像创建 Dockerfile 27

2.1.4　构建容器镜像 27

2.1.5　运行容器镜像 30

2.1.6　探索运行容器的内部 31

2.1.7　停止和删除容器 32

2.1.8　向镜像仓库推送镜像 33

2.2　配置 Kubernetes 集群 34

2.2.1　用 Minikube 运行一个本地单节点 Kubernetes 集群 34

2.2.2　使用 Google Kubernetes Engine 托管 Kubernetes 集群 36

2.2.3　为 kubectl 配置别名和命令行补齐 39

2.3　在 Kubernetes 上运行第一个应用 40

2.3.1　部署 Node.js 应用 40

2.3.2　访问 Web 应用 43

2.3.3　系统的逻辑部分 45

2.3.4　水平伸缩应用 46

2.3.5　查看应用运行在哪个节点上 49

2.3.6　介绍 Kubernetes dashboard 50

2.4　本章小结 51

3 　pod ：运行于 Kubernetes 中的容器 53

3.1　介绍 pod 53

3.1.1　为何需要 pod 54

3.1.2　了解 pod 55

3.1.3　通过 pod 合理管理容器 56

3.2　以 YAML 或 JSON 描述文件创建 pod 58

3.2.1　检查现有 pod 的 YAML 描述文件 59

3.2.2　为 pod 创建一个简单的 YAML 描述文件 61

3.2.3　使用 kubectl create 来创建 pod 63

3.2.4　查看应用程序日志 64

3.2.5　向 pod 发送请求 65

3.3　使用标签组织 pod 66

3.3.1　介绍标签 66

3.3.2　创建 pod 时指定标签 67

3.3.3　修改现有 pod 的标签 68

3.4　通过标签选择器列出 pod 子集 69

3.4.1　使用标签选择器列出 pod 69

3.4.2　在标签选择器中使用多个条件 71

3.5　使用标签和选择器来约束 pod 调度 71

3.5.1　使用标签分类工作节点 72

3.5.2　将 pod 调度到特定节点 72

3.5.3　调度到一个特定节点 73

3.6　注解 pod73

3.6.1　查找对象的注解 74

3.6.2　添加和修改注解 74

3.7　使用命名空间对资源进行分组 75

3.7.1　了解对命名空间的需求 75

3.7.2　发现其他命名空间及其 pod 75

3.7.3　创建一个命名空间 76

3.7.4　管理其他命名空间中的对象 77

3.7.5　命名空间提供的隔离 78

3.8　停止和移除 pod 78

3.8.1　按名称删除 pod 78

3.8.2　使用标签选择器删除 pod 79

3.8.3　通过删除整个命名空间来删除 pod 80

3.8.4　删除命名空间中的所有 pod，但保留命名空间 80

3.8.5　删除命名空间中的（几乎）所有资源 80

3.9　本章小结 81

4 　副本机制和其他控制器 ：部署托管的 pod 83

4.1　保持 pod 健康 84

4.1.1　介绍存活探针 84

4.1.2　创建基于 HTTP 的存活探针 85

4.1.3　使用存活探针 86

4.1.4　配置存活探针的附加属性 87

4.1.5　创建有效的存活探针 88

4.2　了解 ReplicationController 89

4.2.1　ReplicationController 的操作 90

4.2.2　创建一个 ReplicationController 92

4.2.3　使用 ReplicationController 94

4.2.4　将 pod 移入或移出 ReplicationController 的作用域 97

4.2.5　修改 pod 模板 100

4.2.6　水平缩放 pod 101

4.2.7　删除一个 ReplicationController 103

4.3　使用 ReplicaSet 而不是 ReplicationController 104

4.3.1　比较 ReplicaSet 和 ReplicationController 104

4.3.2　定义 ReplicaSet 105

4.3.3　创建和检查 ReplicaSet106

4.3.4　使用 ReplicaSet 的更富表达力的标签选择器106

4.3.5　ReplicaSet 小结 107

4.4　使用 DaemonSet 在每个节点上运行一个 pod 107

4.4.1　使用 DaemonSet 在每个节点上运行一个 pod 108

4.4.2　使用 DaemonSet 只在特定的节点上运行 pod 109

4.5　运行执行单个任务的 pod 112

4.5.1　介绍 Job 资源 112

4.5.2　定义 Job 资源 113

4.5.3　看 Job 运行一个 pod 114

4.5.4　在 Job 中运行多个 pod 实例 114

4.5.5　限制 Job pod 完成任务的时间 116

4.6　安排 Job 定期运行或在将来运行一次 116

4.6.1　创建一个 CronJob 116

4.6.2　了解计划任务的运行方式 118

4.7　本章小结 118

5 　服务 ：让客户端发现 pod 并与之通信121

5.1　介绍服务 122

5.1.1　创建服务 123

5.1.2　服务发现 129

5.2　连接集群外部的服务 132

5.2.1　介绍服务 endpoint 133

5.2.2　手动配置服务的 endpoint 133

5.2.3　为外部服务创建别名 135

5.3　将服务暴露给外部客户端 136

5.3.1　使用 NodePort 类型的服务 137

5.3.2　通过负载均衡器将服务暴露出来 140

5.3.3　了解外部连接的特性 142

5.4　通过 Ingress 暴露服务 143

5.4.1　创建 Ingress 资源 145

5.4.2　通过 Ingress 访问服务 146

5.4.3　通过相同的 Ingress 暴露多个服务 147

5.4.4　配置 Ingress 处理 TLS 传输 149

5.5　pod 就绪后发出信号 150

5.5.1　介绍就绪探针 151

5.5.2　向 pod 添加就绪探针 152

5.5.3　了解就绪探针的实际作用 154

5.6　使用 headless 服务来发现独立的 pod 155

5.6.1　创建 headless 服务156

5.6.2　通过 DNS 发现 pod 156

5.6.3　发现所有的 pod——包括未就绪的 pod 157

5.7　排除服务故障 158

5.8　本章小结 159

6 　卷 ：将磁盘挂载到容器 161

6.1　介绍卷 162

6.1.1　卷的应用示例162

6.1.2　介绍可用的卷类型 164

6.2　通过卷在容器之间共享数据 165

6.2.1　使用 emptyDir 卷 165

6.2.2　使用 Git 仓库作为存储卷 168

6.3　访问工作节点文件系统上的文件 171

6.3.1　介绍 hostPath 卷 171

6.3.2　检查使用 hostPath 卷的系统 pod 172

6.4　使用持久化存储 173

6.4.1　使用 GCE 持久磁盘作为 pod 存储卷 174

6.4.2　通过底层持久化存储使用其他类型的卷 177

6.5　从底层存储技术解耦 pod 179

6.5.1　介绍持久卷和持久卷声明 179

6.5.2　创建持久卷 180

6.5.3　通过创建持久卷声明来获取持久卷 182

6.5.4　在 pod 中使用持久卷声明 184

6.5.5　了解使用持久卷和持久卷声明的好处 185

6.5.6　回收持久卷 186

6.6　持久卷的动态卷配置 187

6.6.1　通过 StorageClass 资源定义可用存储类型 188

6.6.2　请求持久卷声明中的存储类 188

6.6.3　不指定存储类的动态配置 190

6.7　本章小结 193

7 　ConfigMap 和 Secret ：配置应用程序 195

7.1　配置容器化应用程序 195

7.2　向容器传递命令行参数 196

7.2.1　在 Docker 中定义命令与参数 196

7.2.2　在 Kubernetes 中覆盖命令和参数 199

7.3　为容器设置环境变量 200

7.3.1　在容器定义中指定环境变量 201

7.3.2　在环境变量值中引用其他环境变量 201

7.3.3　了解硬编码环境变量的不足之处 202

7.4　利用 ConfigMap 解耦配置 202

7.4.1　ConfigMap 介绍 202

7.4.2　创建 ConfigMap 203

7.4.3　给容器传递 ConfigMap 条目作为环境变量 206

7.4.4　一次性传递 ConfigMap 的所有条目作为环境变量 208

7.4.5　传递 ConfigMap 条目作为命令行参数 209

7.4.6　使用 configMap 卷将条目暴露为文件 210

7.4.7　更新应用配置且不重启应用程序 216

7.5　使用 Secret 给容器传递敏感数据 218

7.5.1　介绍 Secret 218

7.5.2　默认令牌 Secret 介绍 218

7.5.3　创建 Secret 220

7.5.4　对比 ConfigMap 与 Secret 221

7.5.5　在 pod 中使用 Secret 222

7.6　本章小结 228

8 　从应用访问 pod 元数据以及其他资源 229

8.1　通过 Downward API 传递元数据 229

8.1.1　了解可用的元数据 230

8.1.2　通过环境变量暴露元数据 231

8.1.3　通过 downwardAPI 卷来传递元数据 234

8.2　与 Kubernetes API 服务器交互 237

8.2.1　探究 Kubernetes REST API 238

8.2.2　从 pod 内部与 API 服务器进行交互 242

8.2.3　通过 ambassador 容器简化与 API 服务器的交互 248

8.2.4　使用客户端库与 API 服务器交互 251

8.3　本章小结 253

9 　Deployment: 声明式地升级应用 255

9.1　更新运行在 pod 内的应用程序 256

9.1.1　删除旧版本 pod，使用新版本 pod 替换257

9.1.2　先创建新 pod 再删除旧版本 pod 257

9.2　使用 ReplicationController 实现自动的滚动升级259

9.2.1　运行第一个版本的应用 259

9.2.2　使用 kubectl 来执行滚动式升级 261

9.2.3　为什么 kubectl rolling-update已经过时 265

9.3　使用 Deployment 声明式地升级应用 266

9.3.1　创建一个 Deployment 267

9.3.2　升级 Deployment 269

9.3.3　回滚 Deployment 273

9.3.4　控制滚动升级速率 276

9.3.5　暂停滚动升级 278

9.3.6　阻止出错版本的滚动升级 279

9.4　本章小结 284

10 　StatefulSet ：部署有状态的多副本应用 285

10.1　复制有状态 pod 285

10.1.1　运行每个实例都有单独存储的多副本 286

10.1.2　每个 pod 都提供稳定的标识 287

10.2　了解 Statefulset 289

10.2.1　对比 Statefulset 和 ReplicaSet 289

10.2.2　提供稳定的网络标识 290

10.2.3　为每个有状态实例提供稳定的专属存储 292

10.2.4　Statefulset 的保障 294

10.3　使用 Statefulset 295

10.3.1　创建应用和容器镜像 295

10.3.2　通过 Statefulset 部署应用 296

10.3.3　使用你的 pod 301

10.4　在 Statefulset 中发现伙伴节点 305

10.4.1　通过 DNS 实现伙伴间彼此发现 306

10.4.2　更新 Statefulset 308

10.4.3　尝试集群数据存储 309

10.5　了解 Statefulset 如何处理节点失效 310

10.5.1　模拟一个节点的网络断开 310

10.5.2　手动删除 pod 312

10.6　本章小结 313

11 　了解 Kubernetes 机理 315

11.1　了解架构 315

11.1.1　Kubernetes 组件的分布式特性 316

11.1.2　Kubernetes 如何使用 etcd 318

11.1.3　API 服务器做了什么 322

11.1.4　API 服务器如何通知客户端资源变更 324

11.1.5　了解调度器 325

11.1.6　介绍控制器管理器中运行的控制器 327

11.1.7　Kubelet 做了什么 331

11.1.8　Kubernetes Service Proxy 的作用 332

11.1.9　介绍 Kubernetes 插件 333

11.1.10　总结概览 335

11.2　控制器如何协作 335

11.2.1　了解涉及哪些组件335

11.2.2　事件链 336

11.2.3　观察集群事件 337

11.3　了解运行中的 pod 是什么 339

11.4　跨 pod 网络 340

11.4.1　网络应该是什么样的 340

11.4.2　深入了解网络工作原理 341

11.4.3　引入容器网络接口 343

11.5　服务是如何实现的 344

11.5.1　引入 kube-proxy 344

11.5.2　kube-proxy 如何使用 iptables 344

11.6　运行高可用集群 346

11.6.1　让你的应用变得高可用 346

11.6.2　让 Kubernetes 控制平面变得高可用 347

11.7　本章小结 350

12 　Kubernetes API 服务器的安全防护 351

12.1　了解认证机制 351

12.1.1　用户和组 352

12.1.2　ServiceAccount 介绍 353

12.1.3　创建 ServiceAccount 354

12.1.4　将 ServiceAccount 分配给 pod 356

12.2　通过基于角色的权限控制加强集群安全 358

12.2.1　介绍 RBAC 授权插件 359

12.2.2　介绍 RBAC 资源 360

12.2.3　使用 Role 和 RoleBinding 363

12.2.4　使用 ClusterRole 和 ClusterRoleBinding 367

12.2.5　了解默认的 ClusterRole 和 ClusterRoleBinding 376

12.2.6　理性地授予授权权限 379

12.3　本章小结 379

13 　保障集群内节点和网络安全 381

13.1　在 pod 中使用宿主节点的 Linux 命名空间 381

13.1.1　在 pod 中使用宿主节点的网络命名空间382

13.1.2　绑定宿主节点上的端口而不使用宿主节点的网络命名空间 383

13.1.3　使用宿主节点的 PID 与 IPC 命名空间 385

13.2　配置节点的安全上下文 386

13.3　限制 pod 使用安全相关的特性 396

13.4　隔离 pod 的网络 406

13.5　本章小结 410

14 　计算资源管理 411

14.1　为 pod 中的容器申请资源 411

14.1.1　创建包含资源 requests 的 pod 412

14.1.2　资源 requests 如何影响调度 413

14.1.3　CPU requests 如何影响 CPU 时间分配 418

14.1.4　定义和申请自定义资源 418

14.2　限制容器的可用资源 419

14.3　了解 pod QoS 等级 423

14.4　为命名空间中的 pod 设置默认的 requests 和 limits 427

14.5　限制命名空间中的可用资源总量 431

14.6　监控 pod 的资源使用量 436

14.7　本章小结 442

15 　自动横向伸缩 pod 与集群节点 443

15.1　pod 的横向自动伸缩 444

15.2　pod 的纵向自动伸缩 456

15.3　集群节点的横向伸缩 457

15.4　本章小结 461

16 　高级调度463

16.1　使用污点和容忍度阻止节点调度到特定节点 463

16.2　使用节点亲缘性将 pod 调度到特定节点上 469

16.3　使用 pod 亲缘性与非亲缘性对 pod 进行协同部署 475

16.4　本章小结 483

17 　开发应用的最佳实践 485

17.1　集中一切资源 486

17.2　了解 pod 的生命周期 487

17.3　确保所有的客户端请求都得到了妥善处理 500

17.4　让应用在 Kubernetes 中方便运行和管理 505

17.5　开发和测试的最佳实践 510

17.6　本章小结 515

18 　Kubernetes 应用扩展 517

18.1　定义自定义 API 对象 517

18.2　使用 Kubernetes 服务目录扩展 Kubernetes 528

18.3　基于 Kubernetes 搭建的平台 536

18.4　本章小结 541

A 　在多个集群中使用 kubectl 543

B 　使用 kubeadm 配置多节点集群 549

C 　使用其他容器运行时 563

D 　Cluster Federation 567

第1章 Kubernetes入门 1
1.1 Kubernetes是什么 1
1.2 为什么要用Kubernetes 4
1.3 从一个简单的例子开始 5
1.3.1 环境准备 6
1.3.2 启动MySQL服务 6
1.3.3 启动Tomcat应用 9
1.3.4 通过浏览器访问网页 10
1.4 Kubernetes基本概念和术语 12
1.4.1 Master 12
1.4.2 Node 12
1.4.3 Pod 15
1.4.4 Label（标签） 18
1.4.5 Replication Controller 22
1.4.6 Deployment 26
1.4.7 Horizontal Pod Autoscaler 28
1.4.8 StatefulSet 29
1.4.9 Service（服务） 30
1.4.10 Volume（存储卷） 37
1.4.11 Persistent Volume 41
1.4.12 Namespace（命名空间） 42
1.4.13 Annotation（注解） 43
1.4.14 小结 44
第2章 Kubernetes实践指南 45
2.1 Kubernetes安装与配置 45
2.1.1 系统要求 45
2.1.2 使用kubeadm工具快速安装Kubernetes集群 46
2.1.3 以二进制文件方式安装Kubernetes集群 51
2.1.4 Kubernetes集群的安全设置 59
2.1.5 Kubernetes集群的网络配置 64
2.1.6 内网中的Kubernetes相关配置 64
2.1.7 Kubernetes的版本升级 65
2.1.8 Kubernetes核心服务配置详解 66
2.2 kubectl命令行工具用法详解 86
2.2.1 kubectl用法概述 86
2.2.2 kubectl子命令详解 88
2.2.3 kubectl参数列表 90
2.2.4 kubectl输出格式 90
2.2.5 kubectl操作示例 92
2.3 深入掌握Pod 93
2.3.1 Pod定义详解 93
2.3.2 Pod的基本用法 98
2.3.3 静态Pod 103
2.3.4 Pod容器共享Volume 104
2.3.5 Pod的配置管理 106
2.3.6 在容器内获取Pod信息（Downward API） 119
2.3.7 Pod生命周期和重启策略 124
2.3.8 Pod健康检查 125
2.3.9 玩转Pod调度 127
2.3.10 Init Container（初始化容器） 149
2.3.11 Pod的升级和回滚 152
2.3.12 Pod的扩容和缩容 166
2.3.13 使用StatefulSet搭建MongoDB集群 171
2.4 深入掌握Service 180
2.4.1 Service定义详解 181
2.4.2 Service基本用法 182
2.4.3 Headless Service 187
2.4.4 集群外部访问Pod或Service 192
2.4.5 DNS服务搭建指南 196
2.4.6 自定义DNS和上游DNS服务器 204
2.4.7 Ingress：HTTP 7层路由机制 208
第3章 Kubernetes核心原理 226
3.1 Kubernetes API Server 原理分析 226
3.1.1 Kubernetes API Server概述 226
3.1.2 独特的Kubernetes Proxy API接口 229
3.1.3 集群功能模块之间的通信 230
3.2 Controller Manager 原理分析 231
3.2.1 Replication Controller 232
3.2.2 Node Controller 234
3.2.3 ResourceQuota Controller 235
3.2.4 Namespace Controller 237
3.2.5 Service Controller与Endpoint Controller 237
3.3 Scheduler原理分析 238
3.4 kubelet运行机制分析 242
3.4.1 节点管理 242
3.4.2 Pod管理 243
3.4.3 容器健康检查 244
3.4.4 cAdvisor资源监控 245
3.5 kube-proxy 运行机制分析 247
3.6 深入分析集群安全机制 251
3.6.1 API Server认证管理（Authentication） 251
3.6.2 API Server授木又管理（Authorization） 253
3.6.3 Admission Control（准入控制） 272
3.6.4 Service Account 274
3.6.5 Secret私密凭据 279
3.7 网络原理 282
3.7.1 Kubernetes网络模型 282
3.7.2 Docker的网络基础 284
3.7.3 Docker的网络实现 296
3.7.4 Kubernetes的网络实现 304
3.7.5 Pod和Service网络实战 308
3.7.6 CNI网络模型 321
3.7.7 Kubernetes网络策略 331
3.7.8 开源的网络组件 333
3.8 共享存储原理 363
3.8.1 共享存储机制概述 363
3.8.2 PV详解 364
3.8.3 PVC详解 368
3.8.4 PV和PVC的生命周期 370
3.8.5 StorageClass详解 373
3.8.6 动态存储管理实战：GlusterFS 376
第4章 Kubernetes开发指南 388
4.1 REST简述 388
4.2 Kubernetes API详解 390
4.2.1 Kubernetes API概述 390
4.2.2 API版本 395
4.2.3 API Groups（API组） 395
4.2.4 API方法说明 397
4.2.5 API响应说明 398
4.3 使用Java程序访问Kubernetes API 400
4.3.1 Jersey 401
4.3.2 Fabric8 412
4.3.3 使用说明 413
第5章 Kubernetes运维指南 434
5.1 Kubernetes集群管理指南 434
5.1.1 Node的管理 434
5.1.2 更新资源对象的Label 436
5.1.3 Namespace：集群环境共享与隔离 437
5.1.4 Kubernetes资源管理 441
5.1.5 资源紧缺时的Pod驱逐机制 475
5.1.6 Pod Disruption Budget（主动驱逐保护） 483
5.1.7 Kubernetes集群的高可用部署方案 485
5.1.8 Kubernetes集群监控 496
5.1.9 集群统一日志管理 513
5.1.10 Kubernetes审计日志（Audit Log） 522
5.1.11 使用Web UI（Dashboard）管理集群 523
5.1.12 Helm：Kubernetes应用包管理工具 527
5.2 Trouble Shooting指导 538
5.2.1 查看系统Event事件 538
5.2.2 查看容器日志 540
5.2.3 查看Kubernetes服务日志 541
5.2.4 常见问题 542
5.2.5 寻求帮助 546
5.3 Kubernetes开发中的新功能 546
5.3.1 Pod Preset（运行时参数注入策略） 546
5.3.2 Cluster Federation（集群联邦） 553
5.3.3 容器运行时接口（Container Runtime Interface-CRI） 557
5.3.4 对GPU的支持 561
5.3.5 Kubernetes的演进路线（Roadmap）和开发模式 565
第6章 Kubernetes源码导读 568
6.1 Kubernetes源码结构和编译步骤 568
6.2 kube-apiserver进程源码分析 572
6.2.1 进程启动过程 572
6.2.2 关键代码分析 574
6.2.3 设计总结 589
6.3 kube-controller-manager进程源码分析 592
6.3.1 进程启动过程 592
6.3.2 关键代码分析 595
6.3.3 设计总结 603
6.4 kube-scheduler进程源码分析 605
6.4.1 进程启动过程 605
6.4.2 关键代码分析 610
6.4.3 设计总结 617
6.5 kubelet进程源码分析 619
6.5.1 进程启动过程 619
6.5.2 关键代码分析 624
6.5.3 设计总结 647
6.6 kube-proxy进程源码分析 648
6.6.1 进程启动过程 648
6.6.2 关键代码分析 650
6.6.3 设计总结 665
6.7 kubectl进程源码分析 666
6.7.1 kubectl create命令 667
6.7.2 rolling-update命令 671
第1章Kubernetes系统基础 1
1.1容器技术概述 1
1.1.1容器技术的功用 2
1.1.2容器简史 3
1.1.3Docker的功能限制 4
1.2Kubernetes概述 4
1.2.1Kubernetes简史 4
1.2.2Kubernetes特性 5
1.2.3Kubernetes概念和术语 6
1.3Kubernetes集群组件 10
1.3.1Master组件 10
1.3.2Node组件 12
1.3.3核心附件 13
1.4Kubernetes网络模型基础 13
1.4.1网络模型概述 13
1.4.2集群上的网络通信 15
1.5本章小结 16
第2章Kubernetes快速入门 17
2.1Kubernetes的核心对象 17
2.1.1Pod资源对象 18
2.1.2Controller 19
2.1.3Service 20
2.1.4部署应用程序的主体过程 21
2.2部署Kubernetes集群 22
2.2.1kubeadm部署工具 22
2.2.2集群运行模式 24
2.2.3准备用于实践操作的集群环境 25
2.2.4获取集群环境相关的信息 26
2.3kubectl使用基础与示例 26
2.4命令式容器应用编排 29
2.4.1部署应用（Pod） 30
2.4.2探查Pod及应用详情 33
2.4.3部署Service对象 36
2.4.4扩容和缩容 38
2.4.5修改及删除对象 40
2.5本章小结 41
第3章资源管理基础 42
3.1资源对象及API群组 42
3.1.1Kubernetes的资源对象 43
3.1.2资源及其在API中的组织形式 46
3.1.3访问Kubernetes REST API 48
3.2对象类资源格式 49
3.2.1资源配置清单 50
3.2.2metadata嵌套字段 51
3.2.3spec和status字段 52
3.2.4资源配置清单格式文档 53
3.2.5资源对象管理方式 54
3.3kubectl命令与资源管理 56
3.3.1资源管理操作概述 56
3.3.2kubectl的基本用法 57
3.4管理名称空间资源 59
3.4.1查看名称空间及其资源对象 60
3.4.2管理Namespace资源 61
3.5Pod资源的基础管理操作 61
3.5.1陈述式对象配置管理方式 62
3.5.2声明式对象配置管理方式 64
3.6本章小结 65
第4章管理Pod资源对象 66
4.1容器与Pod资源对象 66
4.2管理Pod对象的容器 68
4.2.1镜像及其获取策略 69
4.2.2暴露端口 70
4.2.3自定义运行的容器化应用 71
4.2.4环境变量 72
4.2.5共享节点的网络名称空间 73
4.2.6设置Pod对象的安全上下文 74
4.3标签与标签选择器 75
4.3.1标签概述 75
4.3.2管理资源标签 77
4.3.3标签选择器 78
4.3.4Pod节点选择器nodeSelector 79
4.4资源注解 80
4.4.1查看资源注解 81
4.4.2管理资源注解 82
4.5Pod对象的生命周期 82
4.5.1Pod的相位 82
4.5.2Pod的创建过程 83
4.5.3Pod生命周期中的重要行为 84
4.5.4容器的重启策略 87
4.5.5Pod的终止过程 87
4.6Pod存活性探测 88
4.6.1设置exec探针 89
4.6.2设置HTTP探针 90
4.6.3设置TCP探针 92
4.6.4存活性探测行为属性 93
4.7Pod就绪性探测 94
4.8资源需求及资源限制 96
4.8.1资源需求 96
4.8.2资源限制 98
4.8.3容器的可见资源 99
4.8.4Pod的服务质量类别 100
4.9本章小结 101
第5章Pod控制器 103
5.1关于Pod控制器 103
5.1.1Pod控制器概述 104
5.1.2控制器与Pod对象 105
5.1.3Pod模板资源 106
5.2ReplicaSet控制器 106
5.2.1ReplicaSet概述 107
5.2.2创建ReplicaSet 108
5.2.3ReplicaSet管控下的Pod对象 109
5.2.4更新ReplicaSet控制器 111
5.2.5删除ReplicaSet控制器资源 114
5.3Deployment控制器 114
5.3.1创建Deployment 115
5.3.2更新策略 116
5.3.3升级Deployment 119
5.3.4金丝雀发布 121
5.3.5回滚Deployment控制器下的应用发布 123
5.3.6扩容和缩容 123
5.4DaemonSet控制器 124
5.4.1创建DaemonSet资源对象 124
5.4.2更新DaemonSet对象 126
5.5Job控制器 127
5.5.1创建Job对象 128
5.5.2并行式Job 129
5.5.3Job扩容 130
5.5.4删除Job 130
5.6CronJob控制器 131
5.6.1创建CronJob对象 131
5.6.2CronJob的控制机制 132
5.7ReplicationController 133
5.8Pod中断预算 133
5.9本章小结 134
第6章Service和Ingress 136
6.1Service资源及其实现模型 136
6.1.1Service资源概述 136
6.1.2虚拟IP和服务代理 138
6.2Service资源的基础应用 140
6.2.1创建Service资源 140
6.2.2向Service对象请求服务 141
6.2.3Service会话粘性 142
6.3服务发现 143
6.3.1服务发现概述 143
6.3.2服务发现方式：环境变量 145
6.3.3ClusterDNS和服务发现 146
6.3.4服务发现方式：DNS 146
6.4服务暴露 147
6.4.1Service类型 147
6.4.2NodePort类型的Service资源 149
6.4.3LoadBalancer类型的Service资源 150
6.4.4ExternalName Service 151
6.5Headless类型的Service资源 152
6.5.1创建Headless Service资源 153
6.5.2Pod资源发现 153
6.6Ingress资源 154
6.6.1Ingress和Ingress Controller 154
6.6.2创建Ingress资源 155
6.6.3Ingress资源类型 157
6.6.4部署Ingress控制器（Nginx） 159
6.7案例：使用Ingress发布tomcat 161
6.7.1准备名称空间 161
6.7.2部署tomcat实例 162
6.7.3创建Service资源 163
6.7.4创建Ingress资源 164

第1章 容器云平台的建设和规划1

1.1 为什么要建设企业级容器云 1

1.2 企业IT系统现状调研分析 2

1.3 企业级容器云技术选型 5

1.4 企业级容器云总体架构方案设计 8

1.5 企业级容器云PaaS与IaaS的边界限定 12

1.6 企业级容器云建设应遵循的标准 14

1.7 小结 18

第2章 资源管理 19

2.1 计算资源管理 19

2.1.1 多集群资源管理 20

2.1.2 资源分区管理 22

2.1.3 资源配额和资源限制管理 23

2.1.4 服务端口号管理 26

2.2 网络资源管理 27

2.2.1 跨主机容器网络方案 27

2.2.2 网络策略管理 38

2.2.3 集群边界路由器Ingress的管理 40

2.2.4 集群DNS域名服务管理 48

2.3 存储资源管理 53

2.3.1 Kubernetes支持的Volume类型 54

2.3.2 共享存储简介 54

2.3.3 CSI简介 58

2.3.4 存储资源的应用场景 61

2.4 镜像资源管理 64

2.4.1 镜像生命周期管理 64

2.4.2 镜像库多租户权限管理 65

2.4.3 镜像库远程复制管理 65

2.4.4 镜像库操作审计管理 66

2.4.5 开源容器镜像库介绍 66

第3章 应用管理 71

3.1 应用的创建 72

3.1.1 应用模板的定义 72

3.1.2 应用配置管理 81

3.2 应用部署管理 84

3.2.1 对多集群环境下应用的一键部署管理 84

3.2.2 对应用更新时的灰度发布策略管理 85

3.3 应用的弹性伸缩管理 89

3.3.1 手工扩缩容 89

3.3.2 基于CPU使用率的自动扩缩容 90

3.3.3 基于自定义业务指标的自动扩缩容 92

3.4 应用的日志管理和监控管理 97

第4章 微服务管理体系 98

4.1 从单体架构到微服务架构 98

4.2 Kubernetes微服务架构 107

4.3 Service Mesh与Kubernetes 114

4.4 Kubernetes多集群微服务解决方案 133

4.5 小结 139

第5章 平台运营管理 140

5.1 DevOps管理 140

5.1.1 DevOps概述 140

5.1.2 DevOps持续集成实战 144

5.1.3 小结 153

5.2 日志管理 153

5.2.1 日志的集中采集 153

5.2.2 日志的查询分析 157

5.3 监控和告警管理 163

5.3.1 监控管理 163

5.3.2 告警管理 170

5.4 安全管理 176

5.4.1 用户角色的权限管理 177

5.4.2 租户对应用资源的访问安全管理 178

5.4.3 Kubernetes系统级的安全管理 182

5.4.4 与应用相关的敏感信息管理 183

5.4.5 网络级别的安全管理 184

5.5 容器云平台关键数据的备份管理 185

5.5.1 etcd数据备份及恢复 185

5.5.2 Elasticsearch数据备份及恢复 188

5.5.3 InfluxDB数据备份及恢复 191

第6章 传统应用的容器化迁移 195

6.1 Java应用的容器化改造迁移 195

6.1.1 Java应用的代码改造 196

6.1.2 Java应用的容器镜像构建 197

6.1.3 在Kubernetes上建模与部署 199

6.2 PHP应用的容器化改造迁移 200

6.2.1 PHP应用的容器镜像构建 201

6.2.2 在Kubernetes上建模与部署 205

6.3 复杂中间件的容器化改造迁移 207

第7章 容器云PaaS平台落地实践 210

7.1 容器云平台运营全生命周期管理 210

7.2 项目准入和准备 211

7.2.1 运营界面的划分 211

7.2.2 项目准入规范和要求 214

7.2.3 多租户资源申请流程 218

7.2.4 集群建设及应用部署 219

7.3 持续集成和持续交付 220

7.3.1 应用程序管理 220

7.3.2 微服务设计规范 221

7.3.3 应用打包/镜像管理规范 224

7.3.4 应用自动化升级部署/灰度发布 229

7.4 服务运营管理 231

7.4.1 应用容量的自动扩缩容 231

7.4.2 故障容灾切换 233

7.4.3 Docker、Kubernetes的升级 233

7.5 监控分析 237

7.5.1 综合监控 237

7.5.2 事件响应和处理 239

7.5.3 数据分析和度量 242

7.6 反馈与优化 244

第8章 案例分享 246

8.1 某大型企业的容器云PaaS平台应用案例 246

8.2 Kubernetes在大数据领域的应用案例 258

8.3 Kubernetes在NFV领域的应用案例 269



第1章 先把 Kubernetes 跑起来 1

1.1 先跑起来 1

1.2 创建 Kubernetes 集群 2

1.3 部署应用 4

1.4 访问应用 5

1.5 Scale 应用 6

1.6 滚动更新 7

1.7 小结 8

第2章 重要概念 9

第3章 部署 Kubernetes Cluster 13

3.1 安装 Docker 14

3.2 安装 kubelet、kubeadm 和 kubectl 14

3.3 用 kubeadm 创建 Cluster 14

3.3.1 初始化Master 14

3.3.2 配置 kubectl 16

3.3.3 安装Pod网络 16

3.3.4 添加 k8s-node1 和 k8s-node2 16

3.4 小结 18

第4章 Kubernetes 架构 19

4.1 Master 节点 19

4.2 Node 节点 20

4.3 完整的架构图 21

4.4 用例子把它们串起来 22

4.5 小结 24

第5章 运行应用 25

5.1 Deployment 25

5.1.1 运行Deployment 25

5.1.2 命令 vs 配置文件 29

5.1.3 Deployment 配置文件简介 30

5.1.4 伸缩 31

5.1.5 Failover 33

5.1.6 用label 控制 Pod 的位置 33

5.2 DaemonSet 36

5.2.1 kube-flannel-ds 36

5.2.2 kube-proxy 37

5.2.3 运行自己的 DaemonSet 38

5.3 Job 40

5.3.1 Pod 失败的情况 41

5.3.2 Job 的并行性 43

5.3.3 定时 Job 45

5.4 小结 48

第6章 通过 Service 访问 Pod 49

6.1 创建 Service 49

6.2 Cluster IP 底层实现 51

6.3 DNS 访问 Service 53

6.4 外网如何访问 Service 55

6.5 小结 58

第7章 Rolling Update 59

7.1 实践 59

7.2 回滚 61

7.3 小结 63

第8章 Health Check 64

8.1 默认的健康检查 64

8.2 Liveness 探测 65

8.3 Readiness 探测 67

8.4 Health Check 在 Scale Up 中的应用 69

8.5 Health Check 在滚动更新中的应用 71

8.6 小结 75

第9章 数据管理 76

9.1 Volume 76

9.1.1 emptyDir 76

9.1.2 hostPath 78

9.1.3 外部 Storage Provider 79

9.2 PersistentVolume & PersistentVolumeClaim 81

9.2.1 NFS PersistentVolume 81

9.2.2 回收 PV 84

9.2.3 PV 动态供给 86

9.3 一个数据库例子 87

9.4 小结 91

第10章 Secret & Configmap 92

10.1 创建 Secret 92

10.2 查看 Secret 93

10.3 在Pod中使用Secret 94

10.3.1 Volume 方式 94

10.3.2 环境变量方式 96

10.4 ConfigMap 97

10.5 小结 100

第11章 Helm—Kubernetes的包管理器 101

11.1 Why Helm 101

11.2 Helm 架构 103

11.3 安装 Helm 104

11.3.1 Helm 客户端 104

11.3.2 Tiller服务器 105

11.4 使用Helm 106

11.5 chart 详解 109

11.5.1 chart 目录结构 109

11.5.2 chart 模板 113

11.5.3 再次实践 MySQL chart 115

11.5.4 升级和回滚 release 118

11.5.5 开发自己的 chart 119

11.6 小结 126

第12章 网 络 127

12.1 Kubernetes 网络模型 127

12.2 各种网络方案 128

12.3 Network Policy 129

12.3.1 部署 Canal 129

12.3.2 实践 Network Policy 130

12.4 小结 135

第13章 Kubernetes Dashboard 136

13.1 安装 136

13.2 配置登录权限 137

13.3 Dashboard 界面结构 139

13.4 典型使用场景 140

13.4.1 部署 Deployment 140

13.4.2 在线操作 141

13.4.3 查看资源详细信息 142

13.4.4 查看 Pod 日志 142

13.5 小结 143

第14章 Kubernetes 集群监控 144

14.1 Weave Scope 144

14.1.1 安装 Scope 144

14.1.2 使用 Scope 145

14.2 Heapster 151

14.2.1 部署 151

14.2.2 使用 152

14.3 Prometheus Operator 155

14.3.1 Prometheus 架构 159

14.3.2 Prometheus Operator 架构 161

14.3.3 部署 Prometheus Operator 162

14.4 小结 167

第15章 Kubernetes 集群日志管理 168

15.1 部署 168

15.2 小结 173
第1章　Docker简介 1
1.1　什么是Docker 1
1.2　为什么要用Docker 3
1.3　Docker基本概念 4
1.3.1　镜像 4
1.3.2　容器 6
1.3.3　镜像仓库 8
1.4　Docker架构及原理 8
1.4.1　Docker架构 8
1.4.2　Docker原理 11
1.4.3　容器网络 15
1.4.4　容器存储 16
1.5　Docker安装 16
1.5.1　手动安装模式 17
1.5.2　Ubuntu中自动化安装Docker 18
1.5.3　CentOS中自动化安装Docker 19
第2章　容器引擎 21
2.1　容器引擎实现原理 22
2.2　容器生命周期管理 29
2.3　容器状态管理 33
2.4　访问运行状态容器 35
2.5　访问容器内容 36
第3章　镜像管理 37
3.1　Dockerfile及镜像制作 37
3.1.1　Dockerfile的作用 37
3.1.2　Dockerfile文件构成 37
3.1.3　常用命令集 38
3.1.4　构建镜像 38
3.2　镜像基本操作 38
3.2.1　从镜像仓库下载镜像 38
3.2.2　将本地镜像上传到镜像仓库 39
3.2.3　查看本地镜像 39
3.2.4　导出和导入本地镜像 40
3.2.5　构建镜像 41
3.2.6　修改本地镜像标识 42
3.2.7　删除本地镜像 42
3.3　Dockerfile优化 42
3.3.1　Dockerfile检查项 42
3.3.2　Dockerfile优化实例 43
3.3.3　检查及优化工具 44
3.4　操作系统基础镜像制作 44
3.4.1　操作系统版本选择 45
3.4.2　操作系统参数调整 45
3.4.3　确定基础rpm包范围 45
3.4.4　确定常用命令范围 46
3.4.5　操作系统镜像制作过程 48
3.4.6　系统资源限制配置说明 49
3.5　容器镜像安全加固 49
3.5.1　容器安全加固规范 49
3.5.2　安全检查工具 51
第4章　镜像仓库管理 52
4.1　Docker Registry 52
4.1.1　Docker Hub 52
4.1.2　第三方公共仓库 53
4.1.3　建立私有镜像仓库 53
4.2　Harbor 54
4.2.1　Harbor架构 55
4.2.2　Harbor的镜像同步机制 56
4.2.3　Harbor用户认证 56
4.2.4　Harbor容器镜像安全扫描 57
4.2.5　Harbor部署实战 57
第5章　Docker相关部署实践 59
5.1　MySQL Docker部署实践 59
5.1.1　MySQL简介 59
5.1.2　MySQL为什么要容器化部署 60
5.1.3　MySQL容器化操作实践 60
5.2　Docker支持GPU实践 62
5.2.1　GPU简介 62
5.2.2　CPU与GPU的对比 63
5.2.3　通过nvidia-docker使用GPU 63
第6章　Kubernetes简介 65
6.1　PaaS简介 65
6.1.1　传统PaaS系统 65
6.1.2　基于Docker的新型PaaS平台 67
6.2　为什么需要Kubernetes 69
6.3　Kubernetes的由来 69
6.3.1　Kubernetes的特点 69
6.3.2　Kubernetes的历史 70
6.4　Kubernetes核心概念 71
第7章　Kubernetes架构和部署 73
7.1　Kubernetes架构及组件 73
7.1.1　Master节点 73
7.1.2　Node节点 75
7.1.3　调度控制原理 76
7.1.4　集群功能模块间的通信 76
7.1.5　Kubernetes高可用方案 77
7.2　Kubernetes部署方案总结 77
第8章　Pod相关核心技术 81
8.1　Pod 81
8.1.1　Pod定义文件详解 81
8.1.2　基本操作 83
8.1.3　Pod与容器 85
8.1.4　镜像 86
8.1.5　其他设置 86
8.1.6　Pod调度 89
8.1.7　Pod生命周期 90
8.2　Label 92
8.3　Replication Controller和Replica Set 93
8.3.1　RC定义文件详解 93
8.3.2　RC与Pod的关联——Label 95
8.3.3　弹性伸缩 97
8.3.4　滚动升级 98
8.3.5　新一代副本控制器Replica Set 100
8.4　Horizontal Pod Autoscaler 101
8.5　Deployment 102
8.6　Job 105
8.7　StatefulSet 106
8.7.1　使用StatefulSet 106
8.7.2　扩容/缩容StatefulSet 108
8.8　ConfigMap 110
8.9　健康检查 112
8.9.1　流程健康检查 112
8.9.2　应用健康检查 112
第9章　Kubernetes Service 114
9.1　容器及Pod间通信 115
9.2　kube-proxy 117
9.3　DNS服务发现机制 118
9.4　Headless服务 119
9.5　Kubernetes服务 120
9.5.1　ClusterIP 122
9.5.2　NodePort 123
9.5.3　LoadBalancer 125
9.5.4　Ingress 125
9.6　网络策略 127
9.7　完整的Kubernetes服务发布实践 128
9.7.1　各Kubernetes集群
LoadBalancer服务发布 130
9.7.2　Ingress服务发布 132
9.7.3　服务发现 133
第10章　Kubernetes网络 134
10.1　单主机Docker网络通信 134
10.1.1　Host模式 135
10.1.2　Container模式 135
10.1.3　None模式 136
10.1.4　Bridge模式 136
10.1.5　基础网络模型的优缺点分析 137
10.2　跨主机Docker网络通信 137
10.2.1　Flannel网络方案 139
10.2.2　Calico网络方案 140
10.2.3　利用Kuryr整合OpenStack与Kubernetes网络 143
10.2.4　网络方案对比分析 144
第11章　Kubernetes存储 145
11.1　存储使用场景 145
11.2　文件存储的几种形式 146
11.3　Flex Volume存储管理方案 148
11.3.1　为什么需要灵活存储组件 148
11.3.2　如何实现灵活存储组件 148
11.4　标准化容器存储接口CSI 149
第12章　安全及多租户配额管理 150
12.1　API服务器认证 151