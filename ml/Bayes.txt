import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.{SparkContext, SparkConf}
import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

object Bayes {
  def main(args: Array[String]) {

    val conf = new SparkConf()                                     //创建环境变量
      .setMaster("local")                                             //设置本地化处理
      .setAppName("Bayes ")                              			//设定名称
    val sc = new SparkContext(conf)                                 //创建环境变量实例
    val data = MLUtils.loadLabeledPoints(sc,"c://bayes.txt")			//读取数据集
    val model = NaiveBayes.train(data, 1.0)						//训练贝叶斯模型
    model.labels.foreach(println)								//打印label值
    model.pi.foreach(println)									//打印先验概率
  }
}

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.classification.NaiveBayes
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

object Bayes {

  def main(args: Array[String]) {
    val conf = new SparkConf()                                     //创建环境变量
      .setMaster("local")                                             //设置本地化处理
      .setAppName("BayesTest ")                              			//设定名称
    val sc = new SparkContext(conf)                                 //创建环境变量实例
    val data = MLUtils.loadLabeledPoints(sc,"c://data.txt")			//读取数据集
    val data = file.map { line =>								//处理数据
      val parts = line.split(',')									//分割数据
      LabeledPoint(parts(0).toDouble, 							//标签数据转换
        Vectors.dense(parts(1).split(' ').map(_.toDouble)))				//向量数据转换
    }

    val splits = data.randomSplit(Array(0.7, 0.3), seed = 11L)			//对数据进行分配
    val trainingData = splits(0)									//设置训练数据
    val testData = splits(1)									//设置测试数据
    val model = NaiveBayes.train(trainingData, lambda = 1.0)			//训练贝叶斯模型
    val predictionAndLabel = testData.map(p => (model.predict(p.features), p.label)) //验证模型
    val accuracy = 1.0 * predictionAndLabel.filter(					//计算准确度
      label => label._1 == label._2).count()						//比较结果
    println(accuracy)										//打印准确度
  }
}
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.{SparkContext, SparkConf}
import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

object Bayes {
  def main(args: Array[String]) {

val conf = new SparkConf()                                     //创建环境变量
.setMaster("local")                                             //设置本地化处理
.setAppName("Bayes ")                              			//设定名称
    val sc = new SparkContext(conf)                                 //创建环境变量实例
    val data = MLUtils.loadLabeledPoints(sc,"c://bayes.txt")			//读取数据集
    val model = NaiveBayes.train(data, 1.0)						//训练贝叶斯模型
    model.labels.foreach(println)								//打印label值
model.pi.foreach(println)									//打印先验概率
}
}


import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.classification.NaiveBayes
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

object Bayes {

  def main(args: Array[String]) {
val conf = new SparkConf()                                     //创建环境变量
.setMaster("local")                                             //设置本地化处理
.setAppName("BayesTest ")                              			//设定名称
    val sc = new SparkContext(conf)                                 //创建环境变量实例
    val data = MLUtils.loadLabeledPoints(sc,"c://data.txt")			//读取数据集
    val data = file.map { line =>								//处理数据
      val parts = line.split(',')									//分割数据
      LabeledPoint(parts(0).toDouble, 							//标签数据转换
Vectors.dense(parts(1).split(' ').map(_.toDouble)))				//向量数据转换
    }

    val splits = data.randomSplit(Array(0.7, 0.3), seed = 11L)			//对数据进行分配
    val trainingData = splits(0)									//设置训练数据
    val testData = splits(1)									//设置测试数据
    val model = NaiveBayes.train(trainingData, lambda = 1.0)			//训练贝叶斯模型
    val predictionAndLabel = testData.map(p => (model.predict(p.features), p.label)) //验证模型
    val accuracy = 1.0 * predictionAndLabel.filter(					//计算准确度
      label => label._1 == label._2).count()						//比较结果
    println(accuracy)										//打印准确度
  }
}


import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.{SparkContext, SparkConf}
import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

object irisBayes {
  def main(args: Array[String]) {

val conf = new SparkConf()                                     //创建环境变量
.setMaster("local")                                             //设置本地化处理
.setAppName("irisBayes")                              		//设定名称
    val sc = new SparkContext(conf)                                 //创建环境变量实例
    val data = MLUtils.loadLabeledPoints(sc,"c://a.txt")				//读取数据集
    val model = NaiveBayes.train(data, 1.0)						//训练贝叶斯模型
val test = Vectors.dense(7.3,2.9,6.3,1.8)						//创建待测定数据
val result = model.predict(“测试数据归属在类别:” + test)			//打印结果
}
}


import org.apache.log4j.{ Level, Logger }
import org.apache.spark.{ SparkConf, SparkContext }
import org.apache.spark.mllib.classification.{ NaiveBayes, NaiveBayesModel }
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

object tmp_naive_bayes {

  def main(args: Array[String]) {
    //1 构建Spark对象
    val conf = new SparkConf().setAppName("naive_bayes")
    val sc = new SparkContext(conf)
    Logger.getRootLogger.setLevel(Level.WARN)

    //读取样本数据1
    val data = sc.textFile("/home/jb-huangmeiling/sample_naive_bayes_data.txt")
    val parsedData = data.map { line =>
      val parts = line.split(',')
      LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))
    }

    //样本数据划分训练样本与测试样本
    val splits = parsedData.randomSplit(Array(0.6, 0.4), seed = 11L)
    val training = splits(0)
    val test = splits(1)

    //新建贝叶斯分类模型模型，并训练
    val model = NaiveBayes.train(training, lambda = 1.0, modelType = "multinomial")

    //对测试样本进行测试
    val predictionAndLabel = test.map(p => (model.predict(p.features), p.label))
    val print_predict = predictionAndLabel.take(20)
    println("prediction" + "\t" + "label")
    for (i <- 0 to print_predict.length - 1) {
      println(print_predict(i)._1 + "\t" + print_predict(i)._2)
    }

    val accuracy = 1.0 * predictionAndLabel.filter(x => x._1 == x._2).count() / test.count()

    //保存模型
    val ModelPath = "/user/huangmeiling/naive_bayes_model"
    model.save(sc, ModelPath)
    val sameModel = NaiveBayesModel.load(sc, ModelPath)

  }
}


