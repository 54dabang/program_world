介绍3 1.1 Node.js简介3 1.2 Node.js的发展历史和特点4 1.2.1 Node.js发展历史4 1.2.2 Node.js未来版本规划5 1.2.3 Node.js的结构6 1.2.4 Node.js v10的特点及新变化7 1.2.5 Node.js的应用场景9 1.3 Node.js在中国的发展10 1.3.1 Node.js中文资源汇总11 1.3.2 Node.js的发展和未来11 1.4 温故知新12 第2章 部署Node.js开发环境13 2.1 在Windows 10下部署Node.js开发环境13 2.1.1 使用安装包安装Node.js14 2.1.2 测试Node.js开发环境16 2.2 在Linux下部署Node.js开发环境18 2.2.1 通过源码安装Node.js18 2.2.2 通过包管理器安装 Node.js19 2.3 在Mac OS X下部署Node.js开发环境20 2.3.1 使用.dmg安装包进行安装20 2.3.2 使用NPM包管理器安装20 2.4 在树莓派3下使用NVM安装Node.js21 2.5 使用NPM进行Node包的安装21 2.6 开发工具介绍22 2.6.1 下载安装Sublime Text 323 2.6.2 Sublime Text操作界面24 2.6.3 安装Sublime Text 3件25 2.6.4 安装Node.js件25 2.6.5 Sublime Text 3快捷键26 2.7 温故知新28 第二篇 Node.js编程基础 第3章 Node.js开发基础31 3.1 语法31 3.1.1 变量31 3.1.2 注释34 3.1.3 数据类型34 3.1.4 函数35 3.1.5 闭包37 3.2 命名规范与编程规范39 3.2.1 命名规范39 3.2.2 编程规范40 3.3 Node.js的控制台42 3.3.1 console对象下的各种方法42 3.3.2 console.log()方法42 3.3.3 console.info()、console.warn()和console.error()方法43 3.3.4 console.dir()方法44 3.3.5 console.time()和console.timeEnd()方法44 3.3.6 console.trace()方法45 3.3.7 console.table()方法45 3.4 温故知新46 第4章 Node.js中的包管理47 4.1 支持新版NPM47 4.1.1 NPM常用命令47 4.1.2 package.json文件50 4.2 模块加载原理与加载方式52 4.2.1 require导入模块52 4.2.2 exports导出模块53 4.3 Node.js核心模块54 4.3.1 http模块—创建HTTP服务器和客户端54 4.3.2 http2模块—创建HTTP/2服务器和客户端58 4.3.3 url模块—url地址解析61 4.3.4 url模块—WHATWG URL地址解析63 4.3.5 querystring模块—查询字符串处理64 4.4 Node.js常用模块64 4.4.1 util模块—实用工具及功能64 4.4.2 path模块—路径处理67 4.4.3 dns模块68 4.5 实战——爬取网页图片69 4.5.1 项目目录与思路70 4.5.2 下载第三方模块70 4.5.3 配置网页地址及图片存放的文件夹70 4.5.4 解析DOM得到图片地址71 4.5.5 请求图片地址71 4.5.6 图片文件的保存72 4.5.7 启动项目73 4.6 温故知新73 第5章 文件系统74 5.1 Node.js文件系统介绍74 5.1.1 同步和异步74 5.1.2 fs模块中的类和文件的基本信息76 5.1.3 文件路径77 5.2 基本文件操作78 5.2.1 打开文件78 5.2.2 关闭文件79 5.2.3 读取文件80 5.2.4 写入文件81 5.3 利用async_hooks跟踪异步请求和处理83 5.4 其他文件操作85 5.5 实战—用IP地址来查询天气情况87 5.5.1 项目思路87 5.5.2 引入基础模块88 5.5.3 解析IP地址信息88 5.5.4 通过公共服务获取城市和天气信息89 5.5.5 遍历IP地址90 5.5.6 将结果写入weather.json90 5.6 温故知新91 第6章 Node.js网络开发92 6.1 构建TCP服务器92 6.1.1 使用Node.js创建TCP服务器92 6.1.2 监听客户端的连接93 6.1.3 查看服务器监听的地址95 6.1.4 连接服务器的客户端数量96 6.1.5 获取客户端发送的数据97 6.1.6 发送数据给客户端98 6.2 构建TCP客户端100 6.2.1 使用Node.js创建TCP客户端100 6.2.2 连接TCP服务器101 6.2.3 获取从TCP服务器发送的数据101 6.2.4 向TCP服务器发送数据102 6.3 构建HTTP服务器103 6.3.1 创建HTTP服务器103 6.3.2 HTTP服务器的路由控制105 6.4 利用UDP协议传输数据与发送消息107 6.4.1 创建UDP服务器107 6.4.2 创建UDP客户端110 6.5 温故知新113 第7章 Node.js数据库开发114 7.1 使用mongoose连接MongoDB114 7.1.1 MongoDB介绍114 7.1.2 使用mongoose连接MongoDB116 7.1.3 使用mongoose操作MongoDB117 7.2 直接连接MongoDB124 7.2.1 使用node-mongodb-native连接MongoDB124 7.2.2 使用node-mongodb-native操作MongoDB124 7.3 连接MySQL131 7.3.1 MySQL介绍131 7.3.2 Node.js连接MySQL134 7.3.3 Node.js操作MySQL135 7.4 实战—学生成绩录入系统138 7.4.1 生成基本的项目结构138 7.4.2 数据库设计139 7.4.3 成绩录入路由开发139 7.4.4 读取学生成绩路由开发141 7.5 温故知新142 第三篇 Node.js实践 第8章 前端框架145 8.1 前端框架介绍—jQuery145 8.1.1 jQuery介绍145 8.1.2 使用jQuery选择器146 8.1.3 使用jQuery进行DOM操作148 8.2 前端框架介绍—React151 8.2.1 React介绍151 8.2.2 React的JSX语言154 8.2.3 React的props和state156 8.2.4 React的组件生命周期159 8.3 实战—图书信息统计162 8.3.1 生成基本的目录结构162 8.3.2 基本的结构开发163 8.3.3 信息图表的开发165 8.4 温故知新171 第9章 Node.js的框架介绍172 9.1 Node.js框架整体介绍172 9.1.1 MVC框架172 9.1.2 全栈框架173 9.1.3 REST API框架174 9.1.4 其他框架174 9.2 Express框架介绍175 9.3 Meteor框架介绍177 9.4 其他框架177 9.4.1 Sails.js177 9.4.2 Derby.js178 9.4.3 Flatiron.js178 9.4.4 Hapi178 9.4.5 Mean.IO179 9.4.6 Mojito179 9.4.7 Socket Stream179 9.4.8 Bearcat180 9.5 如何选择适合自己的框架180 9.5.1 选择框架时的考虑事项180 9.5.2 选择框架的建议181 9.6 温故知新183 0章 Node.js单元测试与新增特性184 10.1 单元测试介绍184 10.2 使用单元测试模块Mocha184 10.2.1 Mocha介绍185 10.2.2 使用断言库should.js190 10.2.3 测试异步方法193 10.2.4 路由测试194 10.2.5 测试覆盖率195 10.2.6 使用Travis-cli197 10.3 Node.js v10中实现异步请求的单元测试197 10.4 温故知新201 1章 其他应用部署相关202 11.1 使用Nginx202 11.1.1 在Linux下安装Nginx203 11.1.2 在Windows下安装Nginx203 11.1.3 Nginx的配置204 11.1.4 使用Nginx部署网站210 11.2 Yarn—新的包管理工具212 11.3 使用PM2214 11.4 使用Koa216 第四篇 Node.js项目案例 2章 使用Express开发个人博客系统221 12.1 项目准备221 12.1.1 项目概述221 12.1.2 前端界面设计221 12.1.3 数据库设计223 12.2 项目开发225 12.2.1 快速生成一个项目225 12.2.2 实现登录页面227 12.2.3 实现博客首页234 12.2.4 博客文章内容页的实现242 12.2.5 博客文章发布的实现246 12.2.6 博客友情链接的实现252 12.2.7 关于博客页面的实现254 12.2.8 博客404页面的实现255 12.2.9 博客侧边栏的优化256 12.2.10 博客修改文章的实现258 12.2.11 博客删除文章的实现263 12.2.12 博客文章分页的实现265 12.3 项目总结268 3章 使用Meteor+MongoDB 开发任务清单269 13.1 项目准备269 13.1.1 Meteor和MongoDB的安装269 13.1.2 项目设计271 13.2 项目开发272 13.2.1 项目展示功能开发272 13.2.2 项目页面美化274 13.2.3 项目数据库开发276 13.2.4 项目操作逻辑开发278 13.3 发布与订阅282 13.4 项目总结286 4章 开发和发布一个Node.js包287 14.1 Node.js包的设计287 14.2 发布到NPM上294 14.3 图标和徽章296 14.4 Node.js v10中的N-API应用298 14.4.1 N-API介绍298 14.4.2 N-API环境准备299 14.4.3 编写扩展299 14.4.4 编译扩展300 14.4.5 调用扩展300 14.5 总结300

第1章 入门 3

1.1 不限于Web 3

1.2 Node.js的应用范围 4

1.3 Node.js的工作原理 6

1.4 Node.js开发的5个方面 8

1.5 安装Node.js 9

第2章 文件操作 11

2.1 Node.js事件循环编程 12

2.2 创建子进程 16

2.3 使用EventEmitter 获取数据 18

2.4 异步读/写文件 20

2.5 Node.js程序运行的两个阶段 24

2.6 小结与练习 24

第3章 Socket网络编程 26

3.1 监听Socket连接 27

3.2 实现消息协议 32

3.3 建立Socket客户端连接 34

3.4 网络应用功能测试 36

3.5 在自定义模块中扩展Node.js核心类 39

3.6 使用Mocha编写单元测试 44

3.7 小结与练习 50

第4章 创建健壮的微服务 52

4.1 安装ØMQ 53

4.2 发布和订阅消息 58

4.3 响应网络请求 61

4.4 运用ROUTER/DEALER模式 65

4.5 多进程Node.js 68

4.6 推送和拉取消息 72

4.7 小结与练习 75

第二部分 数据处理 79

第5章 数据转换 81

5.1 获取外部数据 82

5.2 基于Mocha和Chai的行为驱动开发 84

5.3 提取数据 90

5.4 依次处理数据文件 100

5.5 使用Chrome DevTools调试测试 103

5.6 小结与练习 108

第6章 操作数据库 111

6.1 Elasticsearch入门 112

6.2 使用Commander创建命令行程序 114

6.3 使用request获取JSON 120

6.4 使用jq处理JSON 125

6.5 批量插入Elasticsearch文档 128

6.6 实现Elasticsearch查询命令 132

6.7 小结与练习 139

第三部分 从头开始创建应用程序 143

第7章 开发RESTful Web服务 145

7.1 使用Express的好处 146

7.2 运用Express开发服务端API 147

7.3 编写模块化的Express的服务 149

7.4 使用nodemon保持服务不间断运行 153

7.5 添加搜索API 154

7.6 使用Promise简化代码 159

7.7 操作RESTfull文档 165

7.8 使用async和await模拟同步 168

7.9 为Express提供一个async处理函数 170

7.10 小结与练习 178

第8章 打造漂亮的用户界面 181

8.1 开始使用webpack 182

8.2 生成第一个webpack Bundle 186

8.3 使用Bootstrap美化页面 188

8.4 引入Bootstrap Javascript和jQuery 192

8.5 使用TypeScript进行转译 193

8.6 使用Handlebars处理HTML模板 197

8.7 实现hash路由 200

8.8 在页面中展示对象数据 202

8.9 使用表单保存数据 207

8.10 小结与练习 211

第9章 强化你的应用 214

9.1 设置初始项目 215

9.2 在Express中管理用户会话 219

9.3 添加身份验证UI元素 222

9.4 设置Passport 224

9.5 通过社交账号进行身份验证 228

9.6 编写Express路由 240

9.7 引入书单UI 245

9.8 在生产模式下部署服务 246

9.9 小结与练习 250

第10章 使用Node-RED进行流式开发 252

10.1 配置Node-RED 252

10.2 保护Node-RED 254

10.3 开发一个Node-RED流 255

10.4 使用Node-RED创建HTTP API 259

10.5 处理Node-RED流中的错误 269

10.6 小结 276

附录A 配置Angular开发环境 277

附录B 配置React开发环境 282

索引 285

翻译审校名单 300

第1版赞誉
前言
致谢
关于本书
路线图
编码规范及下载
本书论坛
关于图片
第一部分 Node基础知识介绍
第1章 欢迎进入Node.js的世界
1.1 一个典型的Node Web应用程序
1.2 ES2015、Node和V8
1.3 安装Node
1.4 Node自带的工具
1.5 三种主流的Node程序
1.6 总结
第2章 Node编程基础
2.1 Node功能的组织及重用
2.2 开始一个新的Node项目
2.3 用module.exports微调模块的创建
2.4 用node_modules重用模块
2.5 注意事项
2.6 使用异步编程技术
2.7 用回调处理一次性事件
2.8 用事件发射器处理重复性事件
2.9 异步开发的难题
2.10 异步逻辑的顺序化
2.11 何时使用串行流程控制
2.12 实现串行化流程控制
2.13 实现并行化流程控制
2.14 利用社区里的工具
2.15 总结
第3章 Node Web程序是什么
3.1 了解Node Web程序的结构
3.2 搭建一个RESTful Web服务
3.3 添加数据库
3.4 添加用户界面
3.5 总结
第二部分 Node的Web开发
第4章 前端构建系统
4.1 了解基于Node的前端开发
4.2 用npm运行脚本
4.3 用Gulp实现自动化
4.4 用Webpack构建Web程序
4.5 总结
第5章 服务器端框架
5.1 用户画像
5.2 框架是什么
5.3 Koa
5.4 Kraken
5.5 hapi
5.6 Sails.js
5.7 DerbyJS
5.8 Flatiron.js
5.9 Loop
5.10 比较
5.11 编写模块化代码
5.12 用户选择
5.13 总结
第6章 深入了解Connect和Express
6.1 Connect
6.2 Express
6.3 总结
第7章 Web程序的模板
7.1 用模板保持代码的整洁性
7.2 Embedded JavaScript的模板
7.3 使用Mustache模板语言与Hogan
7.4 用Pug做模板
7.5 总结
第8章 存储数据
8.1 关系型数据库
8.2 PostgreSQL
8.3 Knex
8.4 MySQL和PostgreSQL
8.5 ACID保证
8.6 NoSQL
8.7 分布式数据库
8.8 MongoDB
8.9 键/值存储
8.10 Redis
8.11 嵌入式数据库
8.12 LevelDB
8.13 昂贵的序列化和反序列化
8.14 浏览器内存储
8.15 存储托管
8.16 选哪个数据库
8.17 总结
第9章 测试Node程序
9.1 单元测试
9.2 功能测试
9.3 处理失败的测试
9.4 总结
第10章 Node程序的部署及运维
10.1 安置Node程序
10.2 部署的基础知识
10.3 在线时长和性能的最大化
10.4 总结
第三部分 超越Web开发
第 11 章编写命令行程序
11.1 了解惯例和理念
11.2 parse-json
11.3 使用命令行参数
11.4 用npm分享命令行工具
11.5 用管道连接脚本
11.6 解释真正的脚本
11.7 总结
第12章 用Electron征服桌面
12.1 认识Electron
12.2 创建一个Electron程序
12.3 搭建完整的桌面端程序
12.4 React程序
12.5 构建与分发
12.6 总结
附录 A 安装Node
A.1 用安装程序安装Node
A.2 其他安装方式
附录 B 自动化的网络抓取
B.1 认识网络抓取器
B.2 用cheerio进行基本的网络抓取
B.3 用jsdom处理动态内容
B.4 识别原始数据
B.5 总结
附录 C Connect的官方中间件
C.1 解析cookie、请求主体和查询字符串
C.2 实现Web程序核心功能的中间件
C.3 处理Web程序安全的中间件
C.4 提供静态文件
术语表


项目一 TF物业系统客户端界面
学习目标
学习路径
任务描述
任务技能
技能点1 Node．js概述
技能点2 Node．js应用
技能点3 使用WebStorm调试Node．js
任务实施
任务总结
英语角
任务习题

项目二 TF物业系统用户管理界面
学习目标
学习路径
任务描述
任务技能
技能点1 REP1
技能点2 conso1e模块
技能点3 timer模块
技能点4 模块化
任务实施
任务总结
英语角
任务习题

项目三 TF物业系统商品管理界面
学习目标
学习路径
任务描述
任务技能
技能点1 Buffer
技能点2 uti1模块
技能点3 events模块
任务实施
任务总结
英语角
任务习题

项目四 TF物业系统数据库表的建立
学习目标
学习路径
任务描述
任务技能
技能点1 process
技能点2 chi1d_process模块
技能点3 函数
任务实施
任务总结
英语角
任务习题

项目五 服务端用户管理功能
学习目标
学习路径
任务描述
任务技能
技能点1 fs模块
技能点2 Stream（数据流）
技能点3 Path模块
技能点4 ur1模块
任务实施
任务总结
英语角
任务习题

项目六 服务端商品管理功能
学习目标
学习路径
任务描述
任务技能
技能点1 MongoDB数据库
技能点2 MySQ1数据库
技能点3 HTTP服务
任务实施
任务总结
英语角
任务习题

项目七 服务端缴费管理功能
学习目标
学习路径
任务描述
任务技能
技能点1 Express框架
技能点2 数据库使用
技能点3 静态资源
任务实施
任务总结
英语角
任务习题

项目八 客户端与服务端交互
学习目标
学习路径
任务描述
任务技能
技能点1 测试
技能点2 部署发布
任务实施
任务总结
英语角
任务习题
收起全部↑

第1章　Node.js入门
1.1　Node.js介绍
1.1.1　什么是Node.js
1.1.2　Node.js的历史和发展过程
1.1.3　Node.js的特点和应用场景
1.1.4　安装Node.js
1.1.5　实战演练：使用Node.js搭建一个HTTP Server
1.2　NPM
1.2.1　NPM介绍
1.2.2　NPM模块结构
1.2.3　使用NVM控制Node.js版本
1.2.4　Web代理工具NProxy
1.2.5　实战演练：在npm.org上发布一个模块
1.3　Visual Studio Code编辑器
1.3.1　Visual Studio Code的安装及其功能
1.3.2　使用Visual Studio Code调试Node.js
1.4　本章小结
第2章　遇见Koa
2.1　Koa介绍
2.1.1　Koa的前世今生
2.1.2　Koa的安装及搭建（视频演示）
2.2　Context对象
2.2.1　什么是Context对象
2.2.2　常用属性和方法
2.3　Koa的中间件
2.3.1　中间件概念
2.3.2　实战演练：使用中间件获取响应时间（视频演示）
2.3.3　常用Koa中间件介绍
2.4　本章小结
第3章　路由
3.1　路由介绍
3.1.1　路由的概念
3.1.2　实战演练：使用Koa中的简单路由自定义404页面
3.2　koa-router路由中间件
3.2.1　koa-router的安装和介绍
3.2.2　RESTful规范
3.2.3　koa-router用法（视频演示）
3.2.4　通过koa-router实现接口的权限控制
3.3　本章小结
第4章　HTTP
4.1　HTTP介绍
4.1.1　HTTP的诞生
4.1.2　URI和URL
4.1.3　常用的HTTP状态码
4.1.4　常用的请求方法
4.1.5　常用的HTTP首部字段
4.2　HTTP/2
4.2.1　采用二进制格式传输数据
4.2.2　多路复用
4.2.3　流的优先级
4.2.4　首部压缩
4.2.5　服务端推送
4.3　Node.js的querystring模块
4.3.1　querystring模块的使用
4.3.2　koa-router中的querystring（视频演示）
4.3.3　实战演练：电影搜索列表
4.4　koa-bodyparser中间件
4.4.1　koa-bodyparser介绍
4.4.2　koa-bodyparser的使用（视频演示）
4.4.3　实战演练：实现用户注册功能并进行数据解析
4.5　本章小结
第2篇　应用实战
第5章　构建Koa Web应用
5.1　MVC
5.1.1　MVC的发展历程
5.1.2　MVC三层架构
5.1.3　在Koa中实现MVC（视频演示）
5.2　模板引擎
5.2.1　什么是模板引擎
5.2.2　常见的模板引擎有哪些
5.2.3　Nunjucks语法介绍
5.2.4　Nunjucks在Koa中的应用（视频演示）
5.3　静态资源
5.3.1　静态资源的类型
5.3.2　koa-static简介
5.3.3　koa-static常用配置（视频演示）
5.3.4　实战演练：开发登录验证页面（视频演示）
5.4　其他常用开发技巧
5.4.1　简易版koa-json插件开发（视频演示）
5.4.2　使用koa-multer中间件实现文件上传
5.5　本章小结
第6章　数据库
6.1　数据库介绍
6.1.1　什么是数据库
6.1.2　常见的数据库
6.2　在Koa中应用MySQL数据库
6.2.1　下载安装MySQL
6.2.2　Sequelize介绍
6.2.3　实战演练：客户信息数据展现
6.3　在Koa中应用MongoDB数据库
6.3.1　下载安装MongoDB
6.3.2　Mongoose介绍
6.3.3　实战演练：课程表数据展现
6.4　在Koa中应用Redis数据库
6.4.1　什么是Redis
6.4.2　Redis库介绍
6.4.3　实战演练：持久化用户Session状态
6.5　本章小结
第7章　单元测试
7.1　Chai断言库
7.1.1　Chai的介绍和安装
7.1.2　Chai的使用
7.2　Mocha框架
7.2.1　Mocha的介绍和安装
7.2.2　Mocha的使用
7.3　SuperTest测试RESTful API
7.3.1　SuperTest的介绍和安装
7.3.2　SuperTest的使用
7.4　其他常用工具
7.4.1　Nock模拟服务器响应
7.4.2　Nyc测试覆盖率
7.5　本章小结
第8章　优化与部署
8.1　服务优化
8.1.1　使用log4js记录日志（视频演示）
8.1.2　自定义错误页（视频演示）
8.1.3　异常捕获处理
8.1.4　实战演练：优化Web开发项目结构（视频演示）
8.2　部署
8.2.1　Node.js进程管理器PM2
8.2.2　应用容器引擎Docker
8.2.3　在线免费开源集成Travis CI
8.2.4　利用Nginx部署HTTPS
8.3　服务监控
8.3.1　Node.js服务性能指标及采集
8.3.2　日志分析系统ELK
8.3.3　Keymetrics监控云服务
8.4　本章小结
第3篇　项目实战：从零开始搭建微信小程序后台
第9章　云相册功能介绍和准备工作
9.1　应用介绍
9.2　小程序开发账户申请
9.3　准备域名
9.3.1　注册域名
9.3.2　实名认证
9.3.3　域名备案
9.4　准备云服务器
9.5　配置DNS解析
9.6　本章小结
第10章　云相册服务开发
10.1　小程序登录
10.2　扫码登录
10.3　小程序接口
10.3.1　建立数据模型
10.3.2　定义相册接口
10.3.3　定义照片接口
10.4　后台管理系统接口
10.4.1　定义用户列表接口
10.4.2　定义权限管理接口
10.4.3　定义获取照片接口
10.4.4　定义审核照片接口
10.5　记录日志
10.6　本章小结
第11章　云相册小程序开发
11.1　项目介绍
11.2　结合Redux实现小程序组件通信
11.3　“个人中心”页面
11.4　“新建相册”页面
11.4.1　自定义组件用法介绍
11.4.2　组件事件
11.4.3　实现“新建相册”组件
11.5　“相册列表”页面
11.5.1　展示相册列表
11.5.2　进入指定相册页面
11.5.3　调用“新建相册”组件
11.6　“照片列表”页面
11.6.1　获取照片列表数据
11.6.2　数据按日期分组
11.6.3　上传照片到当前相册
11.6.4　单击图片显示高清大图
11.7　小程序审核发布
11.8　本章小结
第12章　云相册后台管理系统
12.1　整体架构
12.1.1　基本文件结构
12.1.2　前端模板结构
12.1.3　路由设计
12.2　相册列表及相关功能
12.2.1　分类展示照片
12.2.2　审核照片
12.2.3　HTTP通信
12.2.4　分页控件
12.3　用户列表及相关功能
12.4　登录与鉴权
12.4.1　登录
12.4.2　鉴权中间件
12.5　额外展开：SVG动画效果及其他
12.6　本章小结
第13章　云相册服务器部署
13.1　部署数据库
13.1.1　存储设置
13.1.2　安全策略
13.2　部署Nginx
13.2.1　安装OpenResty
13.2.2　Nginx配置
13.2.3　插件扩展
13.3　部署HTTPS
13.3.1　强制HTTPS跳转
13.3.2　添加WWW跳转
13.4　配置Koa服务