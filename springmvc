
第2篇 深入剖析Spring MVC源码

第7章 MVC简介 138

7.1 MVC的体系结构和工作原理 138

7.1.1 控制器 139

7.1.2 视图 139

7.1.3 模型 140

7.2 Web MVC的体系结构和工作原理 140

第8章 Spring Web MVC工作流 142

8.1 组件及其接口 142

8.1.1 DispatcherServlet 143

8.1.2 处理器映射 143

8.1.3 处理器适配器 144

8.1.4 处理器与控制器 145

8.1.5 视图解析器 145

8.1.6 视图 146

8.2 组件间的协调通信 146

第9章 DispatcherServlet的实现 148

9.1 深入剖析GenericServlet和HttpServlet 150

9.1.1 HTTP和Servlet规范简介 150

9.1.2 Servlet和GenericServlet详解 152

9.1.3 HttpServlet详解 152

9.2 深入剖析DispatcherServlet 159

9.2.1 HttpServletBean详解 161

9.2.2 FrameworkServlet详解 162

9.2.3 DispatchServlet详解 166

9.3 根共享环境的加载 182

9.3.1 基于Servlet环境监听器的实现结构 182

9.3.2 多级Spring环境的加载方式 189

第10章 基于简单控制器的流程实现 194

10.1 通过Bean名称URL处理器映射获取处理器执行链 194

10.1.1 抽象处理器映射 196

10.1.2 抽象URL处理器映射 199

10.1.3 抽象探测URL处理器映射 209

10.1.4 Bean名称URL处理器映射 210

10.2 通过处理器适配器把请求转接给处理器 211

10.2.1 简单控制处理适配器的设计 211

10.2.2 表单控制器处理HTTP请求的流程 212

10.3 对控制器类体系结构的深入剖析 214

10.3.1 Web内容产生器 215

10.3.2 抽象控制器类 217

10.3.3 基本命令控制器 218

10.3.4 抽象表单控制器 222

10.3.5 简单表单控制器 229

第11章 基于注解控制器的流程实现 230

11.1 默认注解处理器映射的实现 230

11.2 注解处理器适配器的架构设计 237

11.3 深入剖析注解控制器的处理流程 238

11.3.1 解析处理器方法 241

11.3.2 解析处理器方法的参数 253

11.3.3 绑定、初始化领域模型和管理领域模型 272

11.3.4 调用处理器方法 278

11.3.5 处理方法返回值和隐式模型到模型或视图的映射 281

11.3.6 如何更新模型数据 286

第12章 基于HTTP请求处理器实现RPC 288

12.1 深入剖析RPC客户端的实现 289

12.2 深入剖析RPC服务端的实现 299

第13章 深入剖析处理器映射、处理器适配器及处理器的实现 311

13.1 处理器映射的实现架构 311

13.1.1 处理器映射实现类 312

13.1.2 处理器映射抽象类 313

13.1.3 对处理器映射类的代码剖析 315

13.2 处理器适配器的实现架构 322

13.3 深入剖析处理器 325

13.3.1 简单控制器 325

13.3.2 注解控制器 339

13.3.3 HTTP请求处理器 342

13.4 拦截器的实现架构 344

第14章 视图解析和视图显示 353

14.1 基于URL的视图解析器和视图 353

14.1.1 内部资源视图解析器和内部资源视图 365

14.1.2 瓦块视图解析器和瓦块视图 371

14.1.3 模板视图解析器和模板视图 373

14.1.4 XSLT视图解析器和XSLT视图 377

14.2 更多的视图解析器 378

14.2.1 Bean名称视图解析器 378

14.2.2 内容选择视图解析器 379

14.2.3 资源绑定视图解析器 383

14.2.4 XML视图解析器 385




Spring MVC 的跨域解决方案


spring使用jsonp解决跨域

使用CORS(跨域资源共享)解决跨域问题

什么是跨域
一句话：同一个ip、同一个网络协议、同一个端口，三者都满足就是同一个域，否则就是跨域。

为什么非得跨域
基于两个方面：

a. web应用本身是部署在不同的服务器上
b.基于开发的角度 --- 前后端分离
web应用本身是部署在不同的服务器上，对应的域名也就有所不同
比如百度。
主域名：https://www.baidu.com/
二级域名：http://image.baidu.com/， http://music.baidu.com/，http://wenku.baidu.com/
需要在不同的域之间，通过ajax方式互相请求，是非常常见的需求。

spring使用jsonp解决跨域
Spring 4中增加了对jsonp的原生支持，只需要ControllerAdvice就可以开启，方法如下：
首先新建一个Advice类，我们叫做“JsonpAdvice”，然后在里面定义接收jsonp请求的参数key：

package cn.isuyang.web.sso.advice;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.AbstractJsonpResponseBodyAdvice;
/**
* 使用jsonp实现跨域的支持
* @author  WangSen(wangsenhehe@126.com)
* @Date    2018年1月8日
*/
@ControllerAdvice("cn.isy.web.sso.web")
public class JsonpAdvice extends AbstractJsonpResponseBodyAdvice {
    public JsonpAdvice() {
        super("callback");
    }
}
@ControllerAdvice("cn.isy.web.sso.web")指定作用的包名
supper("callback")指定的是url中callback：
http://sso.isy.cn/logout?callback=successCallback

注意：
我们还可以重写AbstractJsonpResponseBodyAdvice中的feforeBodyWriteInternal方法：
做到实现url携带callback就返回jsonp格式，没有就返回正常格式

img
img
controller中
controller中的代码正常编写就OK，不用修改任何东西。
只要保证在cn.isy.web.sso.web包下即可！

jquery ajax
注意：必须使用jsonp的方式提交请求！

$.ajax({
                type : "get",
                async:false,
                dataType:'jsonp',
                url: 'http://sso.isy.cn/login.json',
                data: $("#loginForm").serialize(),
                crossDomain: true,
                jsonpCallback:"successCallback",
                xhrFields: {
                    withCredentials: true
                },
                success : function(data){

                },
                error:function(data){
                    console.log("登录出错");
                    $.we.utils.gotoUrl("/");
                }
            });
使用CORS(跨域资源共享)解决跨域问题
有关cors的介绍可以去详细看一下，这里就不作重复了：
CORS详解
跨资源共享CORS详解

主要配置
Access-Control-Allow-Origin:  http://www.YOURDOMAIN.com            // 设置允许请求的域名，多个域名以逗号分隔
Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS      // 设置允许请求的方法，多个方法以逗号分隔
Access-Control-Allow-Headers: Authorization                        // 设置允许请求自定义的请求头字段，多个字段以逗号分隔
Access-Control-Allow-Credentials: true                              // 设置是否允许发送 Cookies
使用注解CrossOrigin
在controller类上添加CrossOrigin注解表示当前类中的所有入口函数都
可以实现跨域。也可以指定某个conroller中具体的方法。

了解一下这个注解的内容：

jquery ajax的写法
注意：这里不用使用jsonp的方式请求普通的ajax即可！，因为浏览器自己可以去做!

            $.ajax({
                type : "get",
                url: 'http://sso.isy.cn/login.json',
                data: $("#loginForm").serialize(),
                xhrFields: {
                    withCredentials: true //注意这里必须指定否则cookie无法传递过去
                },
                success : function(data){

                },
                error:function(data){
                    console.log("登录出错");
                    $.we.utils.gotoUrl("/");
                }
            });

CORS全局配置

https://www.jianshu.com/p/d05303d34222

解释cors的原理不错 https://zhuanlan.zhihu.com/p/24411090


