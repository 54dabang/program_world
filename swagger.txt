Swagger2 的正确玩儿法
ViYoung  Java知音  今天
点击上方“Java知音”，选择“置顶公众号”

技术文章第一时间送达！



作者：ViYoung

来自公众号：Vi的技术博客

推荐阅读

1. SpringBoot 整合篇

2. 手写一套迷你版HTTP服务器

3. 记住：永远不要在MySQL中使用UTF-8

4. Springboot启动原理解析

Swagger2简介
简单的来说，Swagger2的诞生就是为了解决前后端开发人员进行交流的时候API文档难以维护的痛点，它可以和我们的Java程序完美的结合在一起，并且可以与我们的另一开发利器Spring Boot来配合使用。

开始使用
第一步：导入POM文件
         <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>

        <!-- 这里使用 swagger-bootstrap-ui 替代了原有丑陋的ui，拯救处女座~ -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>swagger-bootstrap-ui</artifactId>
            <version>1.9.0</version>
        </dependency>
第二步：添加配置类
我们需要新增一个Swagger2Config 的配置类：

/**
 *    Swagger2 配置类
 * @author vi
 * @since 2019/3/6 8:31 PM
 */
@Configuration
public class Swagger2Config {

    @Bean
    public Docket createRestApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .select()
                .apis(RequestHandlerSelectors.basePackage("indi.viyoung.viboot.*"))
                .paths(PathSelectors.any())
                .build();
    }

    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                .title("viboot-swagger2")    //标题
                .description("Restful-API-Doc")    //描述
                .termsOfServiceUrl("https://www.cnblogs.com/viyoung") //这里配置的是服务网站，我写的是我的博客园站点~欢迎关注~
                .contact(new Contact("Vi的技术博客", "https://www.cnblogs.com/viyoung", "18530069930@163.com")) // 三个参数依次是姓名，个人网站，邮箱
                .version("1.0") //版本
                .build();
    }
}
第三步：在启动类中添加配置
注意一定要记得添加@EnableSwagger2注解

/**
 * @author vi
 * @since 2019/3/6 6:35 PM
 */
@SpringBootApplication
@ComponentScan(value = "indi.viyoung.viboot.*")
@MapperScan(value = "indi.viyoung.viboot.swagger2.mapper")
@EnableSwagger2
@EnableSwaggerBootstrapUI
public class ViBootSwaggerApplication {
    public static void main(String[] args) {
        SpringApplication.run(ViBootSwaggerApplication.class, args);
    }
}
第四步：通过注解来完成API文档
1. @Api
注解名称	注解属性	作用域	属性作用
@Api	tags	类	说明该类的作用

value	类	说明该类的作用
举个🌰：

@Api(value = "用户类控制器",tags="用户类控制器")
public class UserController {
...
}


2 . @ApiOperation
注解名称	注解属性	作用域	属性作用
@ApiOperation()	value	方法	描述方法作用

notes	方法	提示内容

tags	方法	分组
举个🌰：

@ApiOperation(value = "获取用户列表",notes = "获取用户列表")
public List<User> get() {
     ...
}


3. @ApiParam
注解名称	注解属性	作用域	属性作用
@ApiParam()	name	方法参数	参数名

value	方法参数	参数说明

required	方法参数	是否必填
举个🌰：

@ApiOperation(value="获取用户详细信息", notes="根据url的id来获取用户详细信息")
public User get(@ApiParam(name="id",value="用户id",required=true) Long id) {
    log.info("GET..{}...方法执行。。。",id);
    return userService.getById(id);
}


4. @ApiModel && @ApiModelProperty
注解名称	注解属性	作用域	属性作用
@ApiModel()	value	类	对象名

description	类	描述
@ApiModelProperty()	value	方法	字段说明

name	方法	属性名

dataType	方法	属性类型

required	方法	是否必填

example	方法	举例

hidden	方法	隐藏
举个🌰：

@ApiModel(value="user对象",description="用户对象user")
public class User implements Serializable {

    private static final long serialVersionUID = 1L;

    @TableId(value = "id", type = IdType.AUTO)
    @ApiModelProperty(value = "用户ID",example = "1000001",hidden=true)
    private Long id;

    @ApiModelProperty(value="用户名",required = true,dataType = "String")
    private String userName;

    @ApiModelProperty(value = "密码")
    private String password;
}


5. @ApiImplicitParam && @ApiImplicitParams
@ApiImplicitParam可以单个用于方法之上，多个参数的话可以把@ApiImplicitParam放到@ApiImplicitParams中，这里只罗列@ApiImplicitParam的属性：

注解名称	注解属性	作用域	属性作用
@ApiImplicitParam()	value	方法	参数说明

name	方法	参数名

dataType	方法	数据类型

paramType	方法	参数类型

example	方法	举例
举个🌰：

    @ApiImplicitParams({
            @ApiImplicitParam(name = "user", value = "用户实体user", required = true, dataType = "User")
    })
    public void put(User user) {
        userService.updateById(user);
        log.info("PUT方法执行。。。");
    }



这里需要注意一点，我们并没有在注解中写图中圈中的两个参数，这个是去读取了我们刚刚为User类的注解，并将用户名设置为必填！
6.@ApiResposne && @ApiResponses
@ApiResponses与@ApiResponse的关系和@ApiImplicitParam && @ApiImplicitParams 的关系和用法都是类似的

注解名称	注解属性	作用域	属性作用
@ApiResponse()	response	方法	返回类

code	方法	返回码

message	方法	返回信息

examples	方法	例子

最后再聊聊这个UI
先贴几张spring-fox的ui（正是我们所熟知的那一套）





相信看到这里，大家心里对于这两套UI的选择应该都有个答案了（PS：不排除和我的审美不一致的~），个人觉得bootstrap风格的ui不仅好看，而且有各种强大的功能~

导出md文档


参数缓存
------------------------


API文档汇集工具：Swagger Butler


今天推荐一个TJ朋友的开源项目，国产作品。在Spring Boot、Spring Cloud流行的当下，还是非常实用的。我们自己也用了一下，正好最近发布2.0，支持Spring Boot 2.x了。所以给大家推荐一下~

当我们构建分布式系统的时候，虽然我们可以用Swagger来方便为每个服务自动产出API文档页面。但是随着服务数量的增多，内部服务间的依赖关系的复杂度增加，每个服务开发人员要关心和查阅的文档变得越来越多。由于每个服务的文档地址可能都不一样，这使得不得不维护一个文档的索引来方便查阅，并且这个索引还需要不断的去维护更新。

那么有没有什么工具可以帮我们快速的汇集这些服务的Swagger文档呢？只需要记住一个访问地址，就可以访问所有服务的API文档？当服务增加的时候，不需要手工维护就能自动发现新服务的API文档？如果您有上面的这些问题，那么不妨看看这个项目，或许可以解决您的这些烦恼！

Swagger Butler是一个基于Swagger与Zuul构建的API文档汇集工具。通过构建一个简单的Spring Boot应用，增加一些配置就能将现有整合了Swagger的Web应用的API文档都汇总到一起，方便查看与测试。

项目地址

Github：https://github.com/dyc87112/swagger-butler

Gitee：https://gitee.com/didispace/swagger-butler

版本说明
swagger-butler的使用版本与Spring Boot版本直接相关，对应关系如下；

Spring Boot版本	swagger-butler版本
1.x	1.x
2.x	2.x
当前最新版本2.0.0，1.x版本将不再继续更新。

快速入门
该工具的时候非常简单，先通过下面几步简单入门：

第一步：构建一个基础的Spring Boot应用

如您还不知道如何创建Spring Boot应用，可以先阅读本篇入门文章

第二步：在pom.xml中引入依赖

<dependencies>


<dependency>


<groupId>
com.didispace
</groupId>


<artifactId>
swagger-butler-core
</artifactId>


<version>
2.0.0
</version>


</dependency>

</dependencies>

第三步：创建应用主类，增加 @EnableSwaggerButler注解开启Swagger Butler功能

@EnableSwaggerButler

@SpringBootApplication

public

class

StaticApplication

{




public

static

void
 main
(
String
[]
 args
)

{


SpringApplication
.
run
(
StaticApplication
.
class
);


}



}

第四步：配置文件中增加Swagger文档的地址配置

spring
.
application
.
name
=
swagger
-
butler
-
example
-
static

server
.
port
=
11000



# default config

swagger
.
butler
.
api
-
docs
-
path
=
/v2/
api
-
docs

swagger
.
butler
.
swagger
-
version
=
2.0



# swagger resource

zuul
.
routes
.
user
.
path
=
/service-a/
**

zuul
.
routes
.
user
.
url
=
http
:
//localhost:10010/

swagger
.
butler
.
resources
.
user
.
name
=
user
-
service



# swagger resource

zuul
.
routes
.
product
.
path
=
/service-b/
**

zuul
.
routes
.
product
.
url
=
http
:
//localhost:10020/

swagger
.
butler
.
resources
.
product
.
name
=
product
-
service

swagger
.
butler
.
resources
.
product
.
api
-
docs
-
path
=
/xxx/
v2
/
api
-
docs

swagger
.
butler
.
resources
.
product
.
swagger
-
version
=
2.0

上面配置了两个文档位置，由于这里还没有引入服务发现机制，所以Zuul的路由需要我们自己配置。然后在配置resource信息的时候，从1.1.0版本开始做了较大的调整，由于具体的访问路径是可以通过路由信息产生的，所以对于resource的配置信息只关注三个内容：

name：API文档在swagger中展现名称

api-docs-path：要获取的swagger文档的具体路径；如果不配置会使用全局的 swagger.butler.api-docs-path配置，默认为 /v2/api-docs。；这里的配置主要用户一些特殊情况，比如服务自身设置了context-path，或者修改了swagger默认的文档路径

swagger-version：swagger版本信息；如果不配置会使用全局的 swagger.butler.swagger-version配置，默认为 2.0。

第五步：查看聚合文档。

原生文档：访问 http://localhost:11000/swagger-ui.html





增强文档：访问 http://localhost:11000/doc.html



代码示例具体可见 swagger-butler-example-static目录

Zuul的路由与SwaggerResources配置之间的关系
如上示例中 <route-name>展示了Zuul的路由名称与SwaggerResources配置之间的关联关系

zuul
.
routes
.<
route
-
name
>.
path
=
/service-b/
**

zuul
.
routes
.<
route
-
name
>.
url
=
http
:
//localhost:10020/



swagger
.
butler
.
resources
.<
route
-
name
>.
name
=
product
-
service

swagger
.
butler
.
resources
.<
route
-
name
>.
api
-
docs
-
path
=
/xxx/
v2
/
api
-
docs

swagger
.
butler
.
resources
.<
route
-
name
>.
swagger
-
version
=
2.0

注意：在没有使用自动配置或整合服务治理的时候，要生成Swagger文档的时候，resources信息中的 name属性是必须配置的， api-docs-path和 swagger-version不配置的时候会使用默认的全局配置

全局配置
对于Swagger文档获取的全局配置内容，目前主要包含下面几个参数：

swagger
.
butler
.
api
-
docs
-
path
=
/v2/
api
-
docs

swagger
.
butler
.
swagger
-
version
=
2.0

使用Zuul中的路由自动配置
在快速入门示例中我们配置了两个路由信息，同时为这两个路由信息配置了对应的Swagger信息来获取API文档详情，从1.1.0版本开始，增加了几个通过Zuul的路由配置来自动生成文档信息的参数，这样可以减少快速入门示例中那些繁琐的配置。对于快速入门例子，我们可以做如下改造：

# swagger resource

zuul
.
routes
.
user
.
path
=
/service-a/
**

zuul
.
routes
.
user
.
url
=
http
:
//localhost:10010/



# swagger resource

zuul
.
routes
.
product
.
path
=
/service-b/
**

zuul
.
routes
.
product
.
url
=
http
:
//localhost:10020/



# use zuul routes generate swagger resources

swagger
.
butler
.
auto
-
generate
-
from
-
zuul
-
routes
=
true

在设置了 swagger.butler.auto-generate-from-zuul-routes=true之后会默认的根据zuul中的路由信息来生成SwaggerResource。其中，原来resource中的 name会使用zuul route的名称（比如：上面的user和product），而 api-docs-path和 swagger-version配置会使用默认的全局配置。如果resource中的三个参数有特殊情况要处理，可以采用快速入门中的配置方式来特别指定即可。

忽略某些路由生成
# swagger resource

zuul
.
routes
.
user
.
path
=
/service-a/
**

zuul
.
routes
.
user
.
url
=
http
:
//localhost:10010/



# swagger resource

zuul
.
routes
.
product
.
path
=
/service-b/
**

zuul
.
routes
.
product
.
url
=
http
:
//localhost:10020/



# use zuul routes generate swagger resources

swagger
.
butler
.
auto
-
generate
-
from
-
zuul
-
routes
=
true

swagger
.
butler
.
ignore
-
routes
=
product

如上示例，通过 swagger.butler.ignore-routes参数可以从当前配置的路由信息中排除某些路由内容不生成文档，配置内容为zuul中的路由名称，配置多个的时候使用 ,分割。

注意：swagger.butler.ignore-routes和 swagger.butler.generate-routes不能同时配置。这两个参数都不配置的时候，默认为zuul中的所有路由生成文档。

指定某些路由生成
# swagger resource

zuul
.
routes
.
user
.
path
=
/service-a/
**

zuul
.
routes
.
user
.
url
=
http
:
//localhost:10010/



# swagger resource

zuul
.
routes
.
product
.
path
=
/service-b/
**

zuul
.
routes
.
product
.
url
=
http
:
//localhost:10020/



# use zuul routes generate swagger resources

swagger
.
butler
.
auto
-
generate
-
from
-
zuul
-
routes
=
true

swagger
.
butler
.
generate
-
routes
=
product

如上示例，通过 swagger.butler.generate-routes参数可以从当前配置的路由信息中指定某些路由内容生成文档，配置内容为zuul中的路由名称，配置多个的时候使用 ,分割。

注意：swagger.butler.ignore-routes和 swagger.butler.generate-routes不能同时配置。这两个参数都不配置的时候，默认为zuul中的所有路由生成文档。

与服务治理整合
与eureka整合
在整合eureka获取所有该注册中心下的API文档时，只需要在上面工程的基础上增加下面的配置：

第一步：pom.xml中增加 eureka依赖，比如：

<dependencies>


<dependency>


<groupId>
com.didispace
</groupId>


<artifactId>
swagger-butler-core
</artifactId>


<version>
2.0.0
</version>


</dependency>


<dependency>


<groupId>
org.springframework.cloud
</groupId>


<artifactId>
spring-cloud-starter-eureka
</artifactId>


<version>
2.0.0.RELEASE
</version>


</dependency>

</dependencies>

第二步：应用主类增加 @EnableDiscoveryClient，比如：

@EnableDiscoveryClient

@EnableSwaggerButler

@SpringBootApplication

public

class

EurekaApplication

{




public

static

void
 main
(
String
[]
 args
)

{


SpringApplication
.
run
(
EurekaApplication
.
class
);


}



}

第三步：修改配置文件，增加eureka的配置，比如：

spring
.
application
.
name
=
swagger
-
butler
-
example
-
eureka

server
.
port
=
11001



eureka
.
client
.
service
-
url
.
defaultZone
=
http
:
//eureka.didispace.com/eureka/



swagger
.
butler
.
auto
-
generate
-
from
-
zuul
-
routes
=
true

swagger
.
butler
.
generate
-
routes
=
swagger
-
service
-
a
,
 swagger
-
service
-
b



swagger
.
butler
.
resources
.
swagger
-
service
-
b
.
api
-
docs
-
path
=
/xxx/
v2
/
api
-
docs

由于整合了eureka之后，zuul会默认为所有注册服务创建路由配置（默认的路由名为服务名），所以只需要通过 swagger.butler.auto-generate-from-zuul-routes=true参数开启根据路由信息生成文档配置的功能，配合 swagger.butler.ignore-routes和 swagger.butler.generate-routes参数就可以指定要生成的范围了，如果某些服务需要特殊配置，也可以通过 wagger.butler.resources.*的配置来覆盖默认设置，比如上面的 swagger.butler.resources.swagger-service-b.api-docs-path=/xxx/v2/api-docs指定了 swagger-service-b服务获取swagger文档的请求路径为 /xxx/v2/api-docs。

代码示例具体可见 swagger-butler-example-eureka目录

与consul整合
在整合eureka获取所有该注册中心下的API文档时，只需要在上面工程的基础上增加下面的配置：

第一步：pom.xml中增加 consul依赖，比如：

<dependencies>


<dependency>


<groupId>
com.didispace
</groupId>


<artifactId>
swagger-butler-core
</artifactId>


<version>
2.0.0
</version>


</dependency>


<dependency>


<groupId>
org.springframework.cloud
</groupId>


<artifactId>
spring-cloud-starter-consul-discovery
</artifactId>


<version>
2.0.0.RELEASE
</version>


</dependency>

</dependencies>

第二步：应用主类增加 @EnableDiscoveryClient，比如：

@EnableDiscoveryClient

@EnableSwaggerButler

@SpringBootApplication

public

class

EurekaApplication

{




public

static

void
 main
(
String
[]
 args
)

{


SpringApplication
.
run
(
EurekaApplication
.
class
);


}



}

第三步：配置文件中增加eureka的配置，比如：

spring
.
application
.
name
=
swagger
-
butler
-
example
-
consul

server
.
port
=
11002



spring
.
cloud
.
consul
.
host
=
localhost

spring
.
cloud
.
consul
.
port
=
8500



swagger
.
butler
.
auto
-
generate
-
from
-
zuul
-
routes
=
true

swagger
.
butler
.
generate
-
routes
=
swagger
-
service
-
a
,
 swagger
-
service
-
b



swagger
.
butler
.
resources
.
swagger
-
service
-
b
.
api
-
docs
-
path
=
/xxx/
v2
/
api
-
docs

这里除了consul自身的配置之外，其他内容与整合eureka时候的是一样的。

代码示例具体可见 swagger-butler-example-consul目录
