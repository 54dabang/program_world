package com.aiso.thread.akka;

public class Message {
    String url;

    Message(String url) {
        this.url = url;
    }
}

package com.aiso.thread.akka;

import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import akka.actor.Props;
import akka.actor.UntypedActorFactory;

import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

import static akka.actor.TypedActor.self;


public class Querier {
    private String question;
    private List<String> engines;
    private AtomicReference<String> result;

    public Querier(String question, List<String> engines, AtomicReference<String> result) {
        this.question = question;
        this.engines = engines;
        this.result = result;
    }

    @Override
    public void onReceive(Object message) throws Exception {
        if (message instanceof Result) {
            result.compareAndSet(null, ((Result) message).html);
            getContext().stop(self());
        } else {
            for (String base : engines) {
                String url = base + question;
                ActorRef fetcher = this.getContext().actorOf(Props.create(UrlFetcher.class), "fetcher-" + base.hashCode());
                Message m = new Message(url);
                fetcher.tell(m, self());
            }
        }
    }

    private static String getFirstResultActors(String question, List<String> engines) {
        ActorSystem system = ActorSystem.create("Search");
        AtomicReference<String> result = new AtomicReference<>();
        final ActorRef q = system.actorOf(
                Props.create((UntypedActorFactory) () -> new Querier(question, engines, result)), "master");
        q.tell(new Object(), ActorRef.noSender());
        while (result.get() == null) ;
        return result.get();
    }
}

package com.aiso.thread.akka;

public class Result {
    String html;

    Result(String html) {
        this.html = html;
    }
}


package com.aiso.thread.akka;

import akka.actor.ActorRef;

import static akka.actor.Actor$class.unhandled;

public class UrlFetcher extends {

    private ActorRef self;

    @Override
    public void onReceive(Object message) throws Exception {
        if (message instanceof Message) {
            Message work = (Message) message;
            String result = WS.url(work.url).get();
            getSender().tell(new Result(result), getSelf());
        } else {
            unhandled(message);
        }
    }

    private ActorRef getSender() {
        return null;
    }

    public ActorRef getSelf() {
        return self;
    }
}


