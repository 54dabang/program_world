
更多代码请见：https://github.com/xubo245/SparkLearning

  Spark生态之Alluxio学习 版本：alluxio-1.3.0（tachyon），spark-1.5.2,hadoop-2.6.0

在spark上运行alluxio请参考下一个博客

# 1.解释 #

## 1.1 下载##

wget http://alluxio.org/downloads/files/1.3.0/alluxio-1.3.0-bin.tar.gz
  tar xvfz alluxio-1.3.0-bin.tar.gz
## 1.2 配置##
复制

cp conf/alluxio-env.sh.template conf/alluxio-env.sh

修改：
vi conf/alluxio-env.sh
修改内容：

# The directory where Alluxio deployment is installed. (Default: the parent directory of libexec/).
# ALLUXIO_HOME
export ALLUXIO_HOME=/home/hadoop/cloud/alluxio-1.3.0

# The directory where log files are stored. (Default: ${ALLUXIO_HOME}/logs).
# ALLUXIO_LOGS_DIR

# Hostname of the master.
# ALLUXIO_MASTER_HOSTNAME
export  ALLUXIO_MASTER_HOSTNAME=Master

# This is now deprecated. Support will be removed in v2.0
# ALLUXIO_MASTER_ADDRESS

# The directory where a worker stores in-memory data. (Default: /mnt/ramdisk).
# E.g. On linux,  /mnt/ramdisk for ramdisk, /dev/shm for tmpFS; on MacOS, /Volumes/ramdisk for ramdisk
# ALLUXIO_RAM_FOLDER
export ALLUXIO_RAM_FOLDER=/home/hadoop/cloud/alluxio-1.3.0/ramdisk

# Address of the under filesystem address. (Default: ${ALLUXIO_HOME}/underFSStorage)
# E.g. "/my/local/path" to use local fs, "hdfs://localhost:9000/alluxio" to use a local hdfs
# ALLUXIO_UNDERFS_ADDRESS
export ALLUXIO_UNDERFS_ADDRESS=hdfs://Master:9000

# How much memory to use per worker. (Default: 1GB)
# E.g. "1000MB", "2GB"
# ALLUXIO_WORKER_MEMORY_SIZE
export ALLUXIO_WORKER_MEMORY_SIZE=6GB

保存，scp到集群中每个节点

## 1.3 启动##

hadoop@Master:~/cloud/alluxio-1.3.0$ ./bin/alluxio format
Waiting for MASTER tasks to finish...
All MASTER tasks finished, please analyze the log at /home/hadoop/cloud/alluxio-1.3.0/logs/task.log.
Formatting Alluxio Master @ Master
hadoop@Master:~/cloud/alluxio-1.3.0$ ./bin/alluxio-start.sh all Mount
/home/hadoop/cloud/alluxio-1.3.0/bin
Killed 1 processes on Master
Killed 0 processes on Master
Waiting for WORKERS tasks to finish...
All WORKERS tasks finished, please analyze the log at /home/hadoop/cloud/alluxio-1.3.0/logs/task.log.
Starting master @ Master. Logging to /home/hadoop/cloud/alluxio-1.3.0/logs
Waiting for MASTER tasks to finish...
All MASTER tasks finished, please analyze the log at /home/hadoop/cloud/alluxio-1.3.0/logs/task.log.

# 3.结果： #

![](http://i.imgur.com/J5IjaLM.png)

  alluxio fs 等命令测试可以用

hadoop@Mcnode1:~/disk2/xubo/data/SparkSW/uniref$ time cat D6Line.fasta |grep -c GC
618260

real	0m6.313s
user	0m6.169s
sys	0m1.056s
hadoop@Mcnode1:~/disk2/xubo/data/SparkSW/uniref$ time ~/cloud/alluxio-1.3.0/bin/alluxio fs cat /D6Line.fasta |grep -c GC
618260

real	0m7.725s
user	0m9.663s
sys	0m1.247s


测试：

hadoop@Master:~/cloud/alluxio-1.3.0$ ./bin/alluxio runTests
2016-11-09 23:23:10,739 INFO  type (MetricsSystem.java:startSinksFromConfig) - Starting sinks with config: {}.
2016-11-09 23:23:10,742 INFO  type (MetricsSystem.java:startSinks) - Sinks have already been started.
2016-11-09 23:23:10,843 INFO  type (AbstractClient.java:connect) - Alluxio client (version 1.3.0) is trying to connect with FileSystemMasterClient master @ Master/219.219.220.149:19998
2016-11-09 23:23:10,868 INFO  type (AbstractClient.java:connect) - Client registered with FileSystemMasterClient master @ Master/219.219.220.149:19998
runTest Basic CACHE_PROMOTE MUST_CACHE
2016-11-09 23:23:11,088 INFO  type (AbstractClient.java:connect) - Alluxio client (version 1.3.0) is trying to connect with BlockMasterClient master @ Master/219.219.220.149:19998
2016-11-09 23:23:11,090 INFO  type (AbstractClient.java:connect) - Client registered with BlockMasterClient master @ Master/219.219.220.149:19998
2016-11-09 23:23:11,209 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@8408396
2016-11-09 23:23:11,315 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@5087f4d0.
2016-11-09 23:23:11,406 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@62b3a353
2016-11-09 23:23:11,461 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_PROMOTE_MUST_CACHE took 472 ms.
2016-11-09 23:23:11,567 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_PROMOTE_MUST_CACHE took 106 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE_PROMOTE MUST_CACHE
2016-11-09 23:23:11,600 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@6dd8ade8
2016-11-09 23:23:11,611 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@4aaf32dc.
2016-11-09 23:23:11,682 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@18607df6
2016-11-09 23:23:11,699 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_MUST_CACHE took 114 ms.
2016-11-09 23:23:11,755 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_MUST_CACHE took 56 ms.
Passed the test!
runTest Basic CACHE_PROMOTE CACHE_THROUGH
2016-11-09 23:23:11,806 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@32c81878
2016-11-09 23:23:11,825 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@2928fd34
2016-11-09 23:23:11,990 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@7ae5fdad.
2016-11-09 23:23:12,397 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_PROMOTE_CACHE_THROUGH took 637 ms.
2016-11-09 23:23:12,408 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_PROMOTE_CACHE_THROUGH took 10 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE_PROMOTE CACHE_THROUGH
2016-11-09 23:23:12,422 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@9d14a9
2016-11-09 23:23:12,435 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@7fe96694
2016-11-09 23:23:12,587 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@366872f6
2016-11-09 23:23:12,597 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@414ad9fb.
2016-11-09 23:23:13,006 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@65c83981
2016-11-09 23:23:13,022 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_CACHE_THROUGH took 442 ms.
2016-11-09 23:23:13,057 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_CACHE_THROUGH took 35 ms.
Passed the test!
runTest Basic CACHE_PROMOTE THROUGH
2016-11-09 23:23:13,070 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@a4f5b6d
2016-11-09 23:23:13,082 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@6de4f076
2016-11-09 23:23:13,231 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@34aa287f.
2016-11-09 23:23:13,614 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_PROMOTE_THROUGH took 556 ms.
2016-11-09 23:23:13,660 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@5ee179dc
2016-11-09 23:23:13,674 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@6f860b23
2016-11-09 23:23:13,907 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_PROMOTE_THROUGH took 292 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE_PROMOTE THROUGH
2016-11-09 23:23:13,917 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@aa1e2a5
2016-11-09 23:23:13,928 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@7713c735
2016-11-09 23:23:14,423 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_THROUGH took 352 ms.
2016-11-09 23:23:14,472 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@633e5715
2016-11-09 23:23:14,537 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@b14de02.
2016-11-09 23:23:14,610 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@65a714ff
2016-11-09 23:23:14,624 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_THROUGH took 201 ms.
Passed the test!
runTest Basic CACHE_PROMOTE ASYNC_THROUGH
2016-11-09 23:23:14,633 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@4f4fe346
2016-11-09 23:23:14,664 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@5a62681b
2016-11-09 23:23:14,707 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_PROMOTE_ASYNC_THROUGH took 82 ms.
2016-11-09 23:23:14,744 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_PROMOTE_ASYNC_THROUGH took 37 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE_PROMOTE ASYNC_THROUGH
2016-11-09 23:23:14,763 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_ASYNC_THROUGH took 14 ms.
2016-11-09 23:23:14,773 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_PROMOTE_ASYNC_THROUGH took 10 ms.
Passed the test!
runTest Basic CACHE MUST_CACHE
2016-11-09 23:23:14,786 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_MUST_CACHE took 12 ms.
2016-11-09 23:23:14,794 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_MUST_CACHE took 8 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE MUST_CACHE
2016-11-09 23:23:14,806 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@2a37801c
2016-11-09 23:23:14,834 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@47089c2c
2016-11-09 23:23:14,852 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_MUST_CACHE took 52 ms.
2016-11-09 23:23:14,880 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_MUST_CACHE took 28 ms.
Passed the test!
runTest Basic CACHE CACHE_THROUGH
2016-11-09 23:23:15,195 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_CACHE_THROUGH took 314 ms.
2016-11-09 23:23:15,220 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_CACHE_THROUGH took 25 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE CACHE_THROUGH
2016-11-09 23:23:15,325 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_CACHE_THROUGH took 73 ms.
2016-11-09 23:23:15,336 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_CACHE_THROUGH took 11 ms.
Passed the test!
runTest Basic CACHE THROUGH
2016-11-09 23:23:15,412 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_THROUGH took 75 ms.
2016-11-09 23:23:15,534 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_THROUGH took 122 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE THROUGH
2016-11-09 23:23:15,549 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@7ef30fce
2016-11-09 23:23:15,561 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.FileSystemWorkerClientService$Client@3b4d67bb
2016-11-09 23:23:15,715 INFO  type (NettyChannelPool.java:createNewResource) - Created netty channel to with netty boostrap alluxio.client.block.BlockStoreContext$2@2bf9bcc6.
2016-11-09 23:23:16,130 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_THROUGH took 417 ms.
2016-11-09 23:23:16,277 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_THROUGH took 146 ms.
Passed the test!
runTest Basic CACHE ASYNC_THROUGH
2016-11-09 23:23:16,285 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@43036682
2016-11-09 23:23:16,309 INFO  type (ThriftClientPool.java:createNewResource) - Created a new thrift client alluxio.thrift.BlockWorkerClientService$Client@5051f26e
2016-11-09 23:23:16,326 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_CACHE_ASYNC_THROUGH took 48 ms.
2016-11-09 23:23:16,350 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_CACHE_ASYNC_THROUGH took 23 ms.
Passed the test!
runTest BasicNonByteBuffer CACHE ASYNC_THROUGH
2016-11-09 23:23:16,362 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_CACHE_ASYNC_THROUGH took 9 ms.
2016-11-09 23:23:16,370 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_CACHE_ASYNC_THROUGH took 7 ms.
Passed the test!
runTest Basic NO_CACHE MUST_CACHE
2016-11-09 23:23:16,382 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_NO_CACHE_MUST_CACHE took 12 ms.
2016-11-09 23:23:16,389 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_NO_CACHE_MUST_CACHE took 7 ms.
Passed the test!
runTest BasicNonByteBuffer NO_CACHE MUST_CACHE
2016-11-09 23:23:16,401 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_NO_CACHE_MUST_CACHE took 9 ms.
2016-11-09 23:23:16,412 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_NO_CACHE_MUST_CACHE took 11 ms.
Passed the test!
runTest Basic NO_CACHE CACHE_THROUGH
2016-11-09 23:23:16,543 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_NO_CACHE_CACHE_THROUGH took 130 ms.
2016-11-09 23:23:16,552 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_NO_CACHE_CACHE_THROUGH took 9 ms.
Passed the test!
runTest BasicNonByteBuffer NO_CACHE CACHE_THROUGH
2016-11-09 23:23:16,651 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_NO_CACHE_CACHE_THROUGH took 66 ms.
2016-11-09 23:23:16,675 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_NO_CACHE_CACHE_THROUGH took 23 ms.
Passed the test!
runTest Basic NO_CACHE THROUGH
2016-11-09 23:23:16,745 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_NO_CACHE_THROUGH took 69 ms.
2016-11-09 23:23:16,813 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_NO_CACHE_THROUGH took 68 ms.
Passed the test!
runTest BasicNonByteBuffer NO_CACHE THROUGH
2016-11-09 23:23:16,887 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_NO_CACHE_THROUGH took 52 ms.
2016-11-09 23:23:16,961 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_NO_CACHE_THROUGH took 74 ms.
Passed the test!
runTest Basic NO_CACHE ASYNC_THROUGH
2016-11-09 23:23:16,974 INFO  type (BasicOperations.java:writeFile) - writeFile to file /default_tests_files/Basic_NO_CACHE_ASYNC_THROUGH took 12 ms.
2016-11-09 23:23:16,982 INFO  type (BasicOperations.java:readFile) - readFile file /default_tests_files/Basic_NO_CACHE_ASYNC_THROUGH took 8 ms.
Passed the test!
runTest BasicNonByteBuffer NO_CACHE ASYNC_THROUGH
2016-11-09 23:23:17,005 INFO  type (BasicNonByteBufferOperations.java:write) - writeFile to file /default_tests_files/BasicNonByteBuffer_NO_CACHE_ASYNC_THROUGH took 19 ms.
2016-11-09 23:23:17,012 INFO  type (BasicNonByteBufferOperations.java:read) - readFile file /default_tests_files/BasicNonByteBuffer_NO_CACHE_ASYNC_THROUGH took 7 ms.
Passed the test!
hadoop@Master:~/cloud/alluxio-1.3.0$


参考

【1】https://github.com/Alluxio/alluxio
  【2】http://www.alluxio.org/
【3】http://spark.apache.org/docs/1.5.2/programming-guide.html
  【4】https://github.com/xubo245/SparkLearning
【5】http://www.cnblogs.com/seaspring/p/5726695.html


  更多代码请见：https://github.com/xubo245/SparkLearning

Spark生态之Alluxio学习 版本：alluxio-1.3.0（tachyon），spark-1.5.2,hadoop-2.6.0

# 1.解释 #

alluxio-0.7.1 启动的时候spark集群直接可以调用，但是alluxio-1.3.0需要自动配置

# 2.代码： #

## 2.1 下载##
http://www.alluxio.org/download 下选择：

  alluxio spark client
或者：

http://downloads.alluxio.org/downloads/files/1.3.0/alluxio-1.3.0-spark-client-jar-with-dependencies.jar

## 2.2 配置##
  请添加如下代码到spark/conf/spark-defaults.conf：

spark.driver.extraClassPath /home/hadoop/cloud/alluxio-1.3.0/jar/alluxio-1.3.0-spark-client-jar-with-dependencies.jar
spark.executor.extraClassPath /home/hadoop/cloud/alluxio-1.3.0/jar/alluxio-1.3.0-spark-client-jar-with-dependencies.jar

jar包需要scp到每个节点
## 2.2 启动##
重启spark集群
# 3.结果： #
spark-shell可以操作alluxio集群

scala>  val rdd1= sc.textFile("hdfs://219.219.220.149:9000//xubo/project/SparkSW/input/D1Line.fasta")
rdd1: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1] at textFile at <console>:21

scala> rdd1.count
res0: Long = 78295

scala> rdd1.saveAsTextFile("alluxio://219.219.220.149:19998/D1Line.fasta")



参考

【1】https://github.com/Alluxio/alluxio
  【2】http://www.alluxio.org/
【3】http://spark.apache.org/docs/1.5.2/programming-guide.html
  【4】https://github.com/xubo245/SparkLearning

###################


介绍

越来越多的公司和组织开始将Alluxio和Spark一起部署从而简化数据管理，提升数据访问性能。Qunar最近将Alluxio部署在他们的生产环境中，从而将Spark streaming作业的平均性能提升了15倍，峰值甚至达到300倍左右。在未使用Alluxio之前，他们发现生产环境中的一些Spark作业会变慢甚至无法完成。而在采用Alluxio后这些作业可以很快地完成。在这篇文章中，我们将介绍如何使用Alluxio帮助Spark变得更高效，具体地，我们将展示如何使用Alluxio高效存储Spark DataFrame。

Alluxio和Spark缓存

用户使用Alluxio存储Spark DataFrame非常简单：通过Spark DataFrame write API将DataFrame作为一个文件写入Alluxio。通常的做法是使用df.write.parquet()将DataFrame写成parquet文件。在DataFrame对应的parquet文件被写入Alluxio后，在Spark中可以使用sqlContext.read.parquet()读取。为了分析理解使用Alluxio存储DataFrame和使用Spark内置缓存存储DataFrame在性能上差异，我们进行了如下的一些实验。

实验相关设置如下：

硬件配置：单个worker安装在一个节点上，节点配置：61 GB内存 + 8核CPU；
软件版本：Spark 2.0.0和Alluxio1.2.0，参数均为缺省配置；
运行方式：以standalone模式运行Spark和Alluxio。

在本次实验中，我们使用Spark内置的不同缓存级别存储DataFrame对比测试使用Alluxio存储DataFrame，然后收集分析性能测试结果。同时通过改变DataFrame的大小来展示存储的DataFrame的规模对性能的影响。

存储DataFrame

Spark DataFrame可以使用persist() API存储到Spark缓存中。persist()可以缓存DataFrame数据到不同的存储媒介。

本次实验使用了以下Spark缓存存储级别（StorageLevel）：

MEMORY_ONLY：在Spark JVM内存中存储DataFrame对象
MEMORY_ONLY_SER：在Spark JVM内存中存储序列化后的DataFrame对象
DISK_ONLY: 将DataFrame数据存储在本地磁盘

下面是一个如何使用persist() API缓存DataFrame的例子:

  df.persist(MEMORY_ONLY)

将DataFrame保存在内存中的另一种方法是将DataFrame作为一个文件写入Alluxio。Spark支持将DataFrame写成多种不同的文件格式，在本次实验中，我们将DataFrame写成parquet文件。

下面是一个将DataFrame写入Alluxio的例子：

df.write.parquet(alluxioFile)

查询存储在Alluxio上的DataFrame

DataFrame被保存后（无论存储在Spark内存还是Alluxio中），应用可以读取DataFrame以进行后续的计算任务。本次实验中，我们创建了一个包含2列的DataFrame（这2列的数据类型均为浮点型），计算任务则是分别计算这2列数据之和。

当DataFrame存储在Alluxio时，Spark读取DataFrame就像从Alluxio中读取文件一样简单。下面是一个从Alluxio中读取DataFrame的例子：

df = sqlContext.read.parquet(alluxioFile)
df.agg(sum("s1"), sum("s2")).show()

我们分别从Alluxio中 parquet文件以及各种Spark存储级别缓存中读取DataFrame，并进行上述的聚合计算操作。下图显示了不同存储方案中的聚合操作的完成时间。



从上图可以看出，从Alluxio中读取DataFrame进行聚合操作具有比较稳定的执行性能。对于从Spark缓存中读取DataFrame，在DataFrame规模较小时执行性能具有一定优势，但是随着DataFrame规模的增长，性能急剧下降。在本文的实验环境中，对于各种Spark内置的存储级别， DataFrame规模达到20 GB以后，聚合操作的性能下降比较明显。

另一方面，相比使用Spark内置缓存，使用Alluxio存储DataFrame并进行聚合操作，其性能在小规模数据上略有劣势。然而，随着DataFrame数据规模的增长，从Alluxio中读取DataFrame性能更好，因为从Alluxio中读取DataFrame的耗时几乎始终随着数据规模线性增长。由于使用Alluxio存储DataFrame的读写性能具有较好的线性可扩展性，上层应用可以稳定地以内存速度处理更大规模的数据。

使用Alluxio共享存储的DataFrame

使用Alluxio存储DataFrame的另一大优势是可以在不同Spark应用或作业之间共享存储在Alluxio中的数据。当一个DataFrame文件被写入Alluxio后，它可以被不同的作业、SparkContext、甚至不同的计算框架共享。因此，如果一个存储在Alluxio中的DataFrame被多个应用频繁地访问，那么所有的应用均可以从Alluxio内存中直接读取数据，并不需要重新计算或者从另外的底层外部数据源中读取数据。

为了验证采用Alluxio共享内存的优势，我们在如上述的同样的实验环境中进行相同规模的DataFrame聚合操作。当使用50 GB规模的DataFrame时，我们在单个Spark应用中进行聚合操作，并且记录该聚合操作的耗时。没有使用Alluxio时，Spark应用需要每次都从数据源读取数据(在本次实验中是一个本地SSD)。在使用Alluxio时，数据可以直接从Alluxio内存中读取。下图显示了2次聚合操作的完成时间性能对比。使用Alluxio的情况下，聚合操作快了约2.5倍。



在上图的实验中，数据源是本地SSD。如果DataFrame来自访问起来更慢或不稳定的数据源，Alluxio的优势就更加明显了。举例而言，下图是DataFrame数据源由本地SSD替换为某公有云存储的实验结果。



这张图显示是执行7次聚合操作的平均完成时间。图中的红色的误差范围（error bar）代表完成时间的最大和最小范围。这些结果清晰地显示出Alluxio可以显著提升操作的平均性能。这是因为使用Alluxio缓存DataFrame时，Spark可以直接从Alluxio内存中读取DataFrame，而不是从远程的公有云存储中。平均而言，Alluxio可以加速上述DataFrame的聚集操作性能超过10倍。

另一方面，由于数据源是公有云系统，Spark必须跨网络远程读取数据。错综复杂的网络状况会导致读取性能难以预测。这种性能的不稳定性从上图中的误差范围（error bar）可以很明显地看出。在不使用Alluxio的情况下，Spark作业的完成时间变化范围超过1100秒。当使用Alluxio之后，完成时间的变化范围只有10秒。在本实验中，Alluxio能够将数据读取造成的不稳定性降低超过100倍。

由于共有云存储系统的网络访问性能不可预测性，最慢的Spark作业执行时间超过1700秒, 比平均慢2倍。然而，当使用Alluxio时，最慢的Spark作业执行时间大约比平均时间只慢6秒。因此，如果以最慢的Spark作业执行时间来评估，Alluxio可以加速DataFrame聚合操作超过17倍。

结论

Alluxio可以在多个方面帮助Spark变得更高效。这篇文章介绍了如何使用Alluxio存储Spark DataFrame，并且实验验证了采用Alluxio带来的优势：

Alluxio可以直接在内存中保存大规模的数据来加速Spark应用；
Alluxio能够在多个Spark应用之间快速共享存储在内存中的数据；
Alluxio可以提供稳定和可预测的数据访问性能。
