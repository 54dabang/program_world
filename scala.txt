shell / 2
安装（Windows） / 5
安装（Mac） / 9
安装（Linux） / 13
运行Scala / 19
注释 / 20
编写脚本 / 21
值 / 22
数据类型 / 24
变量 / 27
表达式 / 29
条件表达式 / 31
计算顺序 / 34
组合表达式 / 37
总结1 / 41
方法 / 45
类和对象 / 50
ScalaDoc / 54
创建类 / 55
类中的方法 / 58
导入和包 / 61
测试 / 65
域 / 70
for循环 / 72
Vector / 75
更多的条件表达式 / 79
总结2 / 82
模式匹配 / 91
类参数 / 94
具名参数和缺省参数 / 98
重载 / 101
构造器 / 104
辅助构造器 / 108
类的练习 / 110
case类 / 112
字符串插值 / 115
参数化类型 / 117
作为对象的函数 / 120
map和reduce / 125
推导 / 128
基于类型的模式匹配 / 133
基于case类的模式匹配 / 136
简洁性 / 139
风格拾遗 / 144
地道的Scala / 147
定义操作符 / 148
自动字符串转换 / 151
元组 / 153
伴随对象 / 157
继承 / 163
基类初始化 / 166
覆盖方法 / 170
枚举 / 173
抽象类 / 176
特征 / 179
统一访问方式和setter / 185
衔接Java / 187
应用 / 190
浅尝反射 / 192
多态 / 194
组合 / 200
使用特征 / 206
标记特征和case对象 / 209
类型参数限制 / 211
使用特征构建系统 / 214
序列 / 219
列表和递归 / 223
将序列与zip相结合 / 226
集 / 229
映射表 / 232
引用和可修改性 / 235
使用元组的模式匹配 / 238
用异常进行错误处理 / 242
构造器和异常 / 247
用Either进行错误报告 / 250
用Option对“非任何值”
进行处理 / 255
用Try来转换异常 / 261
定制错误报告机制 / 269
按契约设计 / 276
记日志 / 279
扩展方法 / 282
使用类型类的可扩展系统 / 285
接下来如何深入学习 / 290
附录A　AtomicTest / 291
附录B　从Java中调用
Scala / 293
索引 / 295

第1章 一门可伸缩的语言
第2章 Scala入门
第3章 Scala入门（续）
第4章 类和对象
第5章 基础类型和操作
第6章 函数式对象
第7章 内建的控制结构
第8章 函数和闭包
第9章 控制抽象
第10章 组合和继承
第11章 Scala的继承关系
第12章 特质
第13章 包和引入
第14章 断言和测试
第15章 样例类和模式匹配
第16章 使用列表
第17章 使用其他集合类
第18章 可变对象
第19章 类型参数化
第20章 抽象成员
第21章 隐式转换和隐式参数
第22章 实现列表
第23章 重访for表达式
第24章 深入集合类
第25章 Scala集合架构
第26章 提取器
第27章 注解
第28章 使用XML
第29章 用对象实现模块化编程
第30章 对象相等性
第31章 结合Scala与Java
第32章 Future和并发编程
第33章 组合子解析
第34章 GUI编程
第35章 SCells试算表
附录A Unix和Windows环境的Scala脚本

第1章　基础 A1 1
1．1　Scala解释器 1
1．2　声明值和变量 4
1．3　常用类型 5
1．4　算术和操作符重载 7
1．5　关于方法调用 8
1．6　apply方法 9
1．7　Scaladoc 11
练习 16
第2章　控制结构和函数 A1 19
2．1　条件表达式 20
2．2　语句终止 22
2．3　块表达式和赋值 22
2．4　输入和输出 23
2．5　循环 25
2．6　高级for循环 27
2．7　函数 28
2．8　默认参数和带名参数 L1 29
2．9　变长参数 L1 29
2．10　过程 31
2．11　懒值 L1 31
2．12　异常 32
练习 35
第3章　数组相关操作 A1 39
3．1　定长数组 39
3．2　变长数组：数组缓冲 40
3．3　遍历数组和数组缓冲 41
3．4　数组转换 42
3．5　常用算法 44
3．6　解读Scaladoc 45
3．7　多维数组 47
3．8　与Java的互操作 48
练习 49
第4章　映射和元组 A1 53
4．1　构造映射 53
4．2　获取映射中的值 54
4．3　更新映射中的值 55
4．4　迭代映射 56
4．5　已排序映射 57
4．6　与Java的互操作 57
4．7　元组 58
4．8　拉链操作 59
练习 60
第5章　类 A1 63
5．1　简单类和无参方法 63
5．2　带getter和setter的属性 64
5．3　只带getter的属性 67
5．4　对象私有字段 68
5．5　Bean属性 L1 69
5．6　辅助构造器 71
5．7　主构造器 72
5．8　嵌套类 L175
练习 78
第6章　对象 A1 81
6．1　单例对象 81
6．2　伴生对象 82
6．3　扩展类或特质的对象 83
6．4　apply方法 84
6．5　应用程序对象 85
6．6　枚举 86
练习 87
第7章　包和引入 A1 91
7．1　包 91
7．2　作用域规则 93
7．3　串联式包语句 95
7．4　文件顶部标记法 95
7．5　包对象 96
7．6　包可见性 97
7．7　引入 97
7．8　任何地方都可以声明引入 98
7．9　重命名和隐藏方法 99
7．10　隐式引入 99
练习 100
第8章　继承 A1 103
8．1　扩展类 103
8．2　重写方法 104
8．3　类型检查和转换 105
8．4　受保护字段和方法 106
8．5　超类的构造 106
8．6　重写字段 107
8．7　匿名子类 109
8．8　抽象类 109
8．9　抽象字段 110
8．10　构造顺序和提前定义 L3 110
8．11　Scala类继承关系 112
8．12　对象相等性 L1 114
8．13　值类 L2 116
练习 117
第9章　文件和正则表达式 A1 121
9．1　读取行 121
9．2　读取字符 122
9．3　读取词法单元和数字 123
9．4　从URL或其他源读取 124
9．5　读取二进制文件 124
9．6　写入文本文件 124
9．7　访问目录 125
9．8　序列化 125
9．9　进程控制 A2126
9．10　正则表达式 129
9．11　正则表达式组 130
练习 131
第10章　特质 A1135
10．1　为什么没有多重继承 135
10．2　当作接口使用的特质 137
10．3　带有具体实现的特质 138
10．4　带有特质的对象 139
10．5　叠加在一起的特质 140
10．6　在特质中重写抽象方法 141
10．7　当作富接口使用的特质 142
10．8　特质中的具体字段 143
10．9　特质中的抽象字段 144
10．10　特质构造顺序 145
10．11　初始化特质中的字段 147
10．12　扩展类的特质 148
10．13　自身类型 L2 149
10．14　背后发生了什么 151
练习 152
第11章　操作符 A1157
11．1　标识符 157
11．2　中置操作符 158
11．3　一元操作符 159
11．4　赋值操作符 160
11．5　优先级 161
11．6　结合性 162
11．7　apply和update方法 162
11．8　提取器 L2 164
11．9　带单个参数或无参数的提取器 L2166
11．10　unapplySeq方法 L2167
11．11　动态调用 L2 167
练习 171
第12章　高阶函数 L1 175
12．1　作为值的函数 175
12．2　匿名函数 177
12．3　带函数参数的函数 178
12．4　参数（类型）推断 179
12．5　一些有用的高阶函数 180
12．6　闭包 181
12．7　SAM转换 182
12．8　柯里化 183
12．9　控制抽象 185
12．10　return表达式 186
练习 187
第13章　集合 A2191
13．1　主要的集合特质 192
13．2　可变和不可变集合 193
13．3　序列 195
13．4　列表 196
13．5　集 197
13．6　用于添加或去除元素的操作符 198
13．7　常用方法 201
13．8　将函数映射到集合 203
13．9　化简、折叠和扫描 A3 205
13．10　拉链操作 209
13．11　迭代器 210
13．12　流 A3 211
13．13　懒视图 A3 213
13．14　与Java集合的互操作 213
13．15　并行集合 215
练习 217
第14章　模式匹配和样例类 A2 221
14．1　更好的switch 222
14．2　守卫 223
14．3　模式中的变量 223
14．4　类型模式 224
14．5　匹配数组、列表和元组 225
14．6　提取器 227
14．7　变量声明中的模式 227
14．8　for表达式中的模式 229
14．9　样例类 229
14．10　copy方法和带名参数 230
14．11　case语句中的中置表示法 231
14．12　匹配嵌套结构 232
14．13　样例类是邪恶的吗 233
14．14　密封类 234
14．15　模拟枚举 235
14．16　Option类型 235
14．17 偏函数 L2 236
练习 238
第15章　注解 A2243
15．1　什么是注解 243
15．2　什么可以被注解 244
15．3　注解参数 245
15．4　注解实现 246
15．5　针对Java特性的注解 247
15．5．1　Java修饰符 247
15．5．2　标记接口 248
15．5．3　受检异常 249
15．5．4　变长参数 249
15．5．5　JavaBeans 250
15．6　用于优化的注解 250
15．6．1　尾递归 ．250
15．6．2　跳转表生成与内联 252
15．6．3　可省略方法 253
15．6．4　基本类型的特殊化 254
15．7　用于错误和警告的注解 255
练习 256
第16章　XML处理 A2 259
16．1　XML字面量 260
16．2　XML节点 260
16．3　元素属性 262
16．4　内嵌表达式 263
16．5　在属性中使用表达式 264
16．6　特殊节点类型 265
16．7　类XPath表达式 266
16．8　模式匹配 267
16．9　修改元素和属性 268
16．10　XML变换 269
16．11　加载和保存 270
16．12　命名空间 273
练习 275
第17章　Future A2 277
17．1　在future中运行任务 278
17．2　等待结果 280
17．3　Try类 281
17．4　回调 282
17．5　组合future任务 283
17．6　其他future变换 286
17．7　Future对象中的方法 288
17．8　Promise 289
17．9　执行上下文 291
练习 292
第18章　类型参数 L2 297
18．1　泛型类 298
18．2　泛型函数 298
18．3　类型变量界定 298
18．4　视图界定 300
18．5　上下文界定 301
18．6　ClassTag上下文界定 301
18．7　多重界定 302
18．8　类型约束 L3302
18．9　型变 304
18．10　协变和逆变点 305
18．11　对象不能泛型 307
18．12　类型通配符 308
练习 309
第19章　高级类型 L2 313
19．1　单例类型 313
19．2　类型投影 315
19．3　路径 316
19．4　类型别名 317
19．5　结构类型 318
19．6　复合类型 319
19．7　中置类型 320
19．8　存在类型 321
19．9　Scala类型系统 322
19．10　自身类型 323
19．11　依赖注入 325
19．12　抽象类型 L3 327
19．13　家族多态 L3 329
19．14　高等类型 L3 333
练习 336
第20章　解析 A3 341
20．1　文法 342
20．2　组合解析器操作 343
20．3　解析器结果变换 345
20．4　丢弃词法单元 347
20．5　生成解析树 348
20．6　避免左递归 348
20．7　更多的组合子 350
20．8　避免回溯 352
20．9　记忆式解析器 353
20．10　解析器说到底是什么 354
20．11　正则解析器 355
20．12　基于词法单元的解析器 356
20．13　错误处理 358
练习 359
第21章　隐式转换和隐式参数 L3． 363
21．1　隐式转换 363
21．2　利用隐式转换丰富现有类库的功能 364
21．3　引入隐式转换 365
21．4　隐式转换规则 367
21．5　隐式参数 368
21．6　利用隐式参数进行隐式转换 370
21．7　上下文界定 371
21．8　类型类 372
21．9　类型证明 374
21．10　@implicitNotFound注解 376
21．11　CanBuildFrom解读 376

1什么是函数式编程
1．1 函数式编程的好处：一个简单的例子
1．1．1 一段带有副作用的程序
1．1．2 函数式的解法：去除副作用
1．2 （纯）函数究竟是什么
1．3 引用透明、纯粹度以及替代模型
1．4 小结
2在Scala中使用函数式编程
2．1 Scala语言介绍：
2．2 运行程序
2．3 模块、对象和命名空间
2．4 高阶函数：把函数传给函数
2．4．1 迂回做法：使用循环方式
2．4．2 第一个高阶函数
2．5 多态函数：基于类型的抽象
2．5．1 一个多态函数的例子
2．5．2 对高阶函数传入匿名函数
2．6 通过类型来实现多态
2．7 小结
3函数式数据结构
3．1 定义函数式数据结构
3．2 模式匹配
3．3 函数式数据结构中的数据共享
3．3．1 数据共享的效率
3．3．2 改进高阶函数的类型推导
3．4 基于list的递归并泛化为高阶函数
3．4．1 更多与列表相关的函数
3．4．2 用简单组件组合list函数时的效率损失
3．5 树
3．6 小结
4不是用异常来处理错误
4．1 异常的优点与劣势
4．2 异常的其他选择
4．3 Option数据类型
4．3．1 Option的使用模式
4．3．2 Option的组合、提升及对面向异常的API的包装
4．4 Either数据类型
4．5 小结
5严格求值和惰性求值
5．1 严格和非严格函数
5．2 一个扩展例子：惰性列表
5．2．1 对Stream保持记忆，避免重复运算
5．2．2 用于检测Stream的helper函数
5．3 把函数的描述与求值分离
5．4 无限流与共递归
5．5 小结
6纯函数式状态
6．1 以副作用方式生成随机数
6．2 纯函数式随机数生成器
6．3 用纯函数式实现带状态的API
6．4 状态行为的更好的API
6．4．1 组合状态行为
6．4．2 嵌套状态行为
6．5 更通用的状态行为数据类型
6．6 纯函数式命令编程
6．7 小结
功能设计和组合子库
7纯函数式的并行计算
7．1 选择数据类型和函数
7．1．1 一种用于并行计算的数据类型
7．1．2 组合并行计算
7．1．3 显性分流
7．2 确定表现形式
7．3 完善API
7．4 API与代数
7．4．1 映射法则
7．4．2 分流法则
7．4．3 打破法则：一个微妙的bug
7．4．4 用Actor实现一个完全无阻塞的Par
7．5 完善组合子为更通用的形式
7．6 小结
8基于性质的测试
8．1 基于性质测试概览
8．2 选择数据类型和函数
8．2．1 API的初始代码片段
8．2．2 性质的含义与API
8．2．3 生成器的意义和API
8．2．4 生成值决定生成器
8．2．5 精炼Prop的数据类型
8．3 最小化测试用例
8．4 使用库并改进其易用性
8．4．1 一些简单的例子
8．4．2 为并行计算编写测试套件
8．5 测试高阶函数及展望未来
8．6 生成器法则
8．7 小结
9语法分析器组合子
9．1 代数设计，走起
9．2 一种可能的代数
9．2．1 切片和非空重复
9．3 处理上下文的相关性
9．4 写一个JSON分析器
9．4．1 JSON格式
9．4．2 JSON分析器
9．5 错误提示
9．5．1 一种可行的设计
9．5．2 错误嵌套
9．5．3 控制分支和回溯轨迹
9．6 实现代数
9．6．1 一种可能的实现
9．6．2 串化分析器
9．6．3 标记分析器
9．6．4 故障转移和回溯
9．6．5 上下文相关的分析
9．7 小结
函数设计的通用结构
10Monoid
10．1 什么是monoid
10．2 使用monoid折叠列表
10．3 结合律和并行化
10．4 例子：并行解析
10．5 可折叠数据结构
10．6 组合monoid
10．6．1 组装更加复杂的monoid
10．6．2 使用组合的monoid融合多个遍历
10．7 小结 151
11Monad
11．1 函子：对map函数的泛化
11．1．1 函子法则
11．2 Monad：对flatMap和unit函数的泛化
11．3 Monadic组合子
11．4 单子定律
11．4．1 结合法则
11．4．2 为指定的monad证明结合法则
11．4．3 单位元法则
11．5 什么是monad
11．5．1 identity monad
11．5．2 状态monad和partial type application
11．6 小结
12可应用和可遍历函子
12．1 泛化单子
12．2 Applicative trait
12．3 单子与可应用函子的区别
12．3．1 对比Option applicative与Option monad
12．3．2 对比Parser applicative与Parser monad
12．4 可应用函子的优势
12．4．1 不是所有的可应用函子都是Monad
12．5 可应用法则
12．5．1 Left and right identity
12．5．2 结合律
12．5．3 Naturality of product
12．6 可遍历函子
12．7 使用Traverse
12．7．1 从monoid到可应用函子
12．7．2 带状态的遍历
12．7．3 组合可遍历结构
12．7．4 遍历融合
12．7．5 嵌套遍历
12．7．6 Monad组合
12．8 小结
作用与I/O
13外部作用和I/O
13．1 分解作用13．2 一个简单的IO类型
13．2．1 处理输入效果
13．2．2 简单IO类型的优缺点
13．3 避免栈溢出
13．3．1 将一个控制流转化为数据构造子
13．3．2 Trampolining：栈溢出的通用解决方法
13．4 一个更微妙的IO类型
13．4．1 合理的monad
13．4．2 一个支持控制台I/O的monad
13．4．3 纯解释器
13．5 非阻塞和异步I/O
13．6 一个通用的IO类型
13．6．1 最终的main程序
13．7 为什么IO类型不足以支撑流式I/O
13．8 小结
14本地影响和可变状态
14．1 纯函数式的可变状态
14．2 一种限制副作用范围的数据类型
14．2．1 受限可变性的语言表达
14．2．2 一种可变引用的代数表达
14．2．3 执行修改状态的行为
14．2．4 可变数组
14．2．5 一个纯函数的in-place快排实现
14．3 纯粹是相对于上下文的
14．3．1 副作用是什么？
14．4 小结
15流式处理与增量I/O
15．1 命令式I/O的问题示例
15．2 一个简单的流转换器
15．2．1 创建Process
15．2．2 组合和追加处理
15．2．3 处理文件
15．3 可扩展的处理类型
15．3．1 来源
15．3．2 保证资源安全
15．3．3 单一输入过程
15．3．4 多个输入流
15．3．5 去向
15．3．6 Effectful通道
15．3．7 动态资源分配
15．4 应用场景


精彩书评
　　“不论你是有Python经验还是更熟悉Java，你都会发现这本书对Scala的介绍非常适用。Jason的文字很实用，而且通俗易懂。本书提供了一个简洁明了的初学者指南，涵盖了我们熟悉的面向对象风格和这个语言的常用特性。我开始学Scala时就希望有这样一本书！”
　　——Katherine Fellows
　　Comcast公司软件工程师
目录
前言 1
第一部分 Scala核心
第1章 可扩展语言概述 11
安装Scala 11
使用Scala REPL 12
小结 14
练习 14

第2章 处理数据： 字面量、 值、 变量和类型 16
值18
变量 19
命名 20
类型 22
小结 33
练习 33

第3章 表达式和条件式 34
表达式 34
if...else表达式块 36
匹配表达式38
循环 44
小结 48
练习 49

第4章 函数 51
过程 54
用空括号定义函数54
使用表达式块调用函数 55
递归函数 56
嵌套函数 58
用命名参数调用函数58
有默认值的参数 59
Vararg参数60
参数组 60
类型参数 61
方法和操作符 63
编写可读的函数 66
小结 68
练习 68

第5章 首类函数 70
函数类型和值 71
高阶函数 73
函数字面量74
占位符语法77
部分应用函数和柯里化 78
传名参数 80
偏函数 81
用函数字面量块调用高阶函数 82
小结 85
练习 85

第6章 常用集合 87
列表、 集和映射 87
List里有什么？ 90
列表算术运算 94
映射列表 96
归约列表 97
转换集合 102
使用集合的模式匹配103
小结 105
练习 106

第7章 更多集合 109
可变集合 109
数组 113
Seq和序列 115
Stream 116
一元集合 118
小结 131
练习 132

第二部分 面向对象Scala
第8章 类 139
定义类 143
更多类类型148
更多字段和方法类型150
包装 153
私密性控制159
私密性访问修饰符161
最终类和密封类 162
小结 163
练习 163

第9章 对象、 Case类和Trait 167
对象 167
Trait 175
导入实例成员 183
小结 184
中场休息——配置你的第一个Scala项目185
练习 190

第10章 高级类型 197
元组和函数值类 199
隐含参数 201
隐含类 202
类型 204
小结 213
思考题 214
附录A 保留字 217

第1章探索数据分析1

1.1Scala入门2

1.2去除分类字段的重复值2

1.3数值字段概述4

1.4基本抽样、分层抽样和一致抽样5

1.5使用Scala和Spark的Notebook工作8

1.6相关性的基础12

1.7总结14

第2章数据管道和建模15

2.1影响图16

2.2序贯试验和风险处理17

2.3探索与利用问题21

2.4不知之不知23

2.5数据驱动系统的基本组件23

2.5.1数据收集24

2.5.2数据转换层25

2.5.3数据分析与机器学习26

2.5.4UI组件26

2.5.5动作引擎28

2.5.6关联引擎28

2.5.7监控28

2.6优化和交互28

2.7总结29

第3章使用Spark和MLlib30

3.1安装Spark31

3.2理解Spark的架构32

3.2.1任务调度32

3.2.2Spark的组件35

3.2.3MQTT、ZeroMQ、Flume和Kafka36

3.2.4HDFS、Cassandra、S3和Tachyon37

3.2.5Mesos、YARN和Standalone38

3.3应用38

3.3.1单词计数38

3.3.2基于流的单词计数41

3.3.3SparkSQL和数据框45

3.4机器学习库46

3.4.1SparkR47

3.4.2图算法：Graphx和GraphFrames48

3.5Spark的性能调整48

3.6运行Hadoop的HDFS49

3.7总结54

第4章监督学习和无监督学习55

4.1记录和监督学习55

4.1.1Iirs数据集56

4.1.2类标签点57

4.1.3SVMWithSGD58

4.1.4logistic回归60

4.1.5决策树62

4.1.6bagging和boosting：集成学习方法66

4.2无监督学习66

4.3数据维度71

4.4总结73

第5章回归和分类74

5.1回归是什么74

5.2连续空间和度量75

5.3线性回归77

5.4logistic回归81

5.5正则化83

5.6多元回归84

5.7异方差84

5.8回归树85

5.9分类的度量87

5.10多分类问题87

5.11感知机87

5.12泛化误差和过拟合90

5.13总结90

第6章使用非结构化数据91

6.1嵌套数据92

6.2其他序列化格式100

6.3Hive和Impala102

6.4会话化104

6.5使用特质109

6.6使用模式匹配110

6.7非结构化数据的其他用途113

6.8概率结构113

6.9投影113

6.10总结113

第7章使用图算法115

7.1图简介115

7.2SBT116

7.3Scala的图项目119

7.3.1增加节点和边121

7.3.2图约束123

7.3.3JSON124

7.4GraphX126

7.4.1谁收到电子邮件130

7.4.2连通分量131

7.4.3三角形计数132

7.4.4强连通分量132

7.4.5PageRank133

7.4.6SVD++134

7.5总结138

第8章Scala与R和Python的集成139

8.1R的集成140

8.1.1R和SparkR的相关配置140

8.1.2数据框144

8.1.3线性模型150

8.1.4广义线性模型152

8.1.5在SparkR中读取JSON文件156

8.1.6在SparkR中写入Parquet文件157

8.1.7从R调用Scala158

8.2Python的集成161

8.2.1安装Python161

8.2.2PySpark162

8.2.3从Java/Scala调用Python163

8.3总结167

第9章Scala中的NLP169

9.1文本分析流程170

9.2Spark的MLlib库177

9.2.1TFIDF177

9.2.2LDA178

9.3分词、标注和分块185

9.4POS标记186

9.5使用word2vec寻找词关系189

9.6总结192

第10章高级模型监控193

10.1系统监控194

10.2进程监控195

10.3模型监控201

10.3.1随时间变化的性能202

10.3.2模型停用标准202

10.3.3A/B测试202

第 1 章　零到六十：Scala 简介 1
1．1　为什么选择Scala 1
1．1．1　富有魅力的Scala 2
1．1．2　关于Java 8 3
1．2　安装Scala 3
1．2．1　使用SBT 5
1．2．2　执行Scala 命令行工具 6
1．2．3　在IDE中运行Scala REPL 8
1．3　使用Scala 8
1．4　并发 17
1．5　本章回顾与下一章提要 27
第 2 章　更简洁，更强大 28
2．1　分号 28
2．2　变量声明 29
2．3　Range 31
2．4　偏函数 32
2．5　方法声明 33
2．5．1　方法默认值和命名参数列表 33
2．5．2　方法具有多个参数列表 34
2．5．3　Future 简介 35
2．5．4　嵌套方法的定义与递归 38
2．6　推断类型信息 40
2．7　保留字 44
2．8　字面量 46
2．8．1　整数字面量 46
2．8．2　浮点数字面量 47
2．8．3　布尔型字面量 48
2．8．4　字符字面量 48
2．8．5　字符串字面量 48
2．8．6　符号字面量 50
2．8．7　函数字面量 50
2．8．8　元组字面量 50
2．9　 Option、Some和None：避免使用null 52
2．10　封闭类的继承 53
2．11　用文件和名空间组织代码 54
2．12　导入类型及其成员 55
2．12．1　导入是相对的 56
2．12．2　包对象 57
2．13　抽象类型与参数化类型 57
2．14　本章回顾与下一章提要 59
第 3 章　要点详解 60
3．1　操作符重载 ? 60
3．2　无参数方法 63
3．3　优先级规则 64
3．4　领域特定语言 65
3．5　Scala中的if语句 66
3．6　Scala中的for推导式 67
3．6．1　for循环 67
3．6．2　生成器表达式 67
3．6．3　保护式：筛选元素 67
3．6．4　Yielding 68
3．6．5　扩展作用域与值定义 69
3．7　其他循环结构 70
3．7．1　Scala的while循环 71
3．7．2　Scala中的do-while循环 71
3．8　条件操作符 71
3．9　使用try、catch和final子句 72
3．10　名字调用和值调用 75
3．11　惰性赋值 78
3．12　枚举 79
3．13　可插入字符串 81
3．14　Trait：Scala语言的接口和“混入” 83
3．15　本章回顾与下一章提要 85
第 4 章　模式匹配 86
4．1　简单匹配 86
4．2　match中的值、变量和类型 87
4．3　序列的匹配 90
4．4　元组的匹配 94
4．5　case中的guard语句 94
4．6　case类的匹配 95
4．6．1　unapply方法 96
4．6．2　unapplySeq方法 100
4．7　可变参数列表的匹配 101
4．8　正则表达式的匹配 103
4．9　再谈case语句的变量绑定 104
4．10　再谈类型匹配 104
4．11　封闭继承层级与全覆盖匹配 105
4．12　模式匹配的其他用法 107
4．13　总结关于模式匹配的评价 111
4．14　本章回顾与下一章提要 111
第 5 章　隐式详解 112
5．1　隐式参数 112
5．2　隐式参数适用的场景 115
5．2．1　执行上下文 115
5．2．2　功能控制 115
5．2．3　限定可用实例 116
5．2．4　隐式证据 120
5．2．5　绕开类型擦除带来的限制 122
5．2．6　改善报错信息 124
5．2．7　虚类型 124
5．2．8　隐式参数遵循的规则 127
5．3　隐式转换 128
5．3．1　构建独有的字符串插入器 132
5．3．2　表达式问题 134
5．4　类型类模式 135
5．5　隐式所导致的技术问题 137
5．6　隐式解析规则 139
5．7　Scala内置的各种隐式 139
5．8　合理使用隐式 146
5．9　本章回顾与下一章提要 146
第 6 章 Scala函数式编程 147
6．1　什么是函数式编程 148
6．1．1　数学中的函数 148
6．1．2　不可变变量 149
6．2　Scala中的函数式编程 151
6．2．1　匿名函数、Lambda与闭包 152
6．2．2　内部与外部的纯粹性 154
6．3　递归 154
6．4　尾部调用和尾部调用优化 155
6．5　偏应用函数与偏函数 157
6．6　Curry化与函数的其他转换 158
6．7　函数式编程的数据结构 162
6．7．1　序列 162
6．7．2　映射表 166
6．7．3　集合 168
6．8　遍历、映射、过滤、折叠与归约 168
6．8．1　遍历 169
6．8．2　映射 170
6．8．3　扁平映射 172
6．8．4　过滤 173
6．8．5　折叠与归约 174
6．9　向左遍历与向右遍历 178
6．10　组合器：软件最佳组件抽象 183
6．11　关于复制 186
6．12　本章回顾与下一章提要 188
第 7 章　深入学习for推导式 189
7．1　内容回顾：for推导式组成元素 189
7．2　 for推导式：内部机制 192
7．3　 for推导式的转化规则 194
7．4　 Option以及其他的一些容器类型 197
7．4．1　 Option容器 197
7．4．2　 Either：Option类型的逻辑扩展 200
7．4．3　 Try类型 205
7．4．4　Scalaz提供的Validation类 206
7．5　本章回顾与下一章提要 209
第 8 章　Scala面向对象编程 210
8．1　类与对象初步 211
8．2　引用与值类型 213
8．3　价值类 214
8．4　父类 217
8．5　Scala的构造器 217
8．6　类的字段 221
8．6．1　统一访问原则 223
8．6．2　一元方法 224
8．7　验证输入 224
8．8　调用父类构造器（与良好的面向对象设计） 226
8．9　嵌套类型 230
8．10　本章回顾与下一章提要 232
第 9 章　特征 233
9．1　Java 8中的接口 233
9．2　混入trait 234
9．3　可堆叠的特征 238
9．4　构造trait 243
9．5　选择类还是trait 244
9．6　本章回顾与下一章提要 245
第 10 章　Scala对象系统（I） 246
10．1　参数化类型：继承转化 246
10．1．1　Hood下的函数 247
10．1．2　可变类型的变异 250
10．1．3　Scala和Java中的变异 252
10．2　Scala的类型层次结构 253
10．3　闲话Nothing（以及Null） 254
10．4　 Product、case类和元组 258
10．5　 Predef对象 260
10．5．1　隐式转换 260
10．5．2　类型定义 262
10．5．3　条件检查方法 263
10．5．4　输入输出方法 263
10．5．5　杂项方法 265
10．6　对象的相等 265
10．6．1　 equals方法 266
10．6．2　 ==和!=方法 266
10．6．3　 eq和ne方法 267
10．6．4　数组相等和sameElements方法 267
10．7　本章回顾与下一章提要 268
第 11 章　Scala对象系统（II） 269
11．1　覆写类成员和trait成员 269
11．2　尝试覆写final声明 272
11．3　覆写抽象方法和具体方法 272
11．4　覆写抽象字段和具体字段 274
11．5　覆写抽象类型 280
11．6　无须区分访问方法和字段：统一访问原则 280
11．7　对象层次结构的线性化算法 282
11．8　本章回顾与下一章提要 287
第 12 章　Scala集合库 288
12．1　通用、可变、不可变、并发以及并行集合 288
12．1．1　 scala．collection包 289
12．1．2　 collection．concurrent包 290
12．1．3　 collection．convert包 291
12．1．4　 collection．generic包 291
12．1．5　 collection．immutable包 291
12．1．6　 scala．collection．mutable包 292
12．1．7　 scala．collection．parallel包 294
12．2　选择集合 295
12．3　集合库的设计惯例 296
12．3．1　 Builder 296
12．3．2　 CanBuildFrom 297
12．3．3　 Like特征 298
12．4　值类型的特化 298
12．5　本章回顾与下一章提要 300
第 13 章　可见性规则 301
13．1　默认可见性：公有可见性 301
13．2　可见性关键字 302
13．3　Public可见性 303
13．4　Protected可见性 304
13．5　Private可见性 305
13．6　作用域内私有和作用域内受保护可见性 306
13．7　对可见性的想法 312
13．8　本章回顾与下一章提要 313
第 14 章　Scala类型系统（I） 314
14．1　参数化类型 315
14．1．1　变异标记 315
14．1．2　类型构造器 315
14．1．3　类型参数的名称 315
14．2　类型边界 315
14．2．1　类型边界上限 316
14．2．2　类型边界下限 316
14．3　上下文边界 320
14．4　视图边界 320
14．5　理解抽象类型 322
14．6　自类型标记 325
14．7　结构化类型 329
14．8　复合类型 332
14．9　存在类型 334
14．10　本章回顾与下一章提要 335
第 15 章　Scala 类型系统（II） 336
15．1　路径相关类型 336
15．1．1　C．this 337
15．1．2　C．super 337
15．1．3　path．x 338
15．2　依赖方法类型 339
15．3　类型投影 340
15．4　值的类型 343
15．4．1　元组类型 343
15．4．2　函数类型 343
15．4．3　中缀类型 343
15．5　Higher-Kinded类型 344
15．6　类型Lambda 348
15．7　自递归类型：F-Bounded 多态 350
15．8　本章回顾与下一章提要 351
第 16 章　高级函数式编程 352
16．1　代数数据类型 352
16．1．1　加法类型与乘法类型 352
16．1．2　代数数据类型的属性 354
16．1．3　代数数据类型的最后思考 355
16．2　范畴理论 355
16．2．1　关于范畴 356
16．2．2　Functor范畴 356
16．2．3　Monad范畴 360
16．2．4　Monad的重要性 362
16．3　本章回顾与下一章提要 363
第 17 章　并发工具 365
17．1　scala．sys．process包 365
17．2　Future类型 367
17．3　利用Actor模型构造稳固且可扩展的并发应用 371
17．4　Akka：为Scala设计的Actor系统 372
17．5　Pickling和Spores 383
17．6　反应式编程 384
17．7　本章回顾与下一章提要 385
第 18 章　Scala与大数据 386
18．1　大数据简史 386
18．2　用Scala改善MapReduce 387
18．3　超越MapReduce 392
18．4　数学范畴 393
18．5　Scala数据工具列表 394
18．6　本章回顾与下一章提要 394
第 19 章　Scala动态调用 396
19．1　一个较为激进的示例：Ruby on Rails框架中的ActiveRecord库 396
19．2　使用动态特征实现Scala中的动态调用 397
19．3　关于DSL的一些思考 402
19．4　本章回顾与下一章提要 402
第 20 章　Scala的领域特定语言 403
20．1　DSL 示例：Scala中XML和JSON DSL 404
20．2　内部DSL 406
20．3　包含解析组合子的外部DSL 410
20．3．1　关于解析组合子 410
20．3．2　计算工资单的外部DSL 410
20．4　内部DSL与外部DSL：最后的思考 413
20．5　本章回顾与下一章提要 413
第 21 章　Scala工具和库 414
21．1　命令行工具 414
21．1．1　命令行工具：scalac 414
21．1．2　Scala命令行工具 418
21．1．3　scalap和javap命令行工具 421
21．1．4　scaladoc命令行工具 422
21．1．5　fsc命令行工具 422
21．2　构建工具 422
21．2．1　SBT：Scala标准构建工具 423
21．2．2　其他构建工具 425
21．3　与IDE或文本编辑器集成 425
21．4　在Scala中应用测试驱动开发 426
21．5　第三方库 427
21．6　本章回顾与下一章提要 429
第 22 章　与Java的互操作 430
22．1　在Scala代码中使用 Java 名称 430
22．2　Java泛型与Scala泛型 430
22．3　JavaBean的性质 432
22．4　 AnyVal类型与Java原生类型 433
22．5　Java代码中的Scala名称 433
22．6　本章回顾与下一章提要 434
第 23 章　应用程序设计 435
23．1　回顾之前的内容 435
23．2　注解 437
23．3　Trait即模块 441
23．4　设计模式 442
23．4．1　构造型模式 443
23．4．2　结构型模式 443
23．4．3　行为型模式 444
23．5　契约式设计带来更好的设计 446
23．6　帕特农神庙架构 448
23．7　本章回顾与下一章提要 453
第 24 章　元编程：宏与反射 454
24．1　用于理解类型的工具 455
24．2　运行时反射 455
24．2．1　类型反射 455
24．2．2　ClassTag、TypeTag与Manifest 457
24．3　Scala的高级运行时反射API 458
24．4　宏 461
24．4．1　宏的示例：强制不变性 463
24．4．2　关于宏的最后思考 466
24．5　本章回顾与下一章提要 466

第1章Scala零基础入门
1.1Scala概述
1.2Windows及Linux下Scale运行环境安装配置
1.2.1软件工具准备
1.2.2Windows环境下的Scala安装
1.2.3Linux环境下的Scala安装
1.2.4Linux环境下的Hadoop安装与配置
1.2.5Linux环境下的Spark安装与配置
1.3Scala开发环境搭建和HelloWorld实例
1.3.1Scala集成开发工具的安装
1.3.2HelloWorld编程实例
1.3.3WorkSheet的使用
1.4变量的使用
1.4.1Scala解释器中的变量示例
1.4.2val变量的定义
1.4.3var变量的定义
1.4.4var变量与val变量的使用比较
1.5函数的定义、流程控制、异常处理
1.5.1函数的定义
1.5.2流程控制（if、while、for）
1.5.3异常处理
1.6Tuple、Array、Map与文件操作
1.6.1Tuple元组
1.6.2Array数组
1.6.3文件操作
1.6.4Map映射
1.7Scala中的apply方法
1.7.1Object中的apply
1.7.2Class中的apply
1.7.3Array数组的apply实现
1.8小结
第2章Scala面向对象编程开发
2.1类的定义及属性
2.1.1类定义
2.1.2带有getter和setter的属性
2.2主构造器、私有构造器、构造器重载
2.2.1构造器重载之辅助构造器
2.2.2主构造器
2.2.3不同访问权限的构造器
2.3内部类和外部类
2.4单例对象、伴生对象
2.5继承：超类的构造、重写字段、重写方法
2.5.1超类的构造
2.5.2重写字段
2.5.3重写方法
2.6抽象类、抽象字段、抽象方法
2.6.1抽象类
2.6.2抽象字段
2.6.3抽象方法
2.7trait特质
2.7.1作为接口使用的trait
2.7.2在对象中混入trait
2.7.3trait深入解析
2.8多重继承、多重继承构造器执行顺序及AOP实现
2.8.1多重继承
2.8.2多重继承构造器执行顺序
2.8.3AOP实现
2.9包的定义、包对象、包的引用、包的隐式引用
2.9.1包的定义
2.9.2包对象
2.9.3包的引用
2.9.4包的隐式引用
2.10包、类、对象、成员、伴生类、伴生对象访问权限
2.10.1包、类、对象、成员访问权限
2.10.2伴生类、伴生对象访问权限
2.11小结
第3章Scala高阶函数
3.1匿名函数
3.2偏应用函数
3.3闭包
3.4SAM转换
3.5Curring函数
3.6高阶函数
3.7高阶函数在Spark中的应用
3.8小结
中级篇
第4章Scala模式匹配
4.1模式匹配简介
4.2模式匹配类型
4.2.1常量模式
4.2.2变量模式
4.2.3构造器模式
4.2.4序列（Sequence)模式
4.2.5元组（Tuple)模式
4.2.6类型模式
4.2.7变量绑定模式
4.3模式匹配与Case Class
4.3.1构造器模式匹配原理
4.3.2序列模式匹配原理
4.3.3Sealed Class在模式匹配中的应用
4.4模式匹配应用实例
4.4.1for循环控制结构中的模式匹配
4.4.2正则表达式中的模式匹配
4.4.3异常处理中的模式匹配
4.4.4Spark源码中的模式匹配使用
4.5本章小结
第5章Scala集合
5.1可变集合与不可变集合（Collection）
5.1.1集合的概述
5.1.2集合的相关操作
5.1.3集合的操作示例
5.2序列（Seq）
5.2.1序列的概述
5.2.2序列的相关操作
5.2.3序列的操作示例
5.3列表（List）
5.3.1列表的概述
5.3.2列表的相关操作
5.3.3列表的操作示例
5.4集（Set）
5.4.1集的概述
5.4.2集的相关操作
5.4.3集的操作示例
5.5映射（Map）
5.5.1映射的概述
5.5.2映射的相关操作
5.5.3映射的操作示例
5.6迭代器（Iterator）
5.6.1迭代器的概述
5.6.2迭代器的相关操作
5.6.3迭代器的操作示例
5.7集合的架构
5.8小结
高级篇
第6章Scala类型参数
6.1泛型
6.1.1泛型的概述
6.1.2泛型的操作示例
6.2界定
6.2.1上下界界定
6.2.2视图界定
6.2.3上下文界定
6.2.4多重界定
6.2.5界定的操作示例
6.3类型约束
6.3.1类型约束的概述
6.3.2类型约束的操作示例
6.4类型系统
6.4.1类型系统的概述
6.4.2类型系统的操作示例
6.5型变Variance
6.5.1协变
6.5.2逆变
6.5.3协变与逆变的操作示例
6.6结合Spark源码说明Scala类型参数的使用
6.7小结
第7章Scala高级类型
7.1单例类型
7.1.1单例类型概述
7.1.2单例类型示例
7.2类型别名
7.2.1类型别名概述
7.2.2类型别名示例
7.3自身类型
7.3.1自身类型概述
7.3.2自身类型示例
7.4中置类型
7.4.1中置类型概述
7.4.2中置类型示例
7.5类型投影
7.5.1类型投影概述
7.5.2类型投影实例
7.6结构类型
7.6.1结构类型概述
7.6.2结构类型示例
7.7复合类型
7.7.1复合类型概述
7.7.2复合类型示例
7.8存在类型
7.8.1存在类型概述
7.8.2存在类型示例
7.9函数类型
7.9.1函数类型概述
7.9.2函数类型示例
7.10抽象类型
7.10.1抽象类型概述
7.10.2抽象类型实例
7.11Spark源码中的高级类型使用
7.12本章小结
第8章Scala隐式转换
8.1隐式转换函数
8.1.1隐式转换函数的定义
8.1.2隐式转换函数的功能
8.2隐式类与隐式对象
8.2.1隐式类
8.2.2隐式参数与隐式值
8.3类型证明中的隐式转换
8.3.1类型证明的定义
8.3.2类型证明使用实例
8.4上下文界定、视图界定中的隐式转换
8.4.1Ordering与Ordered特质
8.4.2视图界定中的隐式转换
8.4.3上下文界定中的隐式转换
8.5隐式转换规则
8.5.1发生隐式转换的条件
8.5.2不会发生隐式转换的条件
8.6Spark源码中的隐式转换使用
8.6.1隐式转换函数
8.6.2隐式类
8.6.3隐式参数
8.7本章小结
第9章Scala并发编程
9.1Scala的Actor模型简介
9.2Scala Actor的构建方式
9.2.1继承Actor类
9.2.2Actor工具方法
9.3Actor的生命周期
9.3.1start方法的等幂性
9.3.2Actor的不同状态
9.4Actor之间的通信
9.4.1Actor之间发送消息
9.4.2Actor接收消息
9.5使用react重用线程提升性能
9.6Channel通道
9.6.1OutputChannel
9.6.2InputChannel
9.6.3创建和共享channel
9.7同步和Future
9.8Scala并发编程实例
9.8.1Scala Actor并发编程
9.8.2ExecutorService并发编程
9.9小结
分布式框架篇

15.3Spark Streaming整合Kafka
15.3.1基本架构设计流程
15.3.2消息消费者（Consumer）设计——基于Receiver方法
15.3.3消息消费者（Consumer）设计——基于No Receiver方法
15.3.4消息生产者（Producer）设计
15.4小结
附录Kafka集群server.properties配置文档


编辑器 / 1
shell / 2
安装（Windows） / 5
安装（Mac） / 9
安装（Linux） / 13
运行Scala / 19
注释 / 20
编写脚本 / 21
值 / 22
数据类型 / 24
变量 / 27
表达式 / 29
条件表达式 / 31
计算顺序 / 34
组合表达式 / 37
总结1 / 41
方法 / 45
类和对象 / 50
ScalaDoc / 54
创建类 / 55
类中的方法 / 58
导入和包 / 61
测试 / 65
域 / 70
for循环 / 72
Vector / 75
更多的条件表达式 / 79
总结2 / 82
模式匹配 / 91
类参数 / 94
具名参数和缺省参数 / 98
重载 / 101
构造器 / 104
辅助构造器 / 108
类的练习 / 110
case类 / 112
字符串插值 / 115
参数化类型 / 117
作为对象的函数 / 120
map和reduce / 125
推导 / 128
基于类型的模式匹配 / 133
基于case类的模式匹配 / 136
简洁性 / 139
风格拾遗 / 144
地道的Scala / 147
定义操作符 / 148
自动字符串转换 / 151
元组 / 153
伴随对象 / 157
继承 / 163
基类初始化 / 166
覆盖方法 / 170
枚举 / 173
抽象类 / 176
特征 / 179
统一访问方式和setter / 185
衔接Java / 187
应用 / 190
浅尝反射 / 192
多态 / 194
组合 / 200
使用特征 / 206
标记特征和case对象 / 209
类型参数限制 / 211
使用特征构建系统 / 214
序列 / 219
列表和递归 / 223
将序列与zip相结合 / 226
集 / 229
映射表 / 232
引用和可修改性 / 235
使用元组的模式匹配 / 238
用异常进行错误处理 / 242
构造器和异常 / 247
用Either进行错误报告 / 250
用Option对“非任何值”
进行处理 / 255
用Try来转换异常 / 261
定制错误报告机制 / 269
按契约设计 / 276
记日志 / 279
扩展方法 / 282
使用类型类的可扩展系统 / 285
接下来如何深入学习 / 290
附录A　AtomicTest / 291
附录B　从Java中调用
Scala / 293
索引 / 295

1 高性能之路 1
性能的定义 2
高性能软件 2
硬件资源 3
时延和吞吐率 4
瓶颈 5
性能总结 5
平均数的问题 6
百分位数来救场 8
指标搜集 9
用基准数据（benchmark）来衡量性能 9
通过Profiling来定位瓶颈 10
结合基准测试和profiling 10
案例分析 11
工具链 11
小结 12
2 在JVM上度量性能 13
金融领域一瞥 13
意外的市场波动毁掉了利润 16
重现故障 17
吞吐量基准测试 17
时延基准测试 20
定位瓶颈 25
微基准取得大进步 42
小结 49
3 释放Scala的性能 51
值类 52
字节码表示 52
性能考虑 54
标记类型――值类的一种替代品 55
专门化 57
字节码表示 58
性能考虑 60
元组 65
字节码表示 65
性能考虑 66
模式匹配 68
字节码表示 68
性能考虑 70
尾递归 75
字节码表示 78
性能考虑 79
Option数据类型 83
字节码表示 83
性能考虑 84
案例研究――性能更高的Option 85
小结 89
4 探索集合API 91
高吞吐量系统 - 改进指令簿 91
理解过去实现上的折中 - list实现 92
当前的指令簿 - queue实现 101
通过惰性计算来提升取消操作的性能 104
历史数据分析 114
滞后时序收益率（lagged time series returns） 114
处理多个收益率序列 122
小结 127
5 惰性集合及事件溯源 129
提升用户报表生成速度 129
深入报表生成代码 130
使用视图提速报表生成 133
视图的注意事项 141
打包报表生成结果 145
重新思考报表架构 146
Stream概览 149
事件变换 152
构建事件源管道 158
马尔可夫流式链 162
流的注意事项 166
小结 169
6 Scala的并发 171
并行回测（backtesting）策略 171
探索Future 173
Future和crazy ideas 177
Future使用时的考量 179
提交执行妨碍性能 185
处理阻塞调用和回调 188
ExecutionContext和阻塞调用 189
用Promise转化回调 193
受命进一步提升回测性能 196
介绍Scalaz Task 197
用Task为交易日模拟建模 204
总结回测 209
小结 210
7 高性能架构 211
分布式自动化交易员（Distributed automated traders） 211
分布式架构概述 212
第一次尝试分布式自动化交易系统 212
引入CRDT 214
CRDT和自动化交易系统 219
当余额不足时 220
免费交易策略性能提升 222
为交易策略做基准测试 222
无界队列（unbounded queue）的危险 225
应用背压（back pressure） 226
应用负载控制策略 227
Free monad 233

2 JVM 和Java 内存模型中的并发处理方式 13

3 构建并发程序的传统材料 47

4 使用Future 和Promise 对象编写异步程序 85

5 数据并行集合 121

6 使用Reactive Extensions 编写并发程序 153

7 基于软件的事务内存 189

8 Actor 227

9 实用并发技术 269